{
  "!name" : "anychart",
  "anychart" : {
    "map" : {
      "!type" : "fn() -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#map",
      "!doc" : "Creates and returns a Map."
    },
    "bar" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#bar",
      "!doc" : "Creates and returns a Bar Chart."
    },
    "sunburst" : {
      "!type" : "fn(opt_data?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod) -> +anychart.charts.Sunburst",
      "!url" : "8.3.0/anychart#sunburst",
      "!doc" : "Creates and returns a Sunburst Chart."
    },
    "resource" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.charts.Resource",
      "!url" : "8.3.0/anychart#resource",
      "!doc" : "Creates and returns a Resource Chart."
    },
    "tagCloud" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_settings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.TagCloud",
      "!url" : "8.3.0/anychart#tagCloud",
      "!doc" : "Creates and returns a Tag Cloud."
    },
    "quadrant" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Scatter",
      "!url" : "8.3.0/anychart#quadrant",
      "!doc" : "Creates and returns a Quadrant Chart."
    },
    "charts" : {
      "Venn" : {
        "!doc" : "Venn chart class.",
        "!url" : "8.3.0/anychart.charts.Venn",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#selected",
            "!doc" : "Selected state settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#unselect",
            "!doc" : "Deselects all selected points."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "dataSeparator" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#dataSeparator",
            "!doc" : "Data separator settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#stroke",
            "!doc" : "Stroke settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#select",
            "!doc" : "Select settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#fill",
            "!doc" : "Fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "intersections" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.venn.Intersections|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#intersections",
            "!doc" : "Intersections settings."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#unhover",
            "!doc" : "Removes hover from the series point or series."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#hover",
            "!doc" : "Hover settings."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Mapping|+anychart.data.Set|+Array|string|+anychart.data.DataSettings, opt_csvSettings?: +Object) -> +anychart.data.View|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Venn",
            "!url" : "8.3.0/anychart.charts.Venn#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Radar" : {
        "!doc" : "Radar chart class.",
        "!url" : "8.3.0/anychart.charts.Radar",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#yMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#xMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: +anychart.enums.RadarSeriesType|string) -> +anychart.enums.RadarSeriesType|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#selected",
            "!doc" : "Selected state settings."
          },
          "innerRadius" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#innerRadius",
            "!doc" : "Radar inner radius."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Radar#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#xAxis",
            "!doc" : "X-axis settings."
          },
          "area" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.radar.series.Area",
            "!url" : "8.3.0/anychart.charts.Radar#area",
            "!doc" : "Adds Area series."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "startAngle" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#startAngle",
            "!doc" : "Chart start angle."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#minLabels",
            "!doc" : "Minimum labels settings.?"
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: +anychart.scales.Ordinal) -> +anychart.scales.Ordinal|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Radar#getPlotBounds",
            "!doc" : "Getter for the current data bounds of the plot."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Radar#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "line" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.radar.series.Line",
            "!url" : "8.3.0/anychart.charts.Radar#line",
            "!doc" : "Adds Line series."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Radar#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Radar#getSeriesCount",
            "!doc" : "Returns series count."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#maxLabels",
            "!doc" : "Maximum labels settings.?"
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|string|+anychart.scales.Base|+anychart.enums.ScaleTypes) -> +anychart.scales.Linear|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#yScale",
            "!doc" : "Y-scale settings."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.radar.series.Base",
            "!url" : "8.3.0/anychart.charts.Radar#getSeries",
            "!doc" : "Gets series by index."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Radar#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "marker" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.radar.series.Marker",
            "!url" : "8.3.0/anychart.charts.Radar#marker",
            "!doc" : "Adds Marker series."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.radar.series.Base]",
            "!url" : "8.3.0/anychart.charts.Radar#addSeries",
            "!doc" : "Add series to the chart."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+anychart.data.DataSettings|+Array) -> +anychart.data.View|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.radar.series.Base",
            "!url" : "8.3.0/anychart.charts.Radar#getSeriesAt",
            "!doc" : "Gets the series by its index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Radar|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#yGrid",
            "!doc" : "Grid settings by Y-scale."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Radar",
            "!url" : "8.3.0/anychart.charts.Radar#markerPalette",
            "!doc" : "Marker palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Polar" : {
        "!doc" : "Polar chart class.",
        "!url" : "8.3.0/anychart.charts.Polar",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Polar|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#yMinorGrid",
            "!doc" : "Minor grid settings by Y-scale."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Polar|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#xMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: +anychart.enums.PolarSeriesType|string) -> string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#selected",
            "!doc" : "Selected state settings."
          },
          "innerRadius" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#innerRadius",
            "!doc" : "Polar inner radius."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Polar#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Polar|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#xAxis",
            "!doc" : "X-axis settings."
          },
          "area" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Area",
            "!url" : "8.3.0/anychart.charts.Polar#area",
            "!doc" : "Adds Area series."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "rangeColumn" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.RangeColumn",
            "!url" : "8.3.0/anychart.charts.Polar#rangeColumn",
            "!doc" : "Adds Range Column series."
          },
          "startAngle" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#startAngle",
            "!doc" : "Chart start angle."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "sortPointsByX" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#sortPointsByX",
            "!doc" : "SortPointsByX mode"
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "barGroupsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#barGroupsPadding",
            "!doc" : "Settings for the space between bar groups."
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#minLabels",
            "!doc" : "Minimum labels settings."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "maxPointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#maxPointWidth",
            "!doc" : "Maximum point width settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Polar#getPlotBounds",
            "!doc" : "Getter for the data bounds of the chart."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#hatchFillPalette",
            "!doc" : "Hatch fill settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "barsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#barsPadding",
            "!doc" : "Settings for the space between bars."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Polar|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "line" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Line",
            "!url" : "8.3.0/anychart.charts.Polar#line",
            "!doc" : "Adds Line series."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Polar#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Polar#getSeriesCount",
            "!doc" : "Returns series count."
          },
          "column" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Column",
            "!url" : "8.3.0/anychart.charts.Polar#column",
            "!doc" : "Adds Column series."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#maxLabels",
            "!doc" : "Maximum labels settings."
          },
          "polygon" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Polygon",
            "!url" : "8.3.0/anychart.charts.Polar#polygon",
            "!doc" : "Adds Polygon series."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "polyline" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Polyline",
            "!url" : "8.3.0/anychart.charts.Polar#polyline",
            "!doc" : "Adds Polyline series."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Radial|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScatterScaleTypes|string|+anychart.scales.ScatterBase) -> +anychart.scales.ScatterBase|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#yScale",
            "!doc" : "Y-scale settings."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.polar.series.Base",
            "!url" : "8.3.0/anychart.charts.Polar#getSeries",
            "!doc" : "Gets series by index."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#pointWidth",
            "!doc" : "Point width settings."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Polar#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "marker" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.polar.series.Marker",
            "!url" : "8.3.0/anychart.charts.Polar#marker",
            "!doc" : "Adds Marker series."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.polar.series.Base]",
            "!url" : "8.3.0/anychart.charts.Polar#addSeries",
            "!doc" : "Adds series to the chart."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+anychart.data.DataSettings|+Array) -> +anychart.data.View|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.polar.series.Base",
            "!url" : "8.3.0/anychart.charts.Polar#getSeriesAt",
            "!doc" : "Getter for the series by its index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Polar|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#yGrid",
            "!doc" : "Grid settings by Y-scale."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Polar",
            "!url" : "8.3.0/anychart.charts.Polar#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "!doc" : "The anychart.charts namespace contains fundamental chart classes and base classes.",
      "Waterfall" : {
        "!doc" : "Waterfall chart class.",
        "!url" : "8.3.0/anychart.charts.Waterfall",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#yMinorGrid",
            "!doc" : "Minor grid settings by Y-scale."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "xZoom" : {
            "!type" : "fn(opt_value?: number|bool|Object) -> +anychart.core.utils.OrdinalZoom|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xZoom",
            "!doc" : "Zoom settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "xScroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartScroller|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xScroller",
            "!doc" : "Scroller settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Waterfall#getType",
            "!doc" : "Definition of the chart type."
          },
          "getXAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Waterfall#getXAxesCount",
            "!doc" : "Returns the number of X-axes."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xAxis",
            "!doc" : "X-axis settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#textMarker",
            "!doc" : "Text marker settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "dataMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.WaterfallDataMode|string) -> +anychart.enums.WaterfallDataMode|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#dataMode",
            "!doc" : "Data mode settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#minLabels",
            "!doc" : "Minimum labels settings."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "getYAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Waterfall#getYAxesCount",
            "!doc" : "Returns the number of Y-axes."
          },
          "maxPointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#maxPointWidth",
            "!doc" : "Maximum point width settings."
          },
          "minPointLength" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#minPointLength",
            "!doc" : "Minimum point length settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Ordinal|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Waterfall#getPlotBounds",
            "!doc" : "Returns data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#crosshair",
            "!doc" : "Crosshair settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "annotations" : {
            "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#annotations",
            "!doc" : "Creates annotations."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Waterfall#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Waterfall#getSeriesCount",
            "!doc" : "Returns the number of series in a chart."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#maxLabels",
            "!doc" : "Maximum labels settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#yScale",
            "!doc" : "Y-scale settings."
          },
          "waterfall" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.waterfall.series.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#waterfall",
            "!doc" : "Adds Waterfall series."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.waterfall.series.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#getSeries",
            "!doc" : "Returns series by id."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#pointWidth",
            "!doc" : "Point width settings."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Waterfall#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.cartesian.series.Base]",
            "!url" : "8.3.0/anychart.charts.Waterfall#addSeries",
            "!doc" : "Adds series to the chart."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+anychart.data.DataSettings|+Array) -> +anychart.data.View|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.charts.Waterfall#getSeriesAt",
            "!doc" : "Returns series by index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#yGrid",
            "!doc" : "Grid settings by Y-scale."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "connectorStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: +anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Waterfall",
            "!url" : "8.3.0/anychart.charts.Waterfall#connectorStroke",
            "!doc" : "Stroke settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Map" : {
        "!doc" : "AnyChart map class.",
        "!url" : "8.3.0/anychart.charts.Map",
        "prototype" : {
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: +anychart.enums.MapSeriesType|string) -> +anychart.enums.MapSeriesType|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#selected",
            "!doc" : "Selected state settings."
          },
          "crsAnimation" : {
            "!type" : "fn(opt_value?: bool|Object, opt_duration?: number) -> +anychart.core.utils.Animation|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#crsAnimation",
            "!doc" : "Animation settings"
          },
          "featureScaleFactor" : {
            "!type" : "fn(id: string, opt_ratio?: number) -> number|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#featureScaleFactor",
            "!doc" : "Scale settings of the feature"
          },
          "colorRange" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ColorRange|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#colorRange",
            "!doc" : "Color range settings."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "crs" : {
            "!type" : "fn(Projection: Object|fn()|+anychart.enums.MapProjections|string) -> Object|fn()|+anychart.enums.MapProjections|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#crs",
            "!doc" : "Coordinate system settings"
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "drillUp" : {
            "!type" : "fn() -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#drillUp",
            "!doc" : "Drills one level up from the current level."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Map#getType",
            "!doc" : "Returns chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "zoomTo" : {
            "!type" : "fn(value: number, opt_cx?: number, opt_cy?: number) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#zoomTo",
            "!doc" : "Zooms the map to passed zoom level and coordinates."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "featureCrs" : {
            "!type" : "fn(id: string, opt_crs?: string) -> string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#featureCrs",
            "!doc" : "Coordinate system for the feature."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "scale" : {
            "!type" : "fn(opt_value?: +anychart.scales.Geo|Object) -> +anychart.scales.Geo",
            "!url" : "8.3.0/anychart.charts.Map#scale",
            "!doc" : "Map geo scale settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "zoom" : {
            "!type" : "fn(value: number, opt_cx?: number, opt_cy?: number, opt_duration?: number) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#zoom",
            "!doc" : "Zooms a map."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "overlapMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#overlapMode",
            "!doc" : "Overlap mode for labels"
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#hovered",
            "!doc" : "Hovered state settings."
          },
          "transform" : {
            "!type" : "fn(xLong: number, yLat: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Map#transform",
            "!doc" : "Returns coordinate at given latitude and longitude as pixel values relative to a map bounds."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#normal",
            "!doc" : "Normal state settings."
          },
          "getZoomLevel" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Map#getZoomLevel",
            "!doc" : "Gets the map zoom level."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "translateFeature" : {
            "!type" : "fn(id: string, dx: number, dy: number) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#translateFeature",
            "!doc" : "Translates feature on passed dx and dy."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Map#getPlotBounds",
            "!doc" : "Getter for the current data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#crosshair",
            "!doc" : "Map crosshair settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#labels",
            "!doc" : "Labels settings."
          },
          "axes" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.MapSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#axes",
            "!doc" : "Axes settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#hatchFillPalette",
            "!doc" : "Hatch fill palette."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "bubble" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.map.series.Bubble",
            "!url" : "8.3.0/anychart.charts.Map#bubble",
            "!doc" : "Creates a Bubble series."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "grids" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.grids.MapSettings|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#grids",
            "!doc" : "Grid settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Map#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "unboundRegions" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.MapUnboundRegionsMode|string|bool) -> +anychart.core.utils.UnboundRegionsSettings|+anychart.enums.MapUnboundRegionsMode|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#unboundRegions",
            "!doc" : "Unbound regions settings."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Map#getSeriesCount",
            "!doc" : "Returns a series count."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "move" : {
            "!type" : "fn(dx: number, dy: number) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#move",
            "!doc" : "Moves focus point for the map."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "callout" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.ui.Callout|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#callout",
            "!doc" : "Callout settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "minBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#minBubbleSize",
            "!doc" : "Minimum size for all bubbles on the charts."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.map.series.Base",
            "!url" : "8.3.0/anychart.charts.Map#getSeries",
            "!doc" : "Getter for the series by its id."
          },
          "geoIdField" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#geoIdField",
            "!doc" : "Geo id field"
          },
          "featureTranslation" : {
            "!type" : "fn(id: string, opt_dx?: number, opt_dy?: number) -> [number]|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#featureTranslation",
            "!doc" : "Getter for the current translation feature by id."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "drillDownMap" : {
            "!type" : "fn(opt_value?: +Object) -> Object",
            "!url" : "8.3.0/anychart.charts.Map#drillDownMap",
            "!doc" : "Drills down a map."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#palette",
            "!doc" : "Map palette."
          },
          "toGeoJSON" : {
            "!type" : "fn() -> Object",
            "!url" : "8.3.0/anychart.charts.Map#toGeoJSON",
            "!doc" : "Exports a map to GeoJSON format."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "inverseTransform" : {
            "!type" : "fn(x: number, y: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Map#inverseTransform",
            "!doc" : "Transforms local pixel coordinates to latitude/longitude values."
          },
          "getDrilldownPath" : {
            "!type" : "fn() -> [+anychart.core.MapPoint]",
            "!url" : "8.3.0/anychart.charts.Map#getDrilldownPath",
            "!doc" : "Returns the drill down path."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "geoData" : {
            "!type" : "fn(opt_data?: Node|string|Object) -> Node|string|Object|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#geoData",
            "!doc" : "Geo data settings."
          },
          "marker" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.map.series.Marker",
            "!url" : "8.3.0/anychart.charts.Map#marker",
            "!doc" : "Creates a Marker series."
          },
          "zoomToFeature" : {
            "!type" : "fn(id: string)",
            "!url" : "8.3.0/anychart.charts.Map#zoomToFeature",
            "!doc" : "Zoom to feature by passed id."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.map.series.Base]",
            "!url" : "8.3.0/anychart.charts.Map#addSeries",
            "!doc" : "Add series to the chart."
          },
          "connector" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.map.series.Connector",
            "!url" : "8.3.0/anychart.charts.Map#connector",
            "!doc" : "Creates connector series."
          },
          "maxBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#maxBubbleSize",
            "!doc" : "Maximum size for all bubbles on the charts."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "maxZoomLevel" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#maxZoomLevel",
            "!doc" : "Maximum zoom level."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.map.series.Base",
            "!url" : "8.3.0/anychart.charts.Map#getSeriesAt",
            "!doc" : "Getter for the series by its index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "drillTo" : {
            "!type" : "fn(id: string, opt_map?: +anychart.charts.Map) -> +anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#drillTo",
            "!doc" : "Drills down to a map."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Map",
            "!url" : "8.3.0/anychart.charts.Map#markerPalette",
            "!doc" : "Markers palette."
          },
          "choropleth" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.map.series.Choropleth",
            "!url" : "8.3.0/anychart.charts.Map#choropleth",
            "!doc" : "Creates a Choropleth series."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Map#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Sunburst" : {
        "!doc" : "Sunburst Class.",
        "!url" : "8.3.0/anychart.charts.Sunburst",
        "prototype" : {
          "toHtmlTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toHtmlTable",
            "!doc" : "Creates and returns a chart as HTML table."
          },
          "getPngBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPngBase64String",
            "!doc" : "Returns PNG as base64 string."
          },
          "selected" : {
            "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#selected",
            "!doc" : "Selected state settings."
          },
          "innerRadius" : {
            "!type" : "fn(opt_innerRadius?: string|number|fn()) -> string|number|fn()|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#innerRadius",
            "!doc" : "Inner radius."
          },
          "a11y" : {
            "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.utils.ChartA11y|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#a11y",
            "!doc" : "Accessibility setting."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "calculationMode" : {
            "!type" : "fn(opt_mode?: +anychart.enums.SunburstCalculationMode|string) -> +anychart.enums.SunburstCalculationMode|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#calculationMode",
            "!doc" : "Calculation modes."
          },
          "shareWithLinkedIn" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithLinkedIn",
            "!doc" : "Opens LinkedIn sharing dialog."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "drillUp" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.charts.Sunburst#drillUp",
            "!doc" : "Drills one level up from current level."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "getJpgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
            "!url" : "8.3.0/anychart.core.Chart#getJpgBase64String",
            "!doc" : "Returns JPG as base64 string."
          },
          "shareAsPng" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPng",
            "!doc" : "Shares a chart as a PNG file and returns a link to the shared image."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "startAngle" : {
            "!type" : "fn(opt_startAngle?: string|number) -> string|number|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#startAngle",
            "!doc" : "Start angle."
          },
          "getPdfBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPdfBase64String",
            "!doc" : "Returns PDF as base64 string."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "radius" : {
            "!type" : "fn(opt_radius?: string|number) -> string|number|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#radius",
            "!doc" : "Outer radius"
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "leaves" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.sunburst.Level|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#leaves",
            "!doc" : "Leaves settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "hovered" : {
            "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#hovered",
            "!doc" : "Hovered state settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#normal",
            "!doc" : "Normal state settings."
          },
          "sort" : {
            "!type" : "fn(opt_value?: +anychart.enums.Sort|string|fn()) -> +anychart.enums.Sort|string|fn()|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#sort",
            "!doc" : "Sort settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "level" : {
            "!type" : "fn(index: number, opt_settings?: Object|bool) -> +anychart.core.sunburst.Level|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#level",
            "!doc" : "Levels settings."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "center" : {
            "!type" : "fn(opt_centerSettings?: Object) -> +anychart.core.ui.Center|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#center",
            "!doc" : "Center state settings."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_settings?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#fill",
            "!doc" : "Fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "shareAsJpg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsJpg",
            "!doc" : "Shares a chart as a JPG file and returns a link to the shared image."
          },
          "shareWithFacebook" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_link?: string, opt_name?: string, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithFacebook",
            "!doc" : "Opens Facebook sharing dialog."
          },
          "shareWithTwitter" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.core.Chart#shareWithTwitter",
            "!doc" : "Opens Twitter sharing dialog."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_value?: bool|fn()|+anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "palette" : {
            "!type" : "fn(opt_settings?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "shareAsPdf" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPdf",
            "!doc" : "Shares a chart as a PDF file and returns a link to the shared image."
          },
          "getDrilldownPath" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Sunburst#getDrilldownPath",
            "!doc" : "Returns crumbs from the root to the current level."
          },
          "shareAsSvg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsSvg",
            "!doc" : "Shares a chart as a SVG file and returns a link to the shared image."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "getSvgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
            "!url" : "8.3.0/anychart.core.Chart#getSvgBase64String",
            "!doc" : "Returns SVG as base64 string."
          },
          "shareWithPinterest" : {
            "!type" : "fn(opt_linkOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithPinterest",
            "!doc" : "Opens Pinterest sharing dialog."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_data?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod|string) -> +anychart.data.Tree|+anychart.data.TreeView|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.charts.Sunburst#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toA11yTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toA11yTable",
            "!doc" : "Creates and returns the chart represented as an invisible HTML table."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Sunburst",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "drillTo" : {
            "!type" : "fn(target: +anychart.data.Tree.DataItem|+Array|string)",
            "!url" : "8.3.0/anychart.charts.Sunburst#drillTo",
            "!doc" : "Drills down to target."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        },
        "StatsFieldsName" : {
          "!doc" : "Type definition for the statistics fields name.",
          "!url" : "8.3.0/anychart.charts.Sunburst.StatsFieldsName",
          "prototype" : {
            "depth" : {
              "!type" : "number",
              "!doc" : "Level number."
            },
            "level" : {
              "!type" : "+Object",
              "!doc" : "Statistic object for the sunburst levels."
            }
          }
        }
      },
      "Cartesian" : {
        "!doc" : "Cartesian chart class.",
        "!url" : "8.3.0/anychart.charts.Cartesian",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#yMinorGrid",
            "!doc" : "Minor grid settings."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xMinorGrid",
            "!doc" : "Minor grid settings."
          },
          "bar" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Bar",
            "!url" : "8.3.0/anychart.charts.Cartesian#bar",
            "!doc" : "Adds Bar series."
          },
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: +anychart.enums.CartesianSeriesType|string) -> +anychart.enums.CartesianSeriesType|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#selected",
            "!doc" : "Selected state settings."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#width",
            "!doc" : "Width setting."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#interactivity",
            "!doc" : "Interactivity settings."
          },
          "xZoom" : {
            "!type" : "fn(opt_value?: number|bool|Object) -> +anychart.core.utils.OrdinalZoom|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xZoom",
            "!doc" : "Zoom settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#right",
            "!doc" : "Right bound setting."
          },
          "xScroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartScroller|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xScroller",
            "!doc" : "Scroller settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#top",
            "!doc" : "Top bound setting."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Cartesian#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "getXAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian#getXAxesCount",
            "!doc" : "Returns the number of X-axes."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#minHeight",
            "!doc" : "Minimum height setting."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#height",
            "!doc" : "Height setting."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xAxis",
            "!doc" : "X-axis settings."
          },
          "splineArea" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.SplineArea",
            "!url" : "8.3.0/anychart.charts.Cartesian#splineArea",
            "!doc" : "Adds Spline Area series."
          },
          "area" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Area",
            "!url" : "8.3.0/anychart.charts.Cartesian#area",
            "!doc" : "Adds Area series."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.charts.Cartesian#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#lineMarker",
            "!doc" : "Line marker settings."
          },
          "rangeColumn" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.RangeColumn",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeColumn",
            "!doc" : "Adds Range Column series."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#label",
            "!doc" : "Label settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#textMarker",
            "!doc" : "Text marker settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number)",
            "!url" : "8.3.0/anychart.charts.Cartesian#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.charts.Cartesian#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "dataArea" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#dataArea",
            "!doc" : "Data area settings."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "barGroupsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#barGroupsPadding",
            "!doc" : "Settings for the space between bar groups."
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSize?: string, opt_landscape?: bool, opt_x?: number, opt_y?: number)",
            "!url" : "8.3.0/anychart.charts.Cartesian#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#maxHeight",
            "!doc" : "Maximum height setting."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "box" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Box",
            "!url" : "8.3.0/anychart.charts.Cartesian#box",
            "!doc" : "Adds Box series."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#minLabels",
            "!doc" : "Minimum labels settings."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#minWidth",
            "!doc" : "Minimum width setting."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#normal",
            "!doc" : "Normal state settings."
          },
          "rangeArea" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.RangeArea",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeArea",
            "!doc" : "Adds Range Area series."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "getYAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian#getYAxesCount",
            "!doc" : "Returns the number of Y-axes."
          },
          "maxPointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#maxPointWidth",
            "!doc" : "Maximum point width settings."
          },
          "minPointLength" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#minPointLength",
            "!doc" : "Minimum point length settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|number, opt_value?: bool|number)",
            "!url" : "8.3.0/anychart.charts.Cartesian#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.charts.Cartesian#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xScale",
            "!doc" : "X-scale settings."
          },
          "stepLine" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.StepLine",
            "!url" : "8.3.0/anychart.charts.Cartesian#stepLine",
            "!doc" : "Adds Step Line series."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Cartesian#getPlotBounds",
            "!doc" : "Returns data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#crosshair",
            "!doc" : "Crosshair settings."
          },
          "spline" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Spline",
            "!url" : "8.3.0/anychart.charts.Cartesian#spline",
            "!doc" : "Adds Spline series."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.charts.Cartesian#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
            "!url" : "8.3.0/anychart.charts.Cartesian#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "bubble" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Bubble",
            "!url" : "8.3.0/anychart.charts.Cartesian#bubble",
            "!doc" : "Adds Bubble series."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "rangeSplineArea" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.RangeSplineArea",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeSplineArea",
            "!doc" : "Adds Range Spline Area series."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "barsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#barsPadding",
            "!doc" : "Settings for the space between bars."
          },
          "jumpLine" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.JumpLine",
            "!url" : "8.3.0/anychart.charts.Cartesian#jumpLine",
            "!doc" : "Adds Jump Line series."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#xGrid",
            "!doc" : "Grid settings."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "rangeStepArea" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.RangeStepArea",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeStepArea",
            "!doc" : "Adds Range Step Area series."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "line" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Line",
            "!url" : "8.3.0/anychart.charts.Cartesian#line",
            "!doc" : "Adds Line series."
          },
          "annotations" : {
            "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#annotations",
            "!doc" : "Creates annotations."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Cartesian#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian#getSeriesCount",
            "!doc" : "Returns the number of series in a chart."
          },
          "column" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Column",
            "!url" : "8.3.0/anychart.charts.Cartesian#column",
            "!doc" : "Adds Column series."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#maxLabels",
            "!doc" : "Maximum labels settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.charts.Cartesian#toJson",
            "!doc" : "Returns chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "ohlc" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.OHLC",
            "!url" : "8.3.0/anychart.charts.Cartesian#ohlc",
            "!doc" : "Adds OHLC series."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#draw",
            "!doc" : "Drawing of cartesian chart."
          },
          "stick" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Stick",
            "!url" : "8.3.0/anychart.charts.Cartesian#stick",
            "!doc" : "Adds Stick series."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#yScale",
            "!doc" : "Y-scale settings."
          },
          "minBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#minBubbleSize",
            "!doc" : "Minimum size for all bubbles on the charts."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.charts.Cartesian#getSeries",
            "!doc" : "Returns series by id."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#zIndex",
            "!doc" : "Z-index of the chart."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#palette",
            "!doc" : "Palette settings."
          },
          "isVertical" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#isVertical",
            "!doc" : "Getter for the layout direction."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSize?: +anychart.graphics.vector.PaperSize, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.charts.Cartesian#print",
            "!doc" : "Prints chart."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#pointWidth",
            "!doc" : "Point width settings."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#bottom",
            "!doc" : "Bottom bound setting."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Cartesian#getPixelBounds",
            "!doc" : "Returns pixel bounds of the chart."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Cartesian#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#maxWidth",
            "!doc" : "Maximum width setting."
          },
          "marker" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Marker",
            "!url" : "8.3.0/anychart.charts.Cartesian#marker",
            "!doc" : "Adds Marker series."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.charts.Cartesian#toSvg",
            "!doc" : "Returns SVG string."
          },
          "hilo" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Hilo",
            "!url" : "8.3.0/anychart.charts.Cartesian#hilo",
            "!doc" : "Adds HiLo series."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.cartesian.series.Base]",
            "!url" : "8.3.0/anychart.charts.Cartesian#addSeries",
            "!doc" : "Adds series to the chart."
          },
          "maxBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#maxBubbleSize",
            "!doc" : "Maximum size for all bubbles on the charts."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+anychart.data.DataSettings|+Array) -> +anychart.data.View|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#data",
            "!doc" : "Getter for the data."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "stepArea" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.StepArea",
            "!url" : "8.3.0/anychart.charts.Cartesian#stepArea",
            "!doc" : "Adds Step Area series."
          },
          "candlestick" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Candlestick",
            "!url" : "8.3.0/anychart.charts.Cartesian#candlestick",
            "!doc" : "Adds Candlestick series."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#left",
            "!doc" : "Left bound setting."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.charts.Cartesian#getSeriesAt",
            "!doc" : "Returns series by index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#container",
            "!doc" : "Chart container"
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#yGrid",
            "!doc" : "Grid settings."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Cartesian",
            "!url" : "8.3.0/anychart.charts.Cartesian#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "rangeBar" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.RangeBar",
            "!url" : "8.3.0/anychart.charts.Cartesian#rangeBar",
            "!doc" : "Adds Range Bar series."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.charts.Cartesian#toXml",
            "!doc" : "Returns chart configuration as XML string or XMLNode."
          }
        }
      },
      "Mekko" : {
        "!doc" : "Mekko chart class.",
        "!url" : "8.3.0/anychart.charts.Mekko",
        "prototype" : {
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "pointsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#pointsPadding",
            "!doc" : "Settings for the space between space."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Mekko#getType",
            "!doc" : "Definition of the chart type."
          },
          "getXAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Mekko#getXAxesCount",
            "!doc" : "Returns the number of X-axes."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#xAxis",
            "!doc" : "X-axis settings."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#textMarker",
            "!doc" : "Text marker settings."
          },
          "dataArea" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#dataArea",
            "!doc" : "Data area settings."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "minLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#minLabels",
            "!doc" : "Minimum labels settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "getYAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Mekko#getYAxesCount",
            "!doc" : "Returns the number of Y-axes."
          },
          "mekko" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array, opt_csvSettings?: +Object) -> +anychart.core.mekko.series.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#mekko",
            "!doc" : "Adds Mekko series."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Ordinal) -> +anychart.scales.Ordinal|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Mekko#getPlotBounds",
            "!doc" : "Returns data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#crosshair",
            "!doc" : "Crosshair settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#labels",
            "!doc" : "Labels settings."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "annotations" : {
            "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#annotations",
            "!doc" : "Creates annotations."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Mekko#getSeriesCount",
            "!doc" : "Returns the number of series in a chart."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#maxLabels",
            "!doc" : "Maximum labels settings."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#yScale",
            "!doc" : "Y-scale settings."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.mekko.series.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#getSeries",
            "!doc" : "Gets series by index."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.mekko.series.Mekko]",
            "!url" : "8.3.0/anychart.charts.Mekko#addSeries",
            "!doc" : "Adds series to the chart."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+anychart.data.DataSettings|+Array) -> +anychart.data.View|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#data",
            "!doc" : "Getter for the data."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.mekko.series.Mekko",
            "!url" : "8.3.0/anychart.charts.Mekko#getSeriesAt",
            "!doc" : "Returns series by index."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Mekko",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          }
        }
      },
      "TreeMap" : {
        "!doc" : "AnyChart TreeMap class.",
        "!url" : "8.3.0/anychart.charts.TreeMap",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#selected",
            "!doc" : "Selected state settings."
          },
          "colorRange" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ColorRange|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#colorRange",
            "!doc" : "Color range settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "drillUp" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.charts.TreeMap#drillUp",
            "!doc" : "Drills one level up from current level."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "selectionMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#selectionMode",
            "!doc" : "Selection mode"
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "hintDepth" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#hintDepth",
            "!doc" : "Settings for the number of hint-levels"
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#normal",
            "!doc" : "Normal state settings."
          },
          "sort" : {
            "!type" : "fn(opt_value?: +anychart.enums.Sort|string) -> +anychart.enums.Sort|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#sort",
            "!doc" : "Sort settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#fill",
            "!doc" : "Fill settings."
          },
          "maxHeadersHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#maxHeadersHeight",
            "!doc" : "Maximum headers height"
          },
          "headersDisplayMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsDisplayMode|string) -> +anychart.enums.LabelsDisplayMode|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#headersDisplayMode",
            "!doc" : "Header labels display mode."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "colorScale" : {
            "!type" : "fn(opt_value?: +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.charts.TreeMap#colorScale",
            "!doc" : "Color scale settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getDrilldownPath" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.TreeMap#getDrilldownPath",
            "!doc" : "Returns crumbs from the root to the current level."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hintOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#hintOpacity",
            "!doc" : "Hint opacity settings"
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod|string) -> +anychart.data.Tree|+anychart.data.TreeView|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#markers",
            "!doc" : "Markers settings."
          },
          "maxDepth" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#maxDepth",
            "!doc" : "Settings for the number of levels headlines"
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "drillTo" : {
            "!type" : "fn(target: +anychart.data.Tree.DataItem|+Array|string)",
            "!url" : "8.3.0/anychart.charts.TreeMap#drillTo",
            "!doc" : "Drills down to target."
          },
          "labelsDisplayMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsDisplayMode|string) -> +anychart.enums.LabelsDisplayMode|string|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#labelsDisplayMode",
            "!doc" : "Labels display mode."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          },
          "headers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.TreeMap",
            "!url" : "8.3.0/anychart.charts.TreeMap#headers",
            "!doc" : "Header labels settings."
          }
        }
      },
      "Bullet" : {
        "!doc" : "Bullet chart class.",
        "!url" : "8.3.0/anychart.charts.Bullet",
        "prototype" : {
          "range" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#range",
            "!doc" : "Ranges settings."
          },
          "rangePalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.DistinctColors|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#rangePalette",
            "!doc" : "Range palette settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Bullet#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "scale" : {
            "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#scale",
            "!doc" : "Scale settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "axis" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#axis",
            "!doc" : "Axis settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "layout" : {
            "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#layout",
            "!doc" : "Layout setting."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#draw",
            "!doc" : "Drawing of bullet chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "isHorizontal" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.charts.Bullet#isHorizontal",
            "!doc" : "Whether a bullet chart has horizontal layout."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: [+anychart.enums.MarkerType|string]|Object|+anychart.palettes.Markers) -> +anychart.palettes.Markers|+anychart.charts.Bullet",
            "!url" : "8.3.0/anychart.charts.Bullet#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Scatter" : {
        "!doc" : "Scatter chart class.",
        "!url" : "8.3.0/anychart.charts.Scatter",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#yMinorGrid",
            "!doc" : "Minor grid settings by Y-scale."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#xMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#selected",
            "!doc" : "Selected state settings."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Scatter#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#xAxis",
            "!doc" : "X-axis settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#textMarker",
            "!doc" : "Text marker settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "dataArea" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#dataArea",
            "!doc" : "Data area settings."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#minLabels",
            "!doc" : "Minimum labels settings.?"
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "quarters" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.QuarterSettings|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#quarters",
            "!doc" : "Quarter annotations."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScatterScaleTypes|string|+anychart.scales.ScatterBase) -> +anychart.scales.ScatterBase|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Scatter#getPlotBounds",
            "!doc" : "Gets data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#crosshair",
            "!doc" : "Crosshair settings"
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "bubble" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.scatter.series.Bubble",
            "!url" : "8.3.0/anychart.charts.Scatter#bubble",
            "!doc" : "Adds Bubble series."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "line" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.scatter.series.Line",
            "!url" : "8.3.0/anychart.charts.Scatter#line",
            "!doc" : "Adds Line series."
          },
          "annotations" : {
            "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#annotations",
            "!doc" : "Creates annotations."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Scatter#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Scatter#getSeriesCount",
            "!doc" : "Returns series count."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#maxLabels",
            "!doc" : "Maximum labels settings.?"
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScatterScaleTypes|string|+anychart.scales.ScatterBase) -> +anychart.scales.ScatterBase|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#yScale",
            "!doc" : "Y-scale settings."
          },
          "minBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#minBubbleSize",
            "!doc" : "Minimum size for all bubbles"
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.scatter.series.Base",
            "!url" : "8.3.0/anychart.charts.Scatter#getSeries",
            "!doc" : "Gets series by its id."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Scatter#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "crossing" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Crossing|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#crossing",
            "!doc" : "Crossing annotations."
          },
          "marker" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.scatter.series.Marker",
            "!url" : "8.3.0/anychart.charts.Scatter#marker",
            "!doc" : "Adds Marker series."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.scatter.series.Base]",
            "!url" : "8.3.0/anychart.charts.Scatter#addSeries",
            "!doc" : "Adds series to chart."
          },
          "maxBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#maxBubbleSize",
            "!doc" : "Maximum size for all bubbles"
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.scatter.series.Base",
            "!url" : "8.3.0/anychart.charts.Scatter#getSeriesAt",
            "!doc" : "Gets series by its index."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#yGrid",
            "!doc" : "Grid settings by Y-scale."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Scatter",
            "!url" : "8.3.0/anychart.charts.Scatter#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Stock" : {
        "!doc" : "Stock chart class.",
        "!url" : "8.3.0/anychart.charts.Stock",
        "prototype" : {
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.StockInteractivity|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.charts.Stock#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "grouping" : {
            "!type" : "fn(opt_value?: bool|[string|+anychart.core.stock.Grouping.Level]|Object) -> +anychart.core.stock.Grouping|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#grouping",
            "!doc" : "Grouping settings."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "zoomMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#zoomMarqueeFill",
            "!doc" : "Zoom marquee fill settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "scroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.stock.Scroller|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#scroller",
            "!doc" : "Scroller settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "eventMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.stock.eventMarkers.Controller|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#eventMarkers",
            "!doc" : "Event markers settings"
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.StockScatterDateTime|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#xScale",
            "!doc" : "X-scale settings."
          },
          "selectRange" : {
            "!type" : "fn(value: number|string|Date|+anychart.enums.StockRangeType|+anychart.enums.Interval, opt_value?: number|string|Date, opt_value?: bool|+anychart.enums.StockRangeAnchor|string, opt_dispatchEvent?: bool) -> +anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#selectRange",
            "!doc" : "Setter for the select range using date."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#crosshair",
            "!doc" : "Crosshair settings"
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "getSelectedRange" : {
            "!type" : "fn() -> +anychart.charts.Stock.SelectedRange",
            "!url" : "8.3.0/anychart.charts.Stock#getSelectedRange",
            "!doc" : "Gets selected range."
          },
          "startZoomMarquee" : {
            "!type" : "fn(opt_repeat?: bool, opt_asRect?: bool) -> +anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#startZoomMarquee",
            "!doc" : "Starts zoom marquee."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "zoomMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#zoomMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "scrollerGrouping" : {
            "!type" : "fn(opt_value?: bool|[string|+anychart.core.stock.Grouping.Level]|Object) -> +anychart.core.stock.Grouping|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#scrollerGrouping",
            "!doc" : "Scroller grouping settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Stock#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "annotations" : {
            "!type" : "fn() -> +anychart.core.annotations.ChartController",
            "!url" : "8.3.0/anychart.charts.Stock#annotations",
            "!doc" : "Gets annotations."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "preserveSelectedRangeOnDataUpdate" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#preserveSelectedRangeOnDataUpdate",
            "!doc" : "Selected Range Change Behaviour"
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "plot" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.stock.Plot|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.charts.Stock#plot",
            "!doc" : "Plots settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getPlotsCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Stock#getPlotsCount",
            "!doc" : "Returns plots count."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Stock",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.charts.Stock#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        },
        "SelectedRange" : {
          "!doc" : "Type definition for the selected range.",
          "!url" : "8.3.0/anychart.charts.Stock.SelectedRange",
          "prototype" : {
            "firstSelected" : {
              "!type" : "number",
              "!doc" : "The first selected value."
            },
            "firstVisible" : {
              "!type" : "number",
              "!doc" : "The first visible value."
            },
            "lastSelected" : {
              "!type" : "number",
              "!doc" : "The last selected value."
            },
            "lastVisible" : {
              "!type" : "number",
              "!doc" : "The last visible value."
            }
          }
        }
      },
      "Pert" : {
        "!doc" : "Pert chart class.",
        "!url" : "8.3.0/anychart.charts.Pert",
        "prototype" : {
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "tasks" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.pert.Tasks|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#tasks",
            "!doc" : "Tasks settings."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "verticalSpacing" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#verticalSpacing",
            "!doc" : "Milestones vertical spacing"
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "milestones" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.pert.Milestones|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#milestones",
            "!doc" : "Milestones settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "expectedTimeCalculator" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#expectedTimeCalculator",
            "!doc" : "Calculates expected time."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_data?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod|string, opt_deps?: [+anychart.data.Tree.Dependency]) -> +anychart.data.Tree|+anychart.data.TreeView|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "criticalPath" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.pert.CriticalPath|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#criticalPath",
            "!doc" : "Critical path settings."
          },
          "horizontalSpacing" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.charts.Pert#horizontalSpacing",
            "!doc" : "Milestones horizontal spacing"
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Pert",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "!url" : "8.3.0/anychart.charts",
      "Funnel" : {
        "!doc" : "Funnel chart class.",
        "!url" : "8.3.0/anychart.charts.Funnel",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#selected",
            "!doc" : "Selected state settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "connectorLength" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#connectorLength",
            "!doc" : "Labels connector length."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "pointsPadding" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#pointsPadding",
            "!doc" : "Padding between points."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Funnel#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn() -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#unselect",
            "!doc" : "Deselects all points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "neckHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#neckHeight",
            "!doc" : "Height of the neck."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "overlapMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#overlapMode",
            "!doc" : "Overlap mode for labels."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#hovered",
            "!doc" : "Hovered state settings."
          },
          "baseWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#baseWidth",
            "!doc" : "Width setting."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#select",
            "!doc" : "Selects points."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#fill",
            "!doc" : "Fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "getPoint" : {
            "!type" : "fn(index: number) -> +anychart.core.Point",
            "!url" : "8.3.0/anychart.charts.Funnel#getPoint",
            "!doc" : "Gets wrapped point by index."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn() -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#unhover",
            "!doc" : "Removes hover state from all chart points."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(opt_index?: number) -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#hover",
            "!doc" : "Hover state of the element."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "neckWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#neckWidth",
            "!doc" : "Width of the neck."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Mapping|+anychart.data.Set|+Array|string|+anychart.data.DataSettings, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "connectorStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Funnel",
            "!url" : "8.3.0/anychart.charts.Funnel#connectorStroke",
            "!doc" : "Labels connector stroke settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "LinearGauge" : {
        "!doc" : "Linear gauge class.",
        "!url" : "8.3.0/anychart.charts.LinearGauge",
        "prototype" : {
          "bar" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.Bar",
            "!url" : "8.3.0/anychart.charts.LinearGauge#bar",
            "!doc" : "Adds Bar pointer."
          },
          "thermometer" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.Thermometer",
            "!url" : "8.3.0/anychart.charts.LinearGauge#thermometer",
            "!doc" : "Adds Thermometer pointer."
          },
          "tank" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.Tank",
            "!url" : "8.3.0/anychart.charts.LinearGauge#tank",
            "!doc" : "Adds Tank pointer."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "scale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.ScatterBase|Object) -> +anychart.scales.ScatterBase|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#scale",
            "!doc" : "Scale settings."
          },
          "defaultPointerType" : {
            "!type" : "fn(opt_value?: +anychart.enums.LinearGaugePointerType|string) -> +anychart.enums.LinearGaugePointerType|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#defaultPointerType",
            "!doc" : "Default pointer type."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "removeAllPointers" : {
            "!type" : "fn() -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#removeAllPointers",
            "!doc" : "Removes all pointers from gauge."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "axis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.LinearGauge|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#axis",
            "!doc" : "Axis settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "getPointer" : {
            "!type" : "fn(id: number|string) -> +anychart.core.linearGauge.pointers.Base",
            "!url" : "8.3.0/anychart.charts.LinearGauge#getPointer",
            "!doc" : "Returns pointer by id."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "removePointerAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#removePointerAt",
            "!doc" : "Removes pointer by index."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "getPointersCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.LinearGauge#getPointersCount",
            "!doc" : "Returns the number of pointers."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "layout" : {
            "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#layout",
            "!doc" : "Layout settings."
          },
          "removePointer" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#removePointer",
            "!doc" : "Removes pointer by id."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "globalOffset" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#globalOffset",
            "!doc" : "Linear gauge global offset."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "scaleBar" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.linearGauge.ScaleBar|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#scaleBar",
            "!doc" : "Scale bar settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#palette",
            "!doc" : "Palette settings."
          },
          "isVertical" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#isVertical",
            "!doc" : "Vertical layout"
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "marker" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.Marker",
            "!url" : "8.3.0/anychart.charts.LinearGauge#marker",
            "!doc" : "Adds Marker pointer."
          },
          "getPointerAt" : {
            "!type" : "fn(index: number) -> +anychart.core.linearGauge.pointers.Base",
            "!url" : "8.3.0/anychart.charts.LinearGauge#getPointerAt",
            "!doc" : "Returns pointer by index."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "led" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.Led",
            "!url" : "8.3.0/anychart.charts.LinearGauge#led",
            "!doc" : "Adds Led pointer."
          },
          "addPointer" : {
            "!type" : "fn(var_args: number|+Array|+anychart.data.Set|+anychart.data.View) -> [+anychart.core.linearGauge.pointers.Base]",
            "!url" : "8.3.0/anychart.charts.LinearGauge#addPointer",
            "!doc" : "Adds pointers to the gauge."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.LinearGauge",
            "!url" : "8.3.0/anychart.charts.LinearGauge#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "rangeBar" : {
            "!type" : "fn(dataIndex: number) -> +anychart.core.linearGauge.pointers.RangeBar",
            "!url" : "8.3.0/anychart.charts.LinearGauge#rangeBar",
            "!doc" : "Adds Range bar pointer."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Pareto" : {
        "!doc" : "Pareto chart class.",
        "!url" : "8.3.0/anychart.charts.Pareto",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#yMinorGrid",
            "!doc" : "Minor grid settings by Y-scale."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xMinorGrid",
            "!doc" : "Minor grid settings by X-scale."
          },
          "defaultSeriesType" : {
            "!type" : "fn(opt_value?: +anychart.enums.CartesianSeriesType|string) -> +anychart.enums.CartesianSeriesType|string|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#defaultSeriesType",
            "!doc" : "Default series type."
          },
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#selected",
            "!doc" : "Selected state settings."
          },
          "removeSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#removeSeries",
            "!doc" : "Removes one of series from chart by its id."
          },
          "xZoom" : {
            "!type" : "fn(opt_value?: number|bool|Object) -> +anychart.core.utils.OrdinalZoom|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xZoom",
            "!doc" : "Zoom settings."
          },
          "xScroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartScroller|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xScroller",
            "!doc" : "Scroller settings."
          },
          "removeSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#removeSeriesAt",
            "!doc" : "Removes one of series from chart by its index."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Pareto#getType",
            "!doc" : "Definition of the chart type."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "getXAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pareto#getXAxesCount",
            "!doc" : "Returns X-axes count."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xAxis",
            "!doc" : "X-axis settings."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#lineMarker",
            "!doc" : "Line marker settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#textMarker",
            "!doc" : "Text marker settings."
          },
          "dataArea" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#dataArea",
            "!doc" : "Data area settings."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "barGroupsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#barGroupsPadding",
            "!doc" : "Settings for the space between bar groups."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#hovered",
            "!doc" : "Hovered state settings."
          },
          "minLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#minLabels",
            "!doc" : "Minimum labels settings.?"
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "getYAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pareto#getYAxesCount",
            "!doc" : "Returns Y-axes count."
          },
          "maxPointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#maxPointWidth",
            "!doc" : "Maximum point width settings."
          },
          "minPointLength" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#minPointLength",
            "!doc" : "Minimum point length settings."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xScale",
            "!doc" : "X-scale settings."
          },
          "getPlotBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.charts.Pareto#getPlotBounds",
            "!doc" : "Returns data bounds of the chart."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#crosshair",
            "!doc" : "Crosshair settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#labels",
            "!doc" : "Labels settings."
          },
          "removeAllSeries" : {
            "!type" : "fn() -> +anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#removeAllSeries",
            "!doc" : "Removes all series from chart."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "barsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#barsPadding",
            "!doc" : "Settings for the space between bars."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "annotations" : {
            "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#annotations",
            "!doc" : "Creates annotations."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Pareto#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "getSeriesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pareto#getSeriesCount",
            "!doc" : "Returns series count."
          },
          "maxLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#maxLabels",
            "!doc" : "Maximum labels settings.?"
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#yScale",
            "!doc" : "Y-scale settings."
          },
          "minBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#minBubbleSize",
            "!doc" : "The minimum size for all bubbles on the charts."
          },
          "getSeries" : {
            "!type" : "fn(id: number|string) -> +anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.charts.Pareto#getSeries",
            "!doc" : "Returns series by id."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#pointWidth",
            "!doc" : "Point width settings."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Pareto#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "addSeries" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.cartesian.series.Base]",
            "!url" : "8.3.0/anychart.charts.Pareto#addSeries",
            "!doc" : "Adds series to the chart."
          },
          "maxBubbleSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#maxBubbleSize",
            "!doc" : "The maximum size for all bubbles on the charts."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+anychart.data.DataSettings|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#data",
            "!doc" : "Data settings."
          },
          "getSeriesAt" : {
            "!type" : "fn(index: number) -> +anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.charts.Pareto#getSeriesAt",
            "!doc" : "Returns series by index."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#yGrid",
            "!doc" : "Grid settings by Y-scale."
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Pareto",
            "!url" : "8.3.0/anychart.charts.Pareto#markerPalette",
            "!doc" : "Markers palette settings."
          }
        }
      },
      "Sparkline" : {
        "!doc" : "Sparkline chart class.",
        "!url" : "8.3.0/anychart.charts.Sparkline",
        "prototype" : {
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "minMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#minMarkers",
            "!doc" : "Markers settings for minimum point."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Sparkline#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "negativeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#negativeFill",
            "!doc" : "Negative fill settings."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "lastLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#lastLabels",
            "!doc" : "Last labels settings."
          },
          "maxMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#maxMarkers",
            "!doc" : "Markers settings for maximum point."
          },
          "negativeLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#negativeLabels",
            "!doc" : "Negative labels settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "clip" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#clip",
            "!doc" : "Series clip settings."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#textMarker",
            "!doc" : "Text marker settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "maxHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#maxHatchFill",
            "!doc" : "Hatch fill settings for maximum point."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#minLabels",
            "!doc" : "Labels settings for minimum point."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "firstFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#firstFill",
            "!doc" : "First fill settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.Base|Object) -> +anychart.scales.Ordinal|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#xScale",
            "!doc" : "X-scale settings."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "negativeHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#negativeHatchFill",
            "!doc" : "Negative hatch fill settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "firstMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#firstMarkers",
            "!doc" : "First markers settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "minHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#minHatchFill",
            "!doc" : "Hatch fill settings for minimum point."
          },
          "firstHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#firstHatchFill",
            "!doc" : "First hatch fill settings."
          },
          "fill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#fill",
            "!doc" : "Fill settings."
          },
          "minFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#minFill",
            "!doc" : "Fill color settings for minimum point."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "lastFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#lastFill",
            "!doc" : "Last fill settings."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#maxLabels",
            "!doc" : "Labels settings for maximum point."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.Base|Object) -> +anychart.scales.Base|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#yScale",
            "!doc" : "Y-scale settings."
          },
          "lastMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#lastMarkers",
            "!doc" : "Last markers settings."
          },
          "connectMissingPoints" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#connectMissingPoints",
            "!doc" : "Connect missing points settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "firstLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory.Label|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#firstLabels",
            "!doc" : "First labels settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "negativeMarkers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#negativeMarkers",
            "!doc" : "Negative markers settings."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#pointWidth",
            "!doc" : "Point width settings."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "seriesType" : {
            "!type" : "fn(opt_type?: +anychart.enums.SparklineSeriesType|string) -> +anychart.enums.SparklineSeriesType|string|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#seriesType",
            "!doc" : "Series type."
          },
          "maxFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#maxFill",
            "!doc" : "Fill color settings for maximum point."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "lastHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Sparkline",
            "!url" : "8.3.0/anychart.charts.Sparkline#lastHatchFill",
            "!doc" : "Last hatch fill settings."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Cartesian3d" : {
        "!doc" : "Cartesian 3d chart class.",
        "!url" : "8.3.0/anychart.charts.Cartesian3d",
        "prototype" : {
          "yMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#yMinorGrid",
            "!doc" : "Minor grid settings."
          },
          "xMinorGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#xMinorGrid",
            "!doc" : "Minor grid settings."
          },
          "bar" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Bar3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#bar",
            "!doc" : "Adds 3D Bar series."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#selected",
            "!doc" : "Selected state settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "getXAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#getXAxesCount",
            "!doc" : "Returns the number of X-axes."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#xAxis",
            "!doc" : "X-axis settings."
          },
          "area" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Area3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#area",
            "!doc" : "Adds 3D Area series."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "zAngle" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#zAngle",
            "!doc" : "Z-axis angle setting."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "zDistribution" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#zDistribution",
            "!doc" : "Distribution of the series by Z-axis."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "barGroupsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#barGroupsPadding",
            "!doc" : "Settings for the space between bar groups."
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#minLabels",
            "!doc" : "Minimum labels settings.?"
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "zPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#zPadding",
            "!doc" : "Z-axis padding setting."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "getYAxesCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#getYAxesCount",
            "!doc" : "Returns the number of Y-axes."
          },
          "maxPointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#maxPointWidth",
            "!doc" : "Maximum point width settings."
          },
          "minPointLength" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#minPointLength",
            "!doc" : "Minimum point length settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Ordinal|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#xScale",
            "!doc" : "X-scale settings."
          },
          "crosshair" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#crosshair",
            "!doc" : "Crosshair settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "barsPadding" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#barsPadding",
            "!doc" : "Settings for the space between bars."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#xGrid",
            "!doc" : "Grid settings."
          },
          "baseline" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#baseline",
            "!doc" : "Set the baseline by the Y-Scale value."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "line" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Line3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#line",
            "!doc" : "Adds 3D Line series."
          },
          "getYScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#getYScales",
            "!doc" : "Returns chart Y scales."
          },
          "column" : {
            "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Column3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#column",
            "!doc" : "Adds 3D Column series."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#maxLabels",
            "!doc" : "Maximum labels settings.?"
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#yScale",
            "!doc" : "Y-scale settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "pointWidth" : {
            "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#pointWidth",
            "!doc" : "Point width settings."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "getXScales" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#getXScales",
            "!doc" : "Returns chart X scales."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Set|+Array|+anychart.data.DataSettings|Object) -> +anychart.data.View|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#data",
            "!doc" : "Getter for the data."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "zAspect" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#zAspect",
            "!doc" : "Depth of the point by Z-axis."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.Cartesian3d",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#yGrid",
            "!doc" : "Grid settings."
          },
          "line2d" : {
            "!type" : "fn(data: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.core.cartesian.series.Line",
            "!url" : "8.3.0/anychart.charts.Cartesian3d#line2d",
            "!doc" : "Adds Line series."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Resource" : {
        "!doc" : "Resource chart class.",
        "!url" : "8.3.0/anychart.charts.Resource",
        "prototype" : {
          "defaultMinutesPerDay" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#defaultMinutesPerDay",
            "!doc" : "Time tracking mode."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "timeLineHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#timeLineHeight",
            "!doc" : "Time line height settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "calendar" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.scales.Calendar|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#calendar",
            "!doc" : "Calendar settings."
          },
          "timeTrackingMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.TimeTrackingMode|string) -> +anychart.enums.TimeTrackingMode|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#timeTrackingMode",
            "!doc" : "Time tracking mode."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn(opt_resourceIndex?: number|[number], opt_activityIndex?: number)",
            "!url" : "8.3.0/anychart.charts.Resource#unselect",
            "!doc" : "Removes select from an activity by index."
          },
          "verticalScrollBar" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Scroller|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#verticalScrollBar",
            "!doc" : "Vertical scrollbar settings."
          },
          "resourceList" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.resource.ResourceList|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#resourceList",
            "!doc" : "Resource list element."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minRowHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#minRowHeight",
            "!doc" : "Minimal row height settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "timeLine" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gantt.TimeLineHeader|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#timeLine",
            "!doc" : "TimeLine settings."
          },
          "grid" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.resource.Grid|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#grid",
            "!doc" : "Grid settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "horizontalScrollBar" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Scroller|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#horizontalScrollBar",
            "!doc" : "Horizontal scrollbar settings."
          },
          "pixPerHour" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#pixPerHour",
            "!doc" : "Hours row height settings."
          },
          "conflicts" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.Conflicts|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#conflicts",
            "!doc" : "Conflicts settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "hoverPoint" : {
            "!type" : "fn(globalIndex: number) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#hoverPoint",
            "!doc" : "Hovers an activity by its global index."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "cellPadding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#cellPadding",
            "!doc" : "Cell padding settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.scales.DateTimeWithCalendar|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#xScale",
            "!doc" : "X scale settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "splitterStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#splitterStroke",
            "!doc" : "Stroke settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(resourceIndex: number, activityIndex: number) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#select",
            "!doc" : "Setter for the select state on an activity."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "activities" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.Activities|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#activities",
            "!doc" : "Activities settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zoomLevel" : {
            "!type" : "fn(opt_indexOrId?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#zoomLevel",
            "!doc" : "Zoom level settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "resourceListWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#resourceListWidth",
            "!doc" : "Time line height settings."
          },
          "logo" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.Logo|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#logo",
            "!doc" : "Logo settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn(opt_resourceIndex?: number|[number], opt_activityIndex?: number) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#unhover",
            "!doc" : "Removes hover from an activity by index."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(resourceIndex: number, activityIndex: number) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#hover",
            "!doc" : "Setter for the hover state on an activity."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "currentStartDate" : {
            "!type" : "fn(value: Date|number|string) -> Date|number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#currentStartDate",
            "!doc" : "Current start date."
          },
          "zoomLevels" : {
            "!type" : "fn(opt_value?: [+anychart.charts.Resource.ZoomLevel]) -> [+anychart.charts.Resource.ZoomLevel]|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#zoomLevels",
            "!doc" : "Zoom levels settings."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "overlay" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gantt.Overlay|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#overlay",
            "!doc" : "Overlay element."
          },
          "selectPoint" : {
            "!type" : "fn(globalIndex: number, opt_event?: +anychart.core.MouseEvent) -> +anychart.charts.Resource",
            "!url" : "8.3.0/anychart.charts.Resource#selectPoint",
            "!doc" : "Selects an activity by its global index."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Resource",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        },
        "ZoomLevel" : {
          "!doc" : "Type definition for zoom level.",
          "!url" : "8.3.0/anychart.charts.Resource.ZoomLevel",
          "prototype" : {
            "count" : {
              "!type" : "number",
              "!doc" : "Unit count."
            },
            "id" : {
              "!type" : "string",
              "!doc" : "Level identifier."
            },
            "levels" : {
              "!type" : "[+anychart.core.gantt.TimeLineHeader.LevelWrapper]",
              "!doc" : "Levels list."
            },
            "unit" : {
              "!type" : "+anychart.enums.Interval|string",
              "!doc" : "Interval."
            },
            "unitPixSize" : {
              "!type" : "number",
              "!doc" : "Unit size."
            }
          }
        }
      },
      "CircularGauge" : {
        "!doc" : "Circular gauge class.",
        "!url" : "8.3.0/anychart.charts.CircularGauge",
        "prototype" : {
          "bar" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.gauge.pointers.Bar|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#bar",
            "!doc" : "Bar settings."
          },
          "range" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.CircularRange|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#range",
            "!doc" : "Range settings."
          },
          "encloseWithStraightLine" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#encloseWithStraightLine",
            "!doc" : "Encloses frame path with a straight line."
          },
          "sweepAngle" : {
            "!type" : "fn(opt_value?: string|number) -> number|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#sweepAngle",
            "!doc" : "Sweep angle settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.CircularGauge#getType",
            "!doc" : "Returns gauge type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "defaultPointerType" : {
            "!type" : "fn(opt_value?: +anychart.enums.CircularGaugePointerType|string) -> +anychart.enums.CircularGaugePointerType|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#defaultPointerType",
            "!doc" : "Default pointer type."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "startAngle" : {
            "!type" : "fn(opt_value?: string|number) -> number|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#startAngle",
            "!doc" : "Start angle settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "removeAllPointers" : {
            "!type" : "fn() -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#removeAllPointers",
            "!doc" : "Removes all pointers from the gauge."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "axis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Circular|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#axis",
            "!doc" : "Axis settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "getPointer" : {
            "!type" : "fn(id: number|string) -> +anychart.core.gauge.pointers.Base",
            "!url" : "8.3.0/anychart.charts.CircularGauge#getPointer",
            "!doc" : "Returns pointer by id."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "removePointerAt" : {
            "!type" : "fn(index: number) -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#removePointerAt",
            "!doc" : "Removes pointer by index."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "getPointersCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.CircularGauge#getPointersCount",
            "!doc" : "Returns the number of pointers."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "knob" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.gauge.pointers.Knob|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#knob",
            "!doc" : "Knob settings."
          },
          "fill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#fill",
            "!doc" : "Fill settings."
          },
          "removePointer" : {
            "!type" : "fn(id: number|string) -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#removePointer",
            "!doc" : "Removes pointer by id."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "needle" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.gauge.pointers.Needle|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#needle",
            "!doc" : "Needle settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "marker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.gauge.pointers.Marker|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#marker",
            "!doc" : "Marker settings."
          },
          "cap" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gauge.Cap|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#cap",
            "!doc" : "Cap settings."
          },
          "getPointerAt" : {
            "!type" : "fn(index: number) -> +anychart.core.gauge.pointers.Base",
            "!url" : "8.3.0/anychart.charts.CircularGauge#getPointerAt",
            "!doc" : "Returns pointer by index."
          },
          "circularPadding" : {
            "!type" : "fn(opt_value?: number|string) -> string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#circularPadding",
            "!doc" : "Padding settings."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.charts.CircularGauge#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "addPointer" : {
            "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.gauge.pointers.Base]",
            "!url" : "8.3.0/anychart.charts.CircularGauge#addPointer",
            "!doc" : "Adds pointers to the gauge."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.CircularGauge",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Gantt" : {
        "!doc" : "Gantt chart class.",
        "!url" : "8.3.0/anychart.charts.Gantt",
        "prototype" : {
          "splitterPosition" : {
            "!type" : "fn(opt_value?: string|number) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#splitterPosition",
            "!doc" : "Splitter position settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "dataGrid" : {
            "!type" : "fn(opt_enabled?: bool) -> +anychart.core.ui.DataGrid|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#dataGrid",
            "!doc" : "Data grid settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "columnStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#columnStroke",
            "!doc" : "Column stroke settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "rowStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#rowStroke",
            "!doc" : "Row stroke settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Gantt#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "scrollToEnd" : {
            "!type" : "fn(opt_index?: number) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#scrollToEnd",
            "!doc" : "Scrolls vertically to specified index."
          },
          "zoomTo" : {
            "!type" : "fn(value: number|+anychart.enums.Interval|string, opt_value?: number, opt_anchor?: +anychart.enums.GanttRangeAnchor|string) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#zoomTo",
            "!doc" : "Timeline zoom settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "fitToTask" : {
            "!type" : "fn(taskId: string) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#fitToTask",
            "!doc" : "Fits the visible area of the timeline."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "zoomOut" : {
            "!type" : "fn(opt_zoomFactor?: number) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#zoomOut",
            "!doc" : "Timeline zoom out."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "expandAll" : {
            "!type" : "fn() -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#expandAll",
            "!doc" : "Expands all collapsed tasks."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "scrollToRow" : {
            "!type" : "fn(rowIndex: number) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#scrollToRow",
            "!doc" : "Performs vertical scroll for a row at the specified index."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "collapseAll" : {
            "!type" : "fn() -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#collapseAll",
            "!doc" : "Collapse all expanded tasks."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.scales.GanttDateTime|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#xScale",
            "!doc" : "X-scale settings."
          },
          "collapseTask" : {
            "!type" : "fn(taskId: string) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#collapseTask",
            "!doc" : "Collapses task by id."
          },
          "getTimeline" : {
            "!type" : "fn() -> +anychart.core.ui.Timeline",
            "!url" : "8.3.0/anychart.charts.Gantt#getTimeline",
            "!doc" : "Getter for the timeline."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "edit" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#edit",
            "!doc" : "Live edit settings."
          },
          "fitAll" : {
            "!type" : "fn() -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#fitAll",
            "!doc" : "Fits all visible data to width of timeline."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "headerHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#headerHeight",
            "!doc" : "Header height settings."
          },
          "rowHoverFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#rowHoverFill",
            "!doc" : "Row fill settings in hover mode."
          },
          "expandTask" : {
            "!type" : "fn(taskId: string) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#expandTask",
            "!doc" : "Expands task by id."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#draw",
            "!doc" : "Drawing of the Gantt chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_paletteSettings?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "rowSelectedFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#rowSelectedFill",
            "!doc" : "Fill settings for selected row."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "zoomIn" : {
            "!type" : "fn(opt_zoomFactor?: number) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#zoomIn",
            "!doc" : "Timeline zoom in."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod|string) -> +anychart.data.Tree|+anychart.data.TreeView|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "scrollTo" : {
            "!type" : "fn(pxOffset: number) -> +anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#scrollTo",
            "!doc" : "Performs vertical scrolling by pixel offset."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "defaultRowHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.charts.Gantt#defaultRowHeight",
            "!doc" : "Default row height settings."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Gantt",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "TagCloud" : {
        "!doc" : "TagCloud chart class.",
        "!url" : "8.3.0/anychart.charts.TagCloud",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#selected",
            "!doc" : "Selected state settings"
          },
          "colorRange" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ColorRange|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#colorRange",
            "!doc" : "Color range settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.TagCloud#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn(opt_indexOrIndexes?: number|[number])",
            "!url" : "8.3.0/anychart.charts.TagCloud#unselect",
            "!doc" : "Deselects all points or points by index."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "scale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.Base|Object) -> +anychart.scales.Base|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#scale",
            "!doc" : "Scale settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#hovered",
            "!doc" : "Hovered state settings"
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#normal",
            "!doc" : "Normal state settings"
          },
          "textSpacing" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#textSpacing",
            "!doc" : "Text spacing settings."
          },
          "mode" : {
            "!type" : "fn(opt_value?: +anychart.enums.TagCloudMode|string) -> +anychart.enums.TagCloudMode|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#mode",
            "!doc" : "Mode settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "anglesCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#anglesCount",
            "!doc" : "Angles count."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#select",
            "!doc" : "Selects points."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "toAngle" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#toAngle",
            "!doc" : "End angle."
          },
          "getPoint" : {
            "!type" : "fn(index: number) -> +anychart.core.Point",
            "!url" : "8.3.0/anychart.charts.TagCloud#getPoint",
            "!doc" : "Gets wrapped point by index."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "colorScale" : {
            "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#colorScale",
            "!doc" : "Color scale settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#palette",
            "!doc" : "Palette settings."
          },
          "fromAngle" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#fromAngle",
            "!doc" : "Starting angle."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn() -> +anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#unhover",
            "!doc" : "Removes hover from all chart points."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "angles" : {
            "!type" : "fn(opt_value?: [number]) -> [number]|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#angles",
            "!doc" : "Angles settings."
          },
          "hover" : {
            "!type" : "fn(index: number|[number]) -> +anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#hover",
            "!doc" : "Hovers a point by its index."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|+anychart.data.DataSettings|string, opt_settings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.charts.TagCloud#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.TagCloud",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "HeatMap" : {
        "!doc" : "AnyChart HeatMap class.",
        "!url" : "8.3.0/anychart.charts.HeatMap",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#selected",
            "!doc" : "Selected state settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "xZoom" : {
            "!type" : "fn(opt_value?: number|bool|Object) -> +anychart.core.utils.OrdinalZoom|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#xZoom",
            "!doc" : "X Zoom settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "xScroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartScroller|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#xScroller",
            "!doc" : "X scroller settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "xAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#xAxis",
            "!doc" : "X-axis settings."
          },
          "yZoom" : {
            "!type" : "fn(opt_value?: number|bool|Object) -> +anychart.core.utils.OrdinalZoom|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#yZoom",
            "!doc" : "Y Zoom settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "dataArea" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#dataArea",
            "!doc" : "Data area settings."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "xScale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.Ordinal) -> +anychart.scales.Ordinal|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#xScale",
            "!doc" : "X scale settings."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#select",
            "!doc" : "Selects point by index."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#fill",
            "!doc" : "Fill settings."
          },
          "xGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#xGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "colorScale" : {
            "!type" : "fn(opt_value?: +anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.OrdinalColor|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#colorScale",
            "!doc" : "Color scale settings."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "yAxis" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#yAxis",
            "!doc" : "Y-axis settings."
          },
          "yScale" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleTypes|string|+anychart.scales.Ordinal) -> +anychart.scales.Ordinal|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#yScale",
            "!doc" : "Y scale settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "yScroller" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartScroller|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#yScroller",
            "!doc" : "Y scroller settings."
          },
          "hover" : {
            "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#hover",
            "!doc" : "Hovers point by index."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string|+anychart.data.DataSettings, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "yGrid" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Linear|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#yGrid",
            "!doc" : "Grid settings by X-scale."
          },
          "labelsDisplayMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsDisplayMode|string) -> +anychart.enums.LabelsDisplayMode|string|+anychart.charts.HeatMap",
            "!url" : "8.3.0/anychart.charts.HeatMap#labelsDisplayMode",
            "!doc" : "Labels display mode."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Pie" : {
        "!doc" : "Pie (Donut) chart class.",
        "!url" : "8.3.0/anychart.charts.Pie",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#selected",
            "!doc" : "Selected state settings."
          },
          "innerRadius" : {
            "!type" : "fn(opt_value?: string|number|fn()) -> string|number|fn()|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#innerRadius",
            "!doc" : "Pie inner radius for Donut chart."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "connectorLength" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#connectorLength",
            "!doc" : "Labels connector length."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "getPixelExplode" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pie#getPixelExplode",
            "!doc" : "Getter for the explode value."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "outsideLabelsCriticalAngle" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#outsideLabelsCriticalAngle",
            "!doc" : "Outside labels connector critical angle settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Pie#getType",
            "!doc" : "Returns chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn() -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#unselect",
            "!doc" : "Deselects all points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "getPixelInnerRadius" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pie#getPixelInnerRadius",
            "!doc" : "Getter for the pie pixel inner radius."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "group" : {
            "!type" : "fn(opt_value?: string|fn()) -> fn()|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#group",
            "!doc" : "Grouping of the points"
          },
          "startAngle" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#startAngle",
            "!doc" : "Start angle for the first slice."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "radius" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#radius",
            "!doc" : "Pie outer radius"
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "overlapMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#overlapMode",
            "!doc" : "Overlap mode for labels."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#hovered",
            "!doc" : "Hovered state settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "outline" : {
            "!type" : "fn(opt_settings?: Object|bool|string) -> +anychart.core.ui.Outline|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#outline",
            "!doc" : "Outline settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#normal",
            "!doc" : "Normal state settings."
          },
          "sort" : {
            "!type" : "fn(opt_value?: +anychart.enums.Sort|string) -> +anychart.enums.Sort|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#sort",
            "!doc" : "Sort setting."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "forceHoverLabels" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#forceHoverLabels",
            "!doc" : "Displaying of the label on hover event."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "center" : {
            "!type" : "fn(opt_centerSettings?: Object) -> +anychart.core.ui.Center|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#center",
            "!doc" : "Center state settings."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#select",
            "!doc" : "Selects points."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#fill",
            "!doc" : "Fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "getPoint" : {
            "!type" : "fn(index: number) -> +anychart.core.PiePoint",
            "!url" : "8.3.0/anychart.charts.Pie#getPoint",
            "!doc" : "Gets wrapped point by index."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "explode" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#explode",
            "!doc" : "Pie slice exploding."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn() -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#unhover",
            "!doc" : "Removes hover from the pie slice."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "insideLabelsOffset" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#insideLabelsOffset",
            "!doc" : "Inside labels space settings."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(opt_index?: number) -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#hover",
            "!doc" : "Setter for the hover state on a slice by index."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Mapping|+anychart.data.Set|+anychart.data.DataSettings|+Array, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "getPixelRadius" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.charts.Pie#getPixelRadius",
            "!doc" : "Getter for the pie pixel outer radius."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "connectorStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Pie",
            "!url" : "8.3.0/anychart.charts.Pie#connectorStroke",
            "!doc" : "Labels connectors stroke settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "Pyramid" : {
        "!doc" : "Pyramid chart class.",
        "!url" : "8.3.0/anychart.charts.Pyramid",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#selected",
            "!doc" : "Selected state settings."
          },
          "reversed" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#reversed",
            "!doc" : "Reverses pyramid"
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "connectorLength" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#connectorLength",
            "!doc" : "Labels connector length."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "pointsPadding" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#pointsPadding",
            "!doc" : "Padding between points."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.charts.Pyramid#getType",
            "!doc" : "Definition of the chart type."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "unselect" : {
            "!type" : "fn() -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#unselect",
            "!doc" : "Deselects all points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "overlapMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#overlapMode",
            "!doc" : "Overlap mode for labels."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#hovered",
            "!doc" : "Hovered state settings."
          },
          "baseWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#baseWidth",
            "!doc" : "Width settings."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#normal",
            "!doc" : "Normal state settings."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#stroke",
            "!doc" : "Stroke settings."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hatchFillPalette" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#hatchFillPalette",
            "!doc" : "Hatch fill palette settings."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#select",
            "!doc" : "Selects points."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#fill",
            "!doc" : "Fill settings."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "getPoint" : {
            "!type" : "fn(index: number) -> +anychart.core.Point",
            "!url" : "8.3.0/anychart.charts.Pyramid#getPoint",
            "!doc" : "Gets wrapped point by index."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "palette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#palette",
            "!doc" : "Palette settings."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn() -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#unhover",
            "!doc" : "Removes hover state from all chart points."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(opt_index?: number) -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#hover",
            "!doc" : "Hover state of the element."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Mapping|+anychart.data.Set|+Array|string|+anychart.data.DataSettings, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#data",
            "!doc" : "Data settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "markerPalette" : {
            "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#markerPalette",
            "!doc" : "Markers palette settings."
          },
          "connectorStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.charts.Pyramid",
            "!url" : "8.3.0/anychart.charts.Pyramid#connectorStroke",
            "!doc" : "Labels connector stroke settings."
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      }
    },
    "ui" : {
      "ContextMenu" : {
        "!doc" : "The ContextMenu class contains methods for configuring context menu.",
        "!url" : "8.3.0/anychart.ui.ContextMenu",
        "prototype" : {
          "serialize" : {
            "!type" : "fn() -> Object",
            "!url" : "8.3.0/anychart.ui.ContextMenu#serialize",
            "!doc" : "Serializes element to JSON."
          },
          "hide" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.ui.ContextMenu#hide",
            "!doc" : "Hides the context menu."
          },
          "itemsProvider" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#itemsProvider",
            "!doc" : "Function to items provider."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.ui.ContextMenu#unlisten",
            "!doc" : "Removes a listener added using listen() or listenOnce() methods."
          },
          "detach" : {
            "!type" : "fn(opt_target?: Element, opt_capture?: bool) -> +anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#detach",
            "!doc" : "Detaches the context menu from a given element or chart."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#enabled",
            "!doc" : "Context menu state (enabled or disabled)."
          },
          "attach" : {
            "!type" : "fn(target: Element|+anychart.core.Chart, opt_capture?: bool) -> +anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#attach",
            "!doc" : "Attaches the context menu to a chart or DOM element."
          },
          "items" : {
            "!type" : "fn(opt_value?: [+anychart.ui.ContextMenu.Item]) -> [+anychart.ui.ContextMenu.Item]|+anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#items",
            "!doc" : "Context menu items"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.ui.ContextMenu#listen",
            "!doc" : "Adds an event listener for an event to a context menu."
          },
          "show" : {
            "!type" : "fn(x: number, y: number)",
            "!url" : "8.3.0/anychart.ui.ContextMenu#show",
            "!doc" : "Shows the menu immediately at the given client coordinates."
          },
          "setup" : {
            "!type" : "fn(var_args: Object|+Array|number|string|bool) -> +anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#setup",
            "!doc" : "Setups the element using passed configuration value."
          },
          "removeClassName" : {
            "!type" : "fn(className: string)",
            "!url" : "8.3.0/anychart.ui.ContextMenu#removeClassName",
            "!doc" : "Removes the class name."
          },
          "addClassName" : {
            "!type" : "fn(className: string)",
            "!url" : "8.3.0/anychart.ui.ContextMenu#addClassName",
            "!doc" : "Setter for the class name."
          },
          "itemsFormatter" : {
            "!type" : "fn(opt_value?: function(items:[+anychart.core.ui.Legend.LegendItemProvider])) -> fn()|+anychart.ui.ContextMenu",
            "!url" : "8.3.0/anychart.ui.ContextMenu#itemsFormatter",
            "!doc" : "Function to format items."
          }
        },
        "Item" : {
          "!doc" : "Type definition for the context menu item.",
          "!url" : "8.3.0/anychart.ui.ContextMenu.Item",
          "prototype" : {
            "classNames" : {
              "!type" : "string|[string]",
              "!doc" : "Name for CSS class."
            },
            "index" : {
              "!type" : "number",
              "!doc" : "Item index."
            },
            "eventType" : {
              "!type" : "string",
              "!doc" : "Event type."
            },
            "enabled" : {
              "!type" : "bool",
              "!doc" : "State of the context menu."
            },
            "subMenu" : {
              "!type" : "[+anychart.ui.ContextMenu.Item]",
              "!doc" : "Name for submenu."
            },
            "href" : {
              "!type" : "string",
              "!doc" : "Link to a webpage."
            },
            "text" : {
              "!type" : "string",
              "!doc" : "Text for the item."
            },
            "action" : {
              "!type" : "fn()",
              "!doc" : "Handler for the selection item."
            },
            "meta" : {
              "!type" : "+Object",
              "!doc" : "Meta."
            },
            "target" : {
              "!type" : "string",
              "!doc" : "Target for context menu."
            },
            "iconClass" : {
              "!type" : "string",
              "!doc" : "Name for icon class."
            },
            "scrollable" : {
              "!type" : "bool",
              "!doc" : "State of the scrollable."
            }
          }
        },
        "ActionContext" : {
          "!doc" : "Type definition for the action context.",
          "!url" : "8.3.0/anychart.ui.ContextMenu.ActionContext",
          "prototype" : {
            "chart" : {
              "!type" : "+anychart.core.Chart",
              "!doc" : "Chart instance."
            },
            "event" : {
              "!type" : "Object",
              "!doc" : "Action event."
            },
            "item" : {
              "!type" : "+anychart.ui.ContextMenu.Item",
              "!doc" : "Context menu item."
            },
            "selectedPoints" : {
              "!type" : "[+anychart.core.Point]",
              "!doc" : "An array of the selected points."
            },
            "target" : {
              "!type" : "Element|+anychart.core.VisualBase",
              "!doc" : "Action target."
            },
            "type" : {
              "!type" : "string",
              "!doc" : "Action type."
            }
          }
        },
        "PrepareItemsContext" : {
          "!doc" : "Type definition for the preparing of the context menu items.",
          "!url" : "8.3.0/anychart.ui.ContextMenu.PrepareItemsContext",
          "prototype" : {
            "chart" : {
              "!type" : "+anychart.core.Chart",
              "!doc" : "Chart instance"
            },
            "event" : {
              "!type" : "+anychart.core.MouseEvent",
              "!doc" : "Event."
            },
            "menu" : {
              "!type" : "+anychart.ui.ContextMenu",
              "!doc" : "Context menu instance."
            },
            "selectedPoints" : {
              "!type" : "[+anychart.core.Point]",
              "!doc" : "An array of the selected points."
            },
            "target" : {
              "!type" : "Element|+anychart.core.VisualBase",
              "!doc" : "Target for the context menu."
            }
          }
        }
      },
      "!doc" : "The anychart.ui namespace contains classes for using UI elements.",
      "zoom" : {
        "!type" : "fn() -> +anychart.ui.Zoom",
        "!url" : "8.3.0/anychart.ui#zoom",
        "!doc" : "Constructor function for zoom controller."
      },
      "Preloader" : {
        "!doc" : "The Preloader class contains methods for configuring preloader.",
        "!url" : "8.3.0/anychart.ui.Preloader",
        "prototype" : {
          "decorate" : {
            "!type" : "fn(element: Element)",
            "!url" : "8.3.0/anychart.ui.Preloader#decorate",
            "!doc" : "Decorates the element for the preloader."
          },
          "render" : {
            "!type" : "fn(opt_parentElement?: Element)",
            "!url" : "8.3.0/anychart.ui.Preloader#render",
            "!doc" : "Renders the preloader."
          },
          "visible" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.ui.Preloader",
            "!url" : "8.3.0/anychart.ui.Preloader#visible",
            "!doc" : "Getter for the visibility of the preloader."
          }
        }
      },
      "contextMenu" : {
        "!type" : "fn() -> +anychart.ui.ContextMenu",
        "!url" : "8.3.0/anychart.ui#contextMenu",
        "!doc" : "Constructor function for context menu."
      },
      "GanttToolbar" : {
        "!doc" : "The GanttToolbar class contains methods for configuring toolbar.",
        "!url" : "8.3.0/anychart.ui.GanttToolbar",
        "prototype" : {
          "container" : {
            "!type" : "fn(opt_element?: string|Element) -> Element|+anychart.ui.GanttToolbar",
            "!url" : "8.3.0/anychart.ui.GanttToolbar#container",
            "!doc" : "Toolbar container."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.ui.GanttToolbar",
            "!url" : "8.3.0/anychart.ui.GanttToolbar#draw",
            "!doc" : "Draws Gantt chart toolbar."
          },
          "printPaperSizes" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.PaperSize]) -> [+anychart.graphics.vector.PaperSize]|+anychart.ui.GanttToolbar",
            "!url" : "8.3.0/anychart.ui.GanttToolbar#printPaperSizes",
            "!doc" : "Print paper sizes."
          },
          "target" : {
            "!type" : "fn(opt_value?: +anychart.core.Chart) -> +anychart.core.Chart|+anychart.ui.GanttToolbar",
            "!url" : "8.3.0/anychart.ui.GanttToolbar#target",
            "!doc" : "Target of the control chart."
          }
        }
      },
      "!url" : "8.3.0/anychart.ui",
      "RangePicker" : {
        "!doc" : "The RangePicker class contains methods for configuring range picker.",
        "!url" : "8.3.0/anychart.ui.RangePicker",
        "prototype" : {
          "decorate" : {
            "!type" : "fn(value: Element)",
            "!url" : "8.3.0/anychart.ui.RangePicker#decorate",
            "!doc" : "Adds a Range Picker to a specified DOM container."
          },
          "dispose" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.ui.RangePicker#dispose",
            "!doc" : "Disposes range picker."
          },
          "format" : {
            "!type" : "fn(opt_format?: string) -> string",
            "!url" : "8.3.0/anychart.ui.RangePicker#format",
            "!doc" : "Date time format."
          },
          "fromLabelText" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.ui.RangePicker",
            "!url" : "8.3.0/anychart.ui.RangePicker#fromLabelText",
            "!doc" : "'From' label text settings."
          },
          "getElement" : {
            "!type" : "fn() -> Element",
            "!url" : "8.3.0/anychart.ui.RangePicker#getElement",
            "!doc" : "Returns the editable DOM element or null if this field."
          },
          "render" : {
            "!type" : "fn(opt_parentElement?: +anychart.charts.Stock|Element)",
            "!url" : "8.3.0/anychart.ui.RangePicker#render",
            "!doc" : "Renders the range picker."
          },
          "target" : {
            "!type" : "fn(chart: +anychart.charts.Stock)",
            "!url" : "8.3.0/anychart.ui.RangePicker#target",
            "!doc" : "Sets stock chart for range picker."
          },
          "toLabelText" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.ui.RangePicker",
            "!url" : "8.3.0/anychart.ui.RangePicker#toLabelText",
            "!doc" : "'To' label text settings."
          }
        }
      },
      "rangeSelector" : {
        "!type" : "fn() -> +anychart.ui.RangeSelector",
        "!url" : "8.3.0/anychart.ui#rangeSelector",
        "!doc" : "Constructor function for range selector."
      },
      "RangeSelector" : {
        "!doc" : "The RangeSelector class contains methods for configuring range selector in a stock chart.",
        "!url" : "8.3.0/anychart.ui.RangeSelector",
        "prototype" : {
          "decorate" : {
            "!type" : "fn(value: Element)",
            "!url" : "8.3.0/anychart.ui.RangeSelector#decorate",
            "!doc" : "Adds a Range Selector to a specified DOM container."
          },
          "dispose" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.ui.RangeSelector#dispose",
            "!doc" : "Disposes range selector."
          },
          "getElement" : {
            "!type" : "fn() -> Element",
            "!url" : "8.3.0/anychart.ui.RangeSelector#getElement",
            "!doc" : "Returns the editable DOM element or null if this field."
          },
          "ranges" : {
            "!type" : "fn(opt_ranges?: [+anychart.ui.RangeSelector.Range]) -> [+anychart.ui.RangeSelector.Range]",
            "!url" : "8.3.0/anychart.ui.RangeSelector#ranges",
            "!doc" : "Buttons settings."
          },
          "render" : {
            "!type" : "fn(opt_parentElement?: +anychart.charts.Stock|Element)",
            "!url" : "8.3.0/anychart.ui.RangeSelector#render",
            "!doc" : "Renders the range selector."
          },
          "target" : {
            "!type" : "fn(chart: +anychart.charts.Stock)",
            "!url" : "8.3.0/anychart.ui.RangeSelector#target",
            "!doc" : "Sets stock chart for range selector."
          },
          "zoomLabelText" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.ui.RangeSelector",
            "!url" : "8.3.0/anychart.ui.RangeSelector#zoomLabelText",
            "!doc" : "Label text settings."
          }
        },
        "Range" : {
          "!doc" : "Type definition for range.",
          "!url" : "8.3.0/anychart.ui.RangeSelector.Range",
          "prototype" : {
            "anchor" : {
              "!type" : "+anychart.enums.StockRangeAnchor|string",
              "!doc" : "Range anchor."
            },
            "count" : {
              "!type" : "number",
              "!doc" : "Unit count."
            },
            "endDate" : {
              "!type" : "string",
              "!doc" : "End date."
            },
            "startDate" : {
              "!type" : "string",
              "!doc" : "Start date."
            },
            "text" : {
              "!type" : "string",
              "!doc" : "Range text."
            },
            "type" : {
              "!type" : "+anychart.enums.StockRangeType|string",
              "!doc" : "Period range type"
            },
            "unit" : {
              "!type" : "+anychart.enums.Interval|string",
              "!doc" : "Range interval."
            }
          }
        }
      },
      "Zoom" : {
        "!doc" : "The Zoom class contains methods for configuring zoom ui element.",
        "!url" : "8.3.0/anychart.ui.Zoom",
        "prototype" : {
          "decorate" : {
            "!type" : "fn(value: Element)",
            "!url" : "8.3.0/anychart.ui.Zoom#decorate",
            "!doc" : "Adds a Zoom Controller to a specified DOM container."
          },
          "dispose" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.ui.Zoom#dispose",
            "!doc" : "Disposes zoom controller."
          },
          "render" : {
            "!type" : "fn(opt_parentElement?: +anychart.charts.Map|Element)",
            "!url" : "8.3.0/anychart.ui.Zoom#render",
            "!doc" : "Renders the zoom controller."
          },
          "target" : {
            "!type" : "fn(chart: +anychart.charts.Map)",
            "!url" : "8.3.0/anychart.ui.Zoom#target",
            "!doc" : "Set Map chart for zoom controller."
          }
        }
      },
      "rangePicker" : {
        "!type" : "fn() -> +anychart.ui.RangePicker",
        "!url" : "8.3.0/anychart.ui#rangePicker",
        "!doc" : "Constructor function for range picker."
      },
      "ganttToolbar" : {
        "!type" : "fn() -> +anychart.ui.GanttToolbar",
        "!url" : "8.3.0/anychart.ui#ganttToolbar",
        "!doc" : "Constructor function for Gantt toolbar element."
      },
      "preloader" : {
        "!type" : "fn() -> +anychart.ui.Preloader",
        "!url" : "8.3.0/anychart.ui#preloader",
        "!doc" : "Constructor function for preloader."
      }
    },
    "palettes" : {
      "blue" : {
        "!doc" : "The blue palette <br/>",
        "!url" : "8.3.0/anychart.palettes#blue",
        "!type" : "Array.<string>"
      },
      "earth" : {
        "!doc" : "The earth palette <br/>",
        "!url" : "8.3.0/anychart.palettes#earth",
        "!type" : "Array.<string>"
      },
      "!doc" : "The anychart.palettes namespace contains distinct color palettes.",
      "monochrome" : {
        "!doc" : "The monochrome palette <br/>",
        "!url" : "8.3.0/anychart.palettes#monochrome",
        "!type" : "Array.<string>"
      },
      "morning" : {
        "!doc" : "The morning palette <br/>",
        "!url" : "8.3.0/anychart.palettes#morning",
        "!type" : "Array.<string>"
      },
      "sea" : {
        "!doc" : "The sea palette <br/>",
        "!url" : "8.3.0/anychart.palettes#sea",
        "!type" : "Array.<string>"
      },
      "v6" : {
        "!doc" : "The v6 palette <br/>",
        "!url" : "8.3.0/anychart.palettes#v6",
        "!type" : "Array.<string>"
      },
      "rangeColors" : {
        "!type" : "fn() -> +anychart.palettes.RangeColors",
        "!url" : "8.3.0/anychart.palettes#rangeColors",
        "!doc" : "Creates and returns new instance of range colors palette."
      },
      "coffee" : {
        "!doc" : "The coffee palette <br/>",
        "!url" : "8.3.0/anychart.palettes#coffee",
        "!type" : "Array.<string>"
      },
      "!url" : "8.3.0/anychart.palettes",
      "Markers" : {
        "!doc" : "Marker palette class.",
        "!url" : "8.3.0/anychart.palettes.Markers",
        "prototype" : {
          "itemAt" : {
            "!type" : "fn(index: number, opt_type?: string) -> +anychart.enums.MarkerType|string|+anychart.enums.BulletMarkerType|+anychart.palettes.Markers",
            "!url" : "8.3.0/anychart.palettes.Markers#itemAt",
            "!doc" : "Marker by index."
          },
          "items" : {
            "!type" : "fn(opt_value?: [string]|string, var_args: string) -> [+anychart.graphics.vector.Fill]|+anychart.palettes.Markers",
            "!url" : "8.3.0/anychart.palettes.Markers#items",
            "!doc" : "Palette markers list."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "RangeColors" : {
        "!doc" : "Gradient palette class.",
        "!url" : "8.3.0/anychart.palettes.RangeColors",
        "prototype" : {
          "count" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.palettes.RangeColors",
            "!url" : "8.3.0/anychart.palettes.RangeColors#count",
            "!doc" : "Colors counts."
          },
          "itemAt" : {
            "!type" : "fn(index: number, opt_color?: +anychart.graphics.vector.SolidFill) -> +anychart.graphics.vector.SolidFill|+anychart.palettes.RangeColors",
            "!url" : "8.3.0/anychart.palettes.RangeColors#itemAt",
            "!doc" : "Color by index."
          },
          "items" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.SolidFill|Object]|+anychart.graphics.vector.LinearGradientFill|+anychart.graphics.vector.RadialGradientFill|[+anychart.graphics.vector.GradientKey]|[string]|+anychart.graphics.vector.SolidFill|string, var_args: +anychart.graphics.vector.SolidFill|string) -> [+anychart.graphics.vector.SolidFill]|+anychart.palettes.RangeColors",
            "!url" : "8.3.0/anychart.palettes.RangeColors#items",
            "!doc" : "Colors list."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "defaultPalette" : {
        "!doc" : "The default palette.<br/>",
        "!url" : "8.3.0/anychart.palettes#defaultPalette",
        "!type" : "Array.<string>"
      },
      "wines" : {
        "!doc" : "The wines palette <br/>",
        "!url" : "8.3.0/anychart.palettes#wines",
        "!type" : "Array.<string>"
      },
      "glamour" : {
        "!doc" : "The glamour palette <br/>",
        "!url" : "8.3.0/anychart.palettes#glamour",
        "!type" : "Array.<string>"
      },
      "distinctColors" : {
        "!type" : "fn() -> +anychart.palettes.DistinctColors",
        "!url" : "8.3.0/anychart.palettes#distinctColors",
        "!doc" : "Creates and returns new instance of distinct colors palette."
      },
      "hatchFills" : {
        "!type" : "fn() -> +anychart.palettes.HatchFills",
        "!url" : "8.3.0/anychart.palettes#hatchFills",
        "!doc" : "Creates and returns new instance of hatch fill palette."
      },
      "HatchFills" : {
        "!doc" : "HatchFills palette class.",
        "!url" : "8.3.0/anychart.palettes.HatchFills",
        "prototype" : {
          "itemAt" : {
            "!type" : "fn(index: number, opt_value?: +anychart.graphics.vector.HatchFill.HatchFillType|string|+anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.HatchFill|+anychart.graphics.vector.PatternFill|+anychart.palettes.HatchFills",
            "!url" : "8.3.0/anychart.palettes.HatchFills#itemAt",
            "!doc" : "Hatch fill by index."
          },
          "items" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|+anychart.graphics.vector.PatternFill], var_args: +anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|+anychart.graphics.vector.PatternFill) -> [+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|+anychart.graphics.vector.PatternFill]|+anychart.palettes.HatchFills",
            "!url" : "8.3.0/anychart.palettes.HatchFills#items",
            "!doc" : "Palette hatch fills list."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "DistinctColors" : {
        "!doc" : "Color palette class.",
        "!url" : "8.3.0/anychart.palettes.DistinctColors",
        "prototype" : {
          "itemAt" : {
            "!type" : "fn(index: number, opt_color?: +anychart.graphics.vector.Fill) -> +anychart.graphics.vector.Fill|+anychart.palettes.DistinctColors",
            "!url" : "8.3.0/anychart.palettes.DistinctColors#itemAt",
            "!doc" : "Color by index."
          },
          "items" : {
            "!type" : "fn(opt_value?: [+anychart.graphics.vector.Fill]|+anychart.graphics.vector.Fill, var_args: +anychart.graphics.vector.Fill) -> [+anychart.graphics.vector.Fill]|+anychart.palettes.DistinctColors",
            "!url" : "8.3.0/anychart.palettes.DistinctColors#items",
            "!doc" : "Palette colors list."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "markers" : {
        "!type" : "fn() -> +anychart.palettes.Markers",
        "!url" : "8.3.0/anychart.palettes#markers",
        "!doc" : "Creates and returns new instance of markers palette."
      },
      "turquoise" : {
        "!doc" : "The turquoise palette <br/>",
        "!url" : "8.3.0/anychart.palettes#turquoise",
        "!type" : "Array.<string>"
      },
      "provence" : {
        "!doc" : "The provence palette <br/>",
        "!url" : "8.3.0/anychart.palettes#provence",
        "!type" : "Array.<string>"
      },
      "pastel" : {
        "!doc" : "The pastel palette <br/>",
        "!url" : "8.3.0/anychart.palettes#pastel",
        "!type" : "Array.<string>"
      }
    },
    "!doc" : "Core space for all anychart components.",
    "bubbleMap" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#bubbleMap",
      "!doc" : "Creates and returns a Bubble Map."
    },
    "stock" : {
      "!type" : "fn(opt_allowPointSettings?: bool) -> +anychart.charts.Stock",
      "!url" : "8.3.0/anychart#stock",
      "!doc" : "Creates and returns a Stock Chart."
    },
    "fromXmlFile" : {
      "!type" : "fn(url: string, opt_onSuccessOrContainer?: string|fn(), opt_onError?: fn(), opt_method?: string, opt_content?: ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string, opt_headers?: Object, opt_timeoutInterval?: number, opt_withCredentials?: bool, opt_context?: +Object)",
      "!url" : "8.3.0/anychart#fromXmlFile",
      "!doc" : "Creates a chart using XML configuration."
    },
    "markerMap" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#markerMap",
      "!doc" : "Creates and returns a Marker Map."
    },
    "graphics" : {
      "!doc" : "A namespace of all functions, objects, and classes provided by AnyChart Stage.",
      "server" : {
        "!type" : "fn(opt_address?: string) -> string",
        "!url" : "8.3.0/anychart.graphics#server",
        "!doc" : "Sets and returns an address export server script, which is used to export to an image or PDF."
      },
      "clip" : {
        "!type" : "fn(opt_leftorRect?: number|[number]|+anychart.graphics.math.Rect|Object, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Clip",
        "!url" : "8.3.0/anychart.graphics#clip",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Clip} class."
      },
      "image" : {
        "!type" : "fn(opt_src?: string, opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Image",
        "!url" : "8.3.0/anychart.graphics#image",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Image} class."
      },
      "path" : {
        "!type" : "fn() -> +anychart.graphics.vector.Path",
        "!url" : "8.3.0/anychart.graphics#path",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Path} class."
      },
      "StageType" : {
        "!doc" : "Stage types supported by AnyChart Data Visualization Toolkit. @enum {string}",
        "!url" : "8.3.0/anychart.graphics.StageType",
        "SVG" : {
          "!doc" : "A vector drawing technology compatible with the majority of modern browsers (both desktop and mobile).",
          "!url" : "8.3.0/anychart.graphics.StageType",
          "!type" : "anychart.graphics.StageType"
        },
        "VML" : {
          "!doc" : "A vector drawing technology compatible only with Microsoft Internet Explorer (versions 6-8).",
          "!url" : "8.3.0/anychart.graphics.StageType",
          "!type" : "anychart.graphics.StageType"
        }
      },
      "math" : {
        "Rect" : {
          "!doc" : "Rectangle class.",
          "!url" : "8.3.0/anychart.graphics.math.Rect",
          "prototype" : {
            "getBottom" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getBottom",
              "!doc" : "Getter for the bottom of a rectangle."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getHeight",
              "!doc" : "Getter for the height of a rectangle."
            },
            "getLeft" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getLeft",
              "!doc" : "Getter for the X-coordinate of the left side of a rectangle."
            },
            "getRight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getRight",
              "!doc" : "Getter for the X-coordinate of the right side of a rectangle."
            },
            "getTop" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getTop",
              "!doc" : "Getter for the top of a rectangle."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.math.Rect#getWidth",
              "!doc" : "Getter for the width of a rectangle."
            }
          }
        },
        "!doc" : "A namespace of classes of geometric shapes.",
        "!url" : "8.3.0/anychart.graphics.math"
      },
      "!url" : "8.3.0/anychart.graphics",
      "ellipse" : {
        "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_rx?: number, opt_ry?: number) -> +anychart.graphics.vector.Ellipse",
        "!url" : "8.3.0/anychart.graphics#ellipse",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Ellipse} class."
      },
      "vector" : {
        "LinearGradientFill" : {
          "!doc" : "Linear gradient.",
          "!url" : "8.3.0/anychart.graphics.vector.LinearGradientFill",
          "prototype" : {
            "angle" : {
              "!type" : "number",
              "!doc" : "Gradient angle."
            },
            "keys" : {
              "!type" : "[+anychart.graphics.vector.GradientKey|string]",
              "!doc" : "Keys list."
            },
            "mode" : {
              "!type" : "bool|+anychart.graphics.math.Rect",
              "!doc" : "Fill mode. See more at"
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            }
          }
        },
        "ColoredFill" : {
          "!doc" : "Any color fill. @typedef {(string|anychart.graphics.vector.SolidFill|anychart.graphics.vector.LinearGradientFill|anychart.graphics.vector.RadialGradientFill)}",
          "!url" : "8.3.0/anychart.graphics.vector.ColoredFill"
        },
        "StrokeLineCap" : {
          "!doc" : "Line caps. @enum {string}",
          "!url" : "8.3.0/anychart.graphics.vector.StrokeLineCap",
          "BUTT" : {
            "!doc" : "Butt cap.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineCap",
            "!type" : "anychart.graphics.vector.StrokeLineCap"
          },
          "ROUND" : {
            "!doc" : "Round cap.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineCap",
            "!type" : "anychart.graphics.vector.StrokeLineCap"
          },
          "SQUARE" : {
            "!doc" : "Square cap.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineCap",
            "!type" : "anychart.graphics.vector.StrokeLineCap"
          }
        },
        "normalizeStroke" : {
          "!type" : "fn(opt_strokeOrFill?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke",
          "!url" : "8.3.0/anychart.graphics.vector#normalizeStroke",
          "!doc" : "Normalizes stroke params. Look at {@link anychart.graphics.vector.Shape#stroke} params for details."
        },
        "!doc" : "A namespace for working with vector graphics.",
        "Ellipse" : {
          "!doc" : "Ellipse Class.",
          "!url" : "8.3.0/anychart.graphics.vector.Ellipse",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "strokeThickness" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#strokeThickness",
              "!doc" : "Stroke thickness setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "radiusY" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#radiusY",
              "!doc" : "Y radius setting."
            },
            "centerY" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#centerY",
              "!doc" : "Center Y setting."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "centerX" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#centerX",
              "!doc" : "Center X setting."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "center" : {
              "!type" : "fn(opt_value?: +anychart.math.Coordinate) -> +anychart.math.Coordinate|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#center",
              "!doc" : "Center coordinates settings."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#fill",
              "!doc" : "Fill settings."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "setRadius" : {
              "!type" : "fn(rx: number, ry: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#setRadius",
              "!doc" : "Sets radius."
            },
            "radiusX" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#radiusX",
              "!doc" : "X radius setting."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "AnyColor" : {
          "!doc" : "A shortcut for fill or stroke or patternFill. @typedef {(anychart.graphics.vector.Fill|anychart.graphics.vector.Stroke|anychart.graphics.vector.PatternFill)}",
          "!url" : "8.3.0/anychart.graphics.vector.AnyColor"
        },
        "primitives" : {
          "diamond" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#diamond",
            "!doc" : "Draws a diamond set by it's circumscribed circle's center and radius."
          },
          "hLine" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#hLine",
            "!doc" : "Draws a thick horizontal line set by it's circumscribed circle's center and radius."
          },
          "triangleLeft" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#triangleLeft",
            "!doc" : "Draws a triangle heading leftwards set by it's circumscribed circle's center and radius."
          },
          "!doc" : "Namespace for anychart.graphics.vector.primitives.",
          "star" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number, innerRadius: number, numberOfSpikes: number, opt_startDegrees?: number, opt_curvature?: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star",
            "!doc" : "Draws multi-pointed star."
          },
          "star4" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star4",
            "!doc" : "Draws a 4-spiked star."
          },
          "truncatedRect" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, rect: +anychart.graphics.math.Rect, var_args: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#truncatedRect",
            "!doc" : "Draws a rectangle with truncated corners."
          },
          "roundedRect" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, rect: +anychart.graphics.math.Rect, var_args: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#roundedRect",
            "!doc" : "Draws a rectangle with rounded inner corners."
          },
          "cross" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#cross",
            "!doc" : "Draws a cross set by it's circumscribed circle's center and radius."
          },
          "star10" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star10",
            "!doc" : "Draws a 10-spiked star."
          },
          "!url" : "8.3.0/anychart.graphics.vector.primitives",
          "triangleDown" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#triangleDown",
            "!doc" : "Draws a triangle heading downwards set by it's circumscribed circle's center and radius."
          },
          "vLine" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#vLine",
            "!doc" : "Draws a thick vertical line set by it's circumscribed circle's center and radius."
          },
          "star6" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star6",
            "!doc" : "Draws a 6-spiked star."
          },
          "pie" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, cx: number, cy: number, r: number, start: number, sweep: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#pie",
            "!doc" : "Draws a pie sector with sides (a curvilinear isosceles triangle with center in (cx, cy))."
          },
          "diagonalCross" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#diagonalCross",
            "!doc" : "Draws a diagonal cross set by it's circumscribed circle's center and radius."
          },
          "donut" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, cx: number, cy: number, outerR: number, innerR: number, start: number, sweep: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#donut",
            "!doc" : "Draws a donut sector with sides. If sweep modulus is larger or equal 360, draws two concentric circles (without sides)."
          },
          "star7" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star7",
            "!doc" : "Draws a 7-spiked star."
          },
          "star5" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#star5",
            "!doc" : "Draws a 5-spiked star."
          },
          "roundedInnerRect" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, rect: +anychart.graphics.math.Rect, var_args: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#roundedInnerRect",
            "!doc" : "Draws a rectangle with rounded corners."
          },
          "triangleUp" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#triangleUp",
            "!doc" : "Draws a triangle heading upwards set by it's circumscribed circle's center and radius."
          },
          "triangleRight" : {
            "!type" : "fn(stageOrPath: +anychart.graphics.vector.Stage|+anychart.graphics.vector.Path, centerX: number, centerY: number, outerRadius: number) -> +anychart.graphics.vector.Path",
            "!url" : "8.3.0/anychart.graphics.vector.primitives#triangleRight",
            "!doc" : "Draws a triangle heading rightwards set by it's circumscribed circle's center and radius."
          }
        },
        "SolidStroke" : {
          "!doc" : "Solid color line.",
          "!url" : "8.3.0/anychart.graphics.vector.SolidStroke",
          "prototype" : {
            "color" : {
              "!type" : "string",
              "!doc" : "Stroke color - {@link https://www.w3schools.com/html/html_colors.asp}."
            },
            "dash" : {
              "!type" : "string",
              "!doc" : "Dash settings. Read more at {@link anychart.graphics.vector.Shape#stroke}."
            },
            "lineCap" : {
              "!type" : "string",
              "!doc" : "Line cap style. More at {@link anychart.graphics.vector.StrokeLineCap}."
            },
            "lineJoin" : {
              "!type" : "string",
              "!doc" : "Line join style. More at {@link anychart.graphics.vector.StrokeLineJoin}."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            },
            "thickness" : {
              "!type" : "number",
              "!doc" : "Line thickness."
            }
          }
        },
        "Path" : {
          "!doc" : "Path class.",
          "!url" : "8.3.0/anychart.graphics.vector.Path",
          "prototype" : {
            "getCurrentPoint" : {
              "!type" : "fn() -> +anychart.math.Coordinate",
              "!url" : "8.3.0/anychart.graphics.vector.Path#getCurrentPoint",
              "!doc" : "Returns the last coordinates added to the path."
            },
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "strokeThickness" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#strokeThickness",
              "!doc" : "Stroke thickness setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "lineTo" : {
              "!type" : "fn(x: number, y: number, var_args: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#lineTo",
              "!doc" : "Adds specified points to the current path, drawing sequentially a straight line through the specified coordinates."
            },
            "arcTo" : {
              "!type" : "fn(rx: number, ry: number, fromAngle: number, extent: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#arcTo",
              "!doc" : "Adds a command to the path that draws an arc of an ellipse."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "arcToByEndPoint" : {
              "!type" : "fn(x: number, y: number, rx: number, ry: number, largeArc: bool, clockwiseArc: bool) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#arcToByEndPoint",
              "!doc" : "Adds a command to the path that draws an arc of an ellipse."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "arcToAsCurves" : {
              "!type" : "fn(rx: number, ry: number, fromAngle: number, extent: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#arcToAsCurves",
              "!doc" : "This method is similar to {@link anychart.graphics.vector.Path#arcTo}, but in this case the arc is approximated by Bezier curves."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "curveTo" : {
              "!type" : "fn(control1X: number, control1Y: number, control2X: number, control2Y: number, endX: number, endY: number, var_args: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#curveTo",
              "!doc" : "Adds specified points to the path, drawing sequentially a cubic Bezier curve from the current point to the next."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#fill",
              "!doc" : "Fill settings."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "getLength" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Path#getLength",
              "!doc" : "Gets path length."
            },
            "circularArc" : {
              "!type" : "fn(cx: number, cy: number, rx: number, ry: number, fromAngle: number, sweep: number, opt_lineTo?: bool) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#circularArc",
              "!doc" : "Adds a command to the path that draws a circular arc."
            },
            "close" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#close",
              "!doc" : "Adds a command that closes the path by connecting the last point with the first straight line."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "moveTo" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#moveTo",
              "!doc" : "Moves path cursor position to a specified coordinate."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "quadraticCurveTo" : {
              "!type" : "fn(controlX: number, controlY: number, endX: number, endY: number, var_args: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#quadraticCurveTo",
              "!doc" : "Adds specified points to the path, drawing sequentially a quadratic Bezier curve from the current point to the next."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "clear" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Path#clear",
              "!doc" : "Resets all path operations."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "SolidFill" : {
          "!doc" : "Fill.",
          "!url" : "8.3.0/anychart.graphics.vector.SolidFill",
          "prototype" : {
            "color" : {
              "!type" : "string",
              "!doc" : "Fill color as described here {@link https://www.w3schools.com/cssref/css_colors_legal.asp}."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            }
          }
        },
        "RadialGradient" : {
          "!doc" : "Radial gradient.",
          "!url" : "8.3.0/anychart.graphics.vector.RadialGradient",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.RadialGradient#dispose",
              "!doc" : "Disposes gradient completely, removes from parent layer, null internal links, removes from DOM structure."
            }
          }
        },
        "LinearGradientStroke" : {
          "!doc" : "Linear gradient stroke.",
          "!url" : "8.3.0/anychart.graphics.vector.LinearGradientStroke",
          "prototype" : {
            "angle" : {
              "!type" : "number",
              "!doc" : "Gradient angle."
            },
            "dash" : {
              "!type" : "string",
              "!doc" : "Dash settings. Read more at {@link anychart.graphics.vector.Shape#stroke}."
            },
            "keys" : {
              "!type" : "[+anychart.graphics.vector.GradientKey|string]",
              "!doc" : "Keys list."
            },
            "lineCap" : {
              "!type" : "string",
              "!doc" : "Line cap style. More at {@link anychart.graphics.vector.StrokeLineCap}."
            },
            "lineJoin" : {
              "!type" : "string",
              "!doc" : "Line join style. More at {@link anychart.graphics.vector.StrokeLineJoin}."
            },
            "mode" : {
              "!type" : "bool|+anychart.graphics.math.Rect",
              "!doc" : "Fill mode. Read more at"
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            },
            "thickness" : {
              "!type" : "number",
              "!doc" : "Line thickness."
            }
          }
        },
        "StrokeLineJoin" : {
          "!doc" : "Line joins. @enum {string}",
          "!url" : "8.3.0/anychart.graphics.vector.StrokeLineJoin",
          "BEVEL" : {
            "!doc" : "Bevel joins.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineJoin",
            "!type" : "anychart.graphics.vector.StrokeLineJoin"
          },
          "MITER" : {
            "!doc" : "Miter joins.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineJoin",
            "!type" : "anychart.graphics.vector.StrokeLineJoin"
          },
          "ROUND" : {
            "!doc" : "Round joins.",
            "!url" : "8.3.0/anychart.graphics.vector.StrokeLineJoin",
            "!type" : "anychart.graphics.vector.StrokeLineJoin"
          }
        },
        "ImageFillMode" : {
          "!doc" : "Image fill modes. @enum {string}",
          "!url" : "8.3.0/anychart.graphics.vector.ImageFillMode",
          "FIT" : {
            "!doc" : "Fit by lesser side.",
            "!url" : "8.3.0/anychart.graphics.vector.ImageFillMode",
            "!type" : "anychart.graphics.vector.ImageFillMode"
          },
          "FIT_MAX" : {
            "!doc" : "Fit by greater side.",
            "!url" : "8.3.0/anychart.graphics.vector.ImageFillMode",
            "!type" : "anychart.graphics.vector.ImageFillMode"
          },
          "STRETCH" : {
            "!doc" : "Stretches image, proportions are not kept.",
            "!url" : "8.3.0/anychart.graphics.vector.ImageFillMode",
            "!type" : "anychart.graphics.vector.ImageFillMode"
          },
          "TILE" : {
            "!doc" : "Tiling.",
            "!url" : "8.3.0/anychart.graphics.vector.ImageFillMode",
            "!type" : "anychart.graphics.vector.ImageFillMode"
          }
        },
        "normalizeFill" : {
          "!type" : "fn(opt_fillOrColorOrKeys?: +anychart.graphics.vector.Fill|[+anychart.graphics.vector.GradientKey|string], opt_opacityOrAngleOrCx?: number, opt_modeOrCy?: number|bool|+anychart.graphics.math.Rect|Object, opt_opacityOrMode?: number|+anychart.graphics.math.Rect|Object, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill",
          "!url" : "8.3.0/anychart.graphics.vector#normalizeFill",
          "!doc" : "Normalizes stroke params. Look at {@link anychart.graphics.vector.Shape#fill} params for details."
        },
        "RadialGradientStroke" : {
          "!doc" : "Radial gradient stroke.",
          "!url" : "8.3.0/anychart.graphics.vector.RadialGradientStroke",
          "prototype" : {
            "keys" : {
              "!type" : "[+anychart.graphics.vector.GradientKey|string]",
              "!doc" : "Keys list."
            },
            "fx" : {
              "!type" : "number",
              "!doc" : "Focus X."
            },
            "cy" : {
              "!type" : "number",
              "!doc" : "Center Y."
            },
            "lineCap" : {
              "!type" : "string",
              "!doc" : "Line cap style. More at {@link anychart.graphics.vector.StrokeLineCap}."
            },
            "mode" : {
              "!type" : "+anychart.graphics.math.Rect",
              "!doc" : "Fill mode. See more at"
            },
            "lineJoin" : {
              "!type" : "string",
              "!doc" : "Line join style. More at {@link anychart.graphics.vector.StrokeLineJoin}."
            },
            "dash" : {
              "!type" : "string",
              "!doc" : "Dash settings. Read more at {@link anychart.graphics.vector.Shape#stroke}."
            },
            "fy" : {
              "!type" : "number",
              "!doc" : "Focus Y."
            },
            "cx" : {
              "!type" : "number",
              "!doc" : "Center X."
            },
            "thickness" : {
              "!type" : "number",
              "!doc" : "Line thickness."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            }
          }
        },
        "Rect" : {
          "!doc" : "Rectangle class",
          "!url" : "8.3.0/anychart.graphics.vector.Rect",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "strokeThickness" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#strokeThickness",
              "!doc" : "Stroke thickness setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setWidth" : {
              "!type" : "fn(value: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#setWidth",
              "!doc" : "Sets a width."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "setHeight" : {
              "!type" : "fn(value: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#setHeight",
              "!doc" : "Sets a height."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#fill",
              "!doc" : "Fill settings."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "roundInner" : {
              "!type" : "fn(value: string|number, opt_radiusRightTop?: number, opt_radiusRightBottom?: number, opt_radiusLeftBottom?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#roundInner",
              "!doc" : "Sets corners inner rounding."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "setY" : {
              "!type" : "fn(value: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#setY",
              "!doc" : "Sets Y in parent container."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "setX" : {
              "!type" : "fn(value: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#setX",
              "!doc" : "Sets X in parent container."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "setBounds" : {
              "!type" : "fn(value: +anychart.graphics.math.Rect) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#setBounds",
              "!doc" : "Sets bounds."
            },
            "cut" : {
              "!type" : "fn(value: string|number, opt_radiusRightTop?: number, opt_radiusRightBottom?: number, opt_radiusLeftBottom?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#cut",
              "!doc" : "Sets cut corners."
            },
            "round" : {
              "!type" : "fn(value: string|number, opt_radiusRightTop?: number, opt_radiusRightBottom?: number, opt_radiusLeftBottom?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Rect#round",
              "!doc" : "Sets corners rounding using single value."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "LinearGradient" : {
          "!doc" : "Linear gradient.",
          "!url" : "8.3.0/anychart.graphics.vector.LinearGradient",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.LinearGradient#dispose",
              "!doc" : "Disposes gradient completely, removes from parent layer, null internal links, removes from DOM structure."
            }
          }
        },
        "Stroke" : {
          "!doc" : "Any stroke. @typedef {(string|anychart.graphics.vector.SolidStroke|anychart.graphics.vector.LinearGradientStroke|anychart.graphics.vector.RadialGradientStroke)}",
          "!url" : "8.3.0/anychart.graphics.vector.Stroke"
        },
        "ImageFill" : {
          "!doc" : "Image fill.",
          "!url" : "8.3.0/anychart.graphics.vector.ImageFill",
          "prototype" : {
            "mode" : {
              "!type" : "+anychart.graphics.vector.ImageFillMode|string",
              "!doc" : "Fill mode."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Fill opacity."
            },
            "src" : {
              "!type" : "string",
              "!doc" : "Image src."
            }
          }
        },
        "Layer" : {
          "!doc" : "Layer class. Used to group elements.",
          "!url" : "8.3.0/anychart.graphics.vector.Layer",
          "prototype" : {
            "diamond" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diamond",
              "!doc" : "Draws a diamond set by its circumscribed circle center and radius."
            },
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "hLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hLine",
              "!doc" : "Draws a thick horizontal line set by its circumscribed circle center and radius."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildAt",
              "!doc" : "Removes element from a layer by index."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "triangleLeft" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleLeft",
              "!doc" : "Draws a triangle heading leftwards set by its circumscribed circle center and radius."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "star" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star",
              "!doc" : "Draws multi-pointed star."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "star4" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star4",
              "!doc" : "Draws four-pointed star."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "truncatedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#truncatedRect",
              "!doc" : "Draws rectangle with cut corners."
            },
            "image" : {
              "!type" : "fn(opt_src?: string, opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#image",
              "!doc" : "Invokes {@link anychart.graphics.vector.Image} class constructor."
            },
            "roundedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedRect",
              "!doc" : "Draws rectangle with rounded corners."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#numChildren",
              "!doc" : "Returns the number of children."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "cross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#cross",
              "!doc" : "Draws a cross set by its circumscribed circle center and radius."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "swapChildren" : {
              "!type" : "fn(element1: +anychart.graphics.vector.Element, element2: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildren",
              "!doc" : "Swaps children."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "path" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#path",
              "!doc" : "Invokes {@link anychart.graphics.vector.Path} class constructor."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "swapChildrenAt" : {
              "!type" : "fn(index1: number, index2: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildrenAt",
              "!doc" : "Swaps children by indexes."
            },
            "star10" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star10",
              "!doc" : "Draws ten-pointed star."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "ellipse" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_rx?: number, opt_ry?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#ellipse",
              "!doc" : "Invokes {@link anychart.graphics.vector.Ellipse} class constructor."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "triangleDown" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleDown",
              "!doc" : "Draws a triangle heading downwards set by its circumscribed circle center and radius."
            },
            "addChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChild",
              "!doc" : "Add element to a layer, to the top (maximal index)."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "vLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#vLine",
              "!doc" : "Draws a thick vertical line set by its circumscribed circle center and radius."
            },
            "text" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#text",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "star6" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star6",
              "!doc" : "Draws six-pointed star."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "pie" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#pie",
              "!doc" : "Draws sector as pie chart element."
            },
            "diagonalCross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diagonalCross",
              "!doc" : "Draws a diagonal cross set by its circumscribed circle center and radius."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "addChildAt" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element, index: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChildAt",
              "!doc" : "Adds an element to a layer by index. "
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "donut" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#donut",
              "!doc" : "Draws sector as donut chart element."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#getChildAt",
              "!doc" : "Returns element by index."
            },
            "star7" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star7",
              "!doc" : "Draws seven-pointed star."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "star5" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star5",
              "!doc" : "Draws five-pointed star."
            },
            "indexOfChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#indexOfChild",
              "!doc" : "Looks for an element in a layer and returns index or -1, if not found."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rect" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#rect",
              "!doc" : "Invokes {@link anychart.graphics.vector.Rect} class constructor."
            },
            "roundedInnerRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedInnerRect",
              "!doc" : "Draws rectangle with corners rounded inside."
            },
            "layer" : {
              "!type" : "fn() -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#layer",
              "!doc" : "Invokes {@link anychart.graphics.vector.Layer} class constructor."
            },
            "html" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#html",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor and applies {@link anychart.graphics.vector.Text#htmlText} method"
            },
            "triangleUp" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleUp",
              "!doc" : "Draws a triangle heading upwards set by its circumscribed circle center and radius."
            },
            "forEachChild" : {
              "!type" : "fn(callback: fn(), opt_this?: Object) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#forEachChild",
              "!doc" : "Applies function to all elements in a layer."
            },
            "removeChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChild",
              "!doc" : "Removes element from a layer."
            },
            "circle" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_radius?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#circle",
              "!doc" : "Invokes {@link anychart.graphics.vector.Circle} class constructor."
            },
            "removeChildren" : {
              "!type" : "fn() -> [+anychart.graphics.vector.Element]",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildren",
              "!doc" : "Removes all children from a layer."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "hasChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hasChild",
              "!doc" : "Checks if there is such element in children set."
            },
            "triangleRight" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleRight",
              "!doc" : "Draws a triangle heading rightwards set by its circumscribed circle center and radius."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "!url" : "8.3.0/anychart.graphics.vector",
        "TextSegmentStyle" : {
          "!doc" : "Text segment.",
          "!url" : "8.3.0/anychart.graphics.vector.TextSegmentStyle",
          "prototype" : {
            "color" : {
              "!type" : "string",
              "!doc" : "Color - {@link https://www.w3schools.com/html/html_colors.asp}."
            },
            "decoration" : {
              "!type" : "string",
              "!doc" : "Decoration. More at {@link anychart.graphics.vector.Text.Decoration}."
            },
            "fontFamily" : {
              "!type" : "string",
              "!doc" : "Font family - {@link https://www.w3schools.com/cssref/pr_font_font-family.asp}."
            },
            "fontSize" : {
              "!type" : "string|number",
              "!doc" : "Font size."
            },
            "fontStyle" : {
              "!type" : "string",
              "!doc" : "Font style. More at {@link anychart.graphics.vector.Text.FontStyle}."
            },
            "fontVariant" : {
              "!type" : "string",
              "!doc" : "Font variant. More at {@link anychart.graphics.vector.Text.FontVariant}."
            },
            "fontWeight" : {
              "!type" : "number|string",
              "!doc" : "Font weight - {@link https://www.w3schools.com/cssref/pr_font_weight.asp}."
            },
            "letterSpacing" : {
              "!type" : "string",
              "!doc" : "Letter spacing."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            }
          }
        },
        "PaperSize" : {
          "A5" : {
            "!doc" : "A5 measures 148 * 210 millimeters or 5.83 * 8.27 inches.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "!doc" : "Paper sizes. @enum {string}",
          "A1" : {
            "!doc" : "A1 measures 594 * 841 millimeters or 23.4 * 33.1 inches.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "A0" : {
            "!doc" : "The base A0 size of paper is defined as having an area of 1 m2. Rounded to the nearest millimetre,",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "A3" : {
            "!doc" : "The A3 size print measures 29.7 x 42.0cm, 11.69 x 16.53 inches, if mounted 40.6 x 50.8cm, 15.98 x 20 inches.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "A6" : {
            "!doc" : "A6 measures 105 * 148 millimeters or 4.13 * 5.83 inches. In PostScript, its dimensions are rounded off to 298 * 420 points.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "US_LETTER" : {
            "!doc" : "It measures 8.5 by 11 inches (215.9 mm x 279.4 mm). US Letter size is a recognized standard adopted by the American",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
          "A4" : {
            "!doc" : "The A4 size print measures 21.0 x 29.7cm, 8.27 x 11.69 inches, if mounted 30.3 x 40.6cm, 11.93 x 15.98 inches.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          },
          "A2" : {
            "!doc" : "A2 measures 420 * 594 millimeters or 16.5 * 23.4 inches.",
            "!url" : "8.3.0/anychart.graphics.vector.PaperSize",
            "!type" : "anychart.graphics.vector.PaperSize"
          }
        },
        "Fill" : {
          "!doc" : "Any fill. @typedef {(string|anychart.graphics.vector.ImageFill|anychart.graphics.vector.SolidFill|anychart.graphics.vector.LinearGradientFill|anychart.graphics.vector.RadialGradientFill|anychart.graphics.vector.PatternFill)}",
          "!url" : "8.3.0/anychart.graphics.vector.Fill"
        },
        "normalizeHatchFill" : {
          "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.HatchFill|+anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|Object, opt_color?: string, opt_thickness?: string|number, opt_size?: string|number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill",
          "!url" : "8.3.0/anychart.graphics.vector#normalizeHatchFill",
          "!doc" : "Normalize hatch fill."
        },
        "UnmanagedLayer" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.graphics.vector.UnmanagedLayer",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "content" : {
              "!type" : "fn(opt_value?: string|Element) -> Element|string|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.UnmanagedLayer#content",
              "!doc" : "Inner content setting."
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.UnmanagedLayer",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "TextStyle" : {
          "!doc" : "Format of style the text. May be applied to plain and html texts.",
          "!url" : "8.3.0/anychart.graphics.vector.TextStyle",
          "prototype" : {
            "width" : {
              "!type" : "number|string",
              "!doc" : "Text width."
            },
            "height" : {
              "!type" : "number|string",
              "!doc" : "Text height."
            },
            "vAlign" : {
              "!type" : "+anychart.graphics.vector.Text.VAlign|string",
              "!doc" : "vAlign. More at {@link anychart.graphics.vector.Text.VAlign}."
            },
            "fontFamily" : {
              "!type" : "string",
              "!doc" : "Font family {@link https://www.w3schools.com/cssref/pr_font_font-family.asp}."
            },
            "fontStyle" : {
              "!type" : "+anychart.graphics.vector.Text.FontStyle|string",
              "!doc" : "Read more at"
            },
            "fontWeight" : {
              "!type" : "number|string",
              "!doc" : "Font weight - {@link https://www.w3schools.com/cssref/pr_font_weight.asp}."
            },
            "lineHeight" : {
              "!type" : "string|number",
              "!doc" : "Line height."
            },
            "letterSpacing" : {
              "!type" : "string",
              "!doc" : "Letter spacing of text."
            },
            "fontVariant" : {
              "!type" : "+anychart.graphics.vector.Text.FontVariant|string",
              "!doc" : "Read more at"
            },
            "hAlign" : {
              "!type" : "+anychart.graphics.vector.Text.HAlign|string",
              "!doc" : "hAling. More at {@link anychart.graphics.vector.Text.HAlign}."
            },
            "direction" : {
              "!type" : "+anychart.graphics.vector.Text.Direction|string",
              "!doc" : "Read more at"
            },
            "fontSize" : {
              "!type" : "string|number",
              "!doc" : "Font size. More at {@link anychart.graphics.vector.Text#fontSize}."
            },
            "decoration" : {
              "!type" : "+anychart.graphics.vector.Text.Decoration|string",
              "!doc" : "Read more at"
            },
            "textOverflow" : {
              "!type" : "+anychart.graphics.vector.Text.TextOverflow",
              "!doc" : "Text overflow. More at"
            },
            "wordWrap" : {
              "!type" : "string",
              "!doc" : "Word wrap mode. More at {@link anychart.graphics.vector.Text.WordWrap}."
            },
            "wordBreak" : {
              "!type" : "string",
              "!doc" : "Word break mode. More at {@link anychart.graphics.vector.Text.WordBreak}."
            },
            "selectable" : {
              "!type" : "bool",
              "!doc" : "Whether text can be selected."
            },
            "color" : {
              "!type" : "string",
              "!doc" : "Color. {@link https://www.w3schools.com/html/html_colors.asp}."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            },
            "textIndent" : {
              "!type" : "number",
              "!doc" : "The text-indent property specifies the indentation of the first line in a"
            }
          }
        },
        "Anchor" : {
          "LEFT_BOTTOM" : {
            "!doc" : "The left-bottom anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "RIGHT_BOTTOM" : {
            "!doc" : "The right-bottom anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "RIGHT_CENTER" : {
            "!doc" : "The right-center anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "!doc" : "The list of positions for an anchor.  @enum {string}",
          "CENTER" : {
            "!doc" : "The center anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "AUTO" : {
            "!doc" : "Automatic mode for anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "!url" : "8.3.0/anychart.graphics.vector.Anchor",
          "CENTER_BOTTOM" : {
            "!doc" : "The center-bottom anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "LEFT_CENTER" : {
            "!doc" : "The left-center anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "CENTER_TOP" : {
            "!doc" : "The center-top anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "RIGHT_TOP" : {
            "!doc" : "The right-top anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          },
          "LEFT_TOP" : {
            "!doc" : "The left-top anchor of the element.",
            "!url" : "8.3.0/anychart.graphics.vector.Anchor",
            "!type" : "anychart.graphics.vector.Anchor"
          }
        },
        "PatternFill" : {
          "!doc" : "Pattern fill class.",
          "!url" : "8.3.0/anychart.graphics.vector.PatternFill",
          "prototype" : {
            "diamond" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diamond",
              "!doc" : "Draws a diamond set by its circumscribed circle center and radius."
            },
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "hLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hLine",
              "!doc" : "Draws a thick horizontal line set by its circumscribed circle center and radius."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildAt",
              "!doc" : "Removes element from a layer by index."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "triangleLeft" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleLeft",
              "!doc" : "Draws a triangle heading leftwards set by its circumscribed circle center and radius."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "star" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star",
              "!doc" : "Draws multi-pointed star."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "star4" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star4",
              "!doc" : "Draws four-pointed star."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "truncatedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#truncatedRect",
              "!doc" : "Draws rectangle with cut corners."
            },
            "image" : {
              "!type" : "fn(opt_src?: string, opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#image",
              "!doc" : "Invokes {@link anychart.graphics.vector.Image} class constructor."
            },
            "roundedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedRect",
              "!doc" : "Draws rectangle with rounded corners."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#numChildren",
              "!doc" : "Returns the number of children."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "cross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#cross",
              "!doc" : "Draws a cross set by its circumscribed circle center and radius."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "swapChildren" : {
              "!type" : "fn(element1: +anychart.graphics.vector.Element, element2: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildren",
              "!doc" : "Swaps children."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "path" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#path",
              "!doc" : "Invokes {@link anychart.graphics.vector.Path} class constructor."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "swapChildrenAt" : {
              "!type" : "fn(index1: number, index2: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildrenAt",
              "!doc" : "Swaps children by indexes."
            },
            "star10" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star10",
              "!doc" : "Draws ten-pointed star."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "ellipse" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_rx?: number, opt_ry?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#ellipse",
              "!doc" : "Invokes {@link anychart.graphics.vector.Ellipse} class constructor."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "triangleDown" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleDown",
              "!doc" : "Draws a triangle heading downwards set by its circumscribed circle center and radius."
            },
            "addChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChild",
              "!doc" : "Add element to a layer, to the top (maximal index)."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "vLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#vLine",
              "!doc" : "Draws a thick vertical line set by its circumscribed circle center and radius."
            },
            "text" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#text",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "star6" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star6",
              "!doc" : "Draws six-pointed star."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "pie" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#pie",
              "!doc" : "Draws sector as pie chart element."
            },
            "diagonalCross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diagonalCross",
              "!doc" : "Draws a diagonal cross set by its circumscribed circle center and radius."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "addChildAt" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element, index: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChildAt",
              "!doc" : "Adds an element to a layer by index. "
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "donut" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#donut",
              "!doc" : "Draws sector as donut chart element."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#getChildAt",
              "!doc" : "Returns element by index."
            },
            "star7" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star7",
              "!doc" : "Draws seven-pointed star."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "star5" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star5",
              "!doc" : "Draws five-pointed star."
            },
            "indexOfChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#indexOfChild",
              "!doc" : "Looks for an element in a layer and returns index or -1, if not found."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rect" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#rect",
              "!doc" : "Invokes {@link anychart.graphics.vector.Rect} class constructor."
            },
            "roundedInnerRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedInnerRect",
              "!doc" : "Draws rectangle with corners rounded inside."
            },
            "layer" : {
              "!type" : "fn() -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#layer",
              "!doc" : "Invokes {@link anychart.graphics.vector.Layer} class constructor."
            },
            "html" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#html",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor and applies {@link anychart.graphics.vector.Text#htmlText} method"
            },
            "triangleUp" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleUp",
              "!doc" : "Draws a triangle heading upwards set by its circumscribed circle center and radius."
            },
            "forEachChild" : {
              "!type" : "fn(callback: fn(), opt_this?: Object) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#forEachChild",
              "!doc" : "Applies function to all elements in a layer."
            },
            "removeChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChild",
              "!doc" : "Removes element from a layer."
            },
            "circle" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_radius?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#circle",
              "!doc" : "Invokes {@link anychart.graphics.vector.Circle} class constructor."
            },
            "removeChildren" : {
              "!type" : "fn() -> [+anychart.graphics.vector.Element]",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildren",
              "!doc" : "Removes all children from a layer."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "hasChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hasChild",
              "!doc" : "Checks if there is such element in children set."
            },
            "triangleRight" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleRight",
              "!doc" : "Draws a triangle heading rightwards set by its circumscribed circle center and radius."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "RadialGradientFill" : {
          "!doc" : "Radial gradient fill.",
          "!url" : "8.3.0/anychart.graphics.vector.RadialGradientFill",
          "prototype" : {
            "cx" : {
              "!type" : "number",
              "!doc" : "Center X."
            },
            "cy" : {
              "!type" : "number",
              "!doc" : "Center Y."
            },
            "fx" : {
              "!type" : "number",
              "!doc" : "Focus X."
            },
            "fy" : {
              "!type" : "number",
              "!doc" : "Focus Y."
            },
            "keys" : {
              "!type" : "[+anychart.graphics.vector.GradientKey|string]",
              "!doc" : "Keys list."
            },
            "mode" : {
              "!type" : "+anychart.graphics.math.Rect",
              "!doc" : "Fill mode. See more at"
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Color opacity (0 to 1)."
            }
          }
        },
        "GradientKey" : {
          "!doc" : "Gradient keys.",
          "!url" : "8.3.0/anychart.graphics.vector.GradientKey",
          "prototype" : {
            "color" : {
              "!type" : "string",
              "!doc" : "Key color - {@link https://www.w3schools.com/html/html_colors.asp}."
            },
            "offset" : {
              "!type" : "number",
              "!doc" : "Gradient key value (0 to 1)."
            },
            "opacity" : {
              "!type" : "number",
              "!doc" : "Key color opacity (0 to 1)."
            }
          }
        },
        "Text" : {
          "Direction" : {
            "!doc" : "Text direction. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.Direction",
            "LTR" : {
              "!doc" : "Left to right.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Direction",
              "!type" : "anychart.graphics.vector.Text.Direction"
            },
            "RTL" : {
              "!doc" : "Right to left.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Direction",
              "!type" : "anychart.graphics.vector.Text.Direction"
            }
          },
          "!doc" : "Text class.",
          "FontVariant" : {
            "!doc" : "Defines lowercase. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.FontVariant",
            "NORMAL" : {
              "!doc" : "Leave lowercase as is.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.FontVariant",
              "!type" : "anychart.graphics.vector.Text.FontVariant"
            },
            "SMALL_CAP" : {
              "!doc" : "Make lowercase smaller",
              "!url" : "8.3.0/anychart.graphics.vector.Text.FontVariant",
              "!type" : "anychart.graphics.vector.Text.FontVariant"
            }
          },
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#width",
              "!doc" : "Width setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#height",
              "!doc" : "Height setting."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#vAlign",
              "!doc" : "Vertical align setting."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#fontFamily",
              "!doc" : "Font family setting."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#fontStyle",
              "!doc" : "Font style setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#fontWeight",
              "!doc" : "Font weight setting."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#lineHeight",
              "!doc" : "Line height setting."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "x" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.T#xt#x",
              "!doc" : "X coordinate setting."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "path" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Path) -> +anychart.graphics.vector.Path|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#path",
              "!doc" : "Path element for the text."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "htmlText" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#htmlText",
              "!doc" : "HTML format."
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#letterSpacing",
              "!doc" : "Letter spacing setting."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#fontVariant",
              "!doc" : "Font variant setting."
            },
            "style" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.TextStyle|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#style",
              "!doc" : "Text style settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#hAlign",
              "!doc" : "Horizontal align setting."
            },
            "direction" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#direction",
              "!doc" : "Text direction setting."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#text",
              "!doc" : "Text setting."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#fontSize",
              "!doc" : "Font size setting."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "decoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#decoration",
              "!doc" : "Text decoration setting."
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#textOverflow",
              "!doc" : "Text overflow setting."
            },
            "y" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/a#ychart.graphics.vector.Text#y",
              "!doc" : "Y coordinate setting."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.WordWrap) -> string|+anychart.graphics.vector.Text.WordWrap|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#wordWrap",
              "!doc" : "Text word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.WordBreak) -> string|+anychart.graphics.vector.Text.WordBreak|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#wordBreak",
              "!doc" : "Text word-break mode."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#selectable",
              "!doc" : "Text selection setting."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "color" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#color",
              "!doc" : "Color setting."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "opacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#opacity",
              "!doc" : "Opacity setting."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Text#textIndent",
              "!doc" : "Text indent setting."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          },
          "VAlign" : {
            "!doc" : "Text vertical align. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.VAlign",
            "BOTTOM" : {
              "!doc" : "Vertical align bottom.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.VAlign",
              "!type" : "anychart.graphics.vector.Text.VAlign"
            },
            "MIDDLE" : {
              "!doc" : "Vertical align middle.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.VAlign",
              "!type" : "anychart.graphics.vector.Text.VAlign"
            },
            "TOP" : {
              "!doc" : "Vertical align top.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.VAlign",
              "!type" : "anychart.graphics.vector.Text.VAlign"
            }
          },
          "WordWrap" : {
            "!doc" : "Text word-wrap mode. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.WordWrap",
            "BREAK_WORD" : {
              "!doc" : "Indicates that normally unbreakable words may be broken at arbitrary points if there are no otherwise acceptable break points in the line.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.WordWrap",
              "!type" : "anychart.graphics.vector.Text.WordWrap"
            },
            "NORMAL" : {
              "!doc" : "Indicates that lines may only break at normal word break points.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.WordWrap",
              "!type" : "anychart.graphics.vector.Text.WordWrap"
            }
          },
          "WordBreak" : {
            "!doc" : "Text word-break mode. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.WordBreak",
            "BREAK_ALL" : {
              "!doc" : "Word breaks may be inserted between any character.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.WordBreak",
              "!type" : "anychart.graphics.vector.Text.WordBreak"
            },
            "KEEP_ALL" : {
              "!doc" : "Don't allow word breaks for CJK text. Non-CJK text behavior is the same as for normal.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.WordBreak",
              "!type" : "anychart.graphics.vector.Text.WordBreak"
            },
            "NORMAL" : {
              "!doc" : "Break words according to their usual rules.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.WordBreak",
              "!type" : "anychart.graphics.vector.Text.WordBreak"
            }
          },
          "FontStyle" : {
            "!doc" : "Font style. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.FontStyle",
            "ITALIC" : {
              "!doc" : "Italic.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.FontStyle",
              "!type" : "anychart.graphics.vector.Text.FontStyle"
            },
            "NORMAL" : {
              "!doc" : "Normal.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.FontStyle",
              "!type" : "anychart.graphics.vector.Text.FontStyle"
            },
            "OBLIQUE" : {
              "!doc" : "Oblique.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.FontStyle",
              "!type" : "anychart.graphics.vector.Text.FontStyle"
            }
          },
          "HAlign" : {
            "!doc" : "Text horizontal align. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
            "CENTER" : {
              "!doc" : "The inline contents are centered within the line box.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
              "!type" : "anychart.graphics.vector.Text.HAlign"
            },
            "END" : {
              "!doc" : "The same as right if direction is left-to-right and left if direction is right-to-left.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
              "!type" : "anychart.graphics.vector.Text.HAlign"
            },
            "LEFT" : {
              "!doc" : "Aligns the text to the left.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
              "!type" : "anychart.graphics.vector.Text.HAlign"
            },
            "RIGHT" : {
              "!doc" : "Aligns the text to the right.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
              "!type" : "anychart.graphics.vector.Text.HAlign"
            },
            "START" : {
              "!doc" : "The same as left if direction is left-to-right and right if direction is right-to-left.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.HAlign",
              "!type" : "anychart.graphics.vector.Text.HAlign"
            }
          },
          "!url" : "8.3.0/anychart.graphics.vector.Text",
          "TextOverflow" : {
            "!doc" : "Defines visibility in block, of text can't be shown in the area. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.TextOverflow",
            "CLIP" : {
              "!doc" : "If height and width is set and text doesn't fit - it will be clipped.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.TextOverflow",
              "!type" : "anychart.graphics.vector.Text.TextOverflow"
            },
            "ELLIPSIS" : {
              "!doc" : "Text is clipped too, but with ellipsis in the end.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.TextOverflow",
              "!type" : "anychart.graphics.vector.Text.TextOverflow"
            }
          },
          "Decoration" : {
            "!doc" : "Text decoration. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
            "BLINK" : {
              "!doc" : "Blinking text. This value is not supported by some browser and is discussed in CSS3, animation is recommended instead.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
              "!type" : "anychart.graphics.vector.Text.Decoration"
            },
            "LINE_THROUGH" : {
              "!doc" : "Line through decoration.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
              "!type" : "anychart.graphics.vector.Text.Decoration"
            },
            "NONE" : {
              "!doc" : "Cancels all decorations, including links underline.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
              "!type" : "anychart.graphics.vector.Text.Decoration"
            },
            "OVERLINE" : {
              "!doc" : "Overline decoration.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
              "!type" : "anychart.graphics.vector.Text.Decoration"
            },
            "UNDERLINE" : {
              "!doc" : "Underline decoration.",
              "!url" : "8.3.0/anychart.graphics.vector.Text.Decoration",
              "!type" : "anychart.graphics.vector.Text.Decoration"
            }
          }
        },
        "Cursor" : {
          "EW_RESIZE" : {
            "!doc" : "EW-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "!doc" : "Defines the type of the cursor. @enum {string}",
          "NS_RESIZE" : {
            "!doc" : "NS-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "HELP" : {
            "!doc" : "Help type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "NWSE_RESIZE" : {
            "!doc" : "NWSE-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "S_RESIZE" : {
            "!doc" : "S-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "!url" : "8.3.0/anychart.graphics.vector.Cursor",
          "NESW_RESIZE" : {
            "!doc" : "NESW-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "NW_RESIZE" : {
            "!doc" : "NW-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "TEXT" : {
            "!doc" : "Text type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "E_RESIZE" : {
            "!doc" : "E-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "SW_RESIZE" : {
            "!doc" : "SW-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "DEFAULT" : {
            "!doc" : "Default type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "NE_RESIZE" : {
            "!doc" : "NE-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "POINTER" : {
            "!doc" : "Pointer type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "WAIT" : {
            "!doc" : "Wait type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "N_RESIZE" : {
            "!doc" : "N-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "CROSSHAIR" : {
            "!doc" : "Crosshair type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "SE_RESIZE" : {
            "!doc" : "SE-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "W_RESIZE" : {
            "!doc" : "W-resize type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          },
          "MOVE" : {
            "!doc" : "Move type",
            "!url" : "8.3.0/anychart.graphics.vector.Cursor",
            "!type" : "anychart.graphics.vector.Cursor"
          }
        },
        "Clip" : {
          "!doc" : "Class representing independent clip, that can be applied to any element.",
          "!url" : "8.3.0/anychart.graphics.vector.Clip",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Clip#dispose",
              "!doc" : "Disposes a clip. Removes it and its children from defs, clears the clip for managed elements."
            },
            "shape" : {
              "!type" : "fn(opt_value?: [number]|+anychart.graphics.vector.Shape|+anychart.graphics.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Shape|+anychart.graphics.vector.Clip",
              "!url" : "8.3.0/anychart.graphics.vector.Clip#shape",
              "!doc" : "Shape settings for the clip."
            }
          }
        },
        "Circle" : {
          "!doc" : "Circle Class. Inherited from Ellipse.",
          "!url" : "8.3.0/anychart.graphics.vector.Circle",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "strokeThickness" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#strokeThickness",
              "!doc" : "Stroke thickness setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "radiusY" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#radiusY",
              "!doc" : "Y radius setting."
            },
            "centerY" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#centerY",
              "!doc" : "Center Y setting."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "radius" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Circle#radius",
              "!doc" : "Circle radius."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "centerX" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#centerX",
              "!doc" : "Center X setting."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "center" : {
              "!type" : "fn(opt_value?: +anychart.math.Coordinate) -> +anychart.math.Coordinate|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#center",
              "!doc" : "Center coordinates settings."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#fill",
              "!doc" : "Fill settings."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "setRadius" : {
              "!type" : "fn(rx: number, ry: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#setRadius",
              "!doc" : "Sets radius."
            },
            "radiusX" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Ellipse#radiusX",
              "!doc" : "X radius setting."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "Image" : {
          "!doc" : "Image primitive.",
          "!url" : "8.3.0/anychart.graphics.vector.Image",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "width" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#width",
              "!doc" : "Width setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Image.Align) -> +anychart.graphics.vector.Image.Align|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#align",
              "!doc" : "Align setting."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "height" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#height",
              "!doc" : "Height setting."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "x" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#x",
              "!doc" : "X coordinate setting."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "src" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#src",
              "!doc" : "Image source setting."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "fittingMode" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Image.Fitting|string) -> +anychart.graphics.vector.Image.Fitting|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Image#fittingMode",
              "!doc" : "Fitting mode."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "y" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/a#ychart.graphics.vector.Image#y",
              "!doc" : "Y coordinate setting."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          },
          "Fitting" : {
            "!doc" : "Fitting mode. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Image.Fitting",
            "MEET" : {
              "!doc" : "Aspect ratio is preserved.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Fitting",
              "!type" : "anychart.graphics.vector.Image.Fitting"
            },
            "SLICE" : {
              "!doc" : "Aspect ratio is preserved.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Fitting",
              "!type" : "anychart.graphics.vector.Image.Fitting"
            }
          },
          "Align" : {
            "!doc" : "Align enumeration. @enum {string}",
            "X_MAX_Y_MAX" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MIN_Y_MID" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MID_Y_MID" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MID_Y_MIN" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
            "X_MIN_Y_MIN" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "NONE" : {
              "!doc" : "Do not force uniform scaling. Scale the graphic content of the given element non-uniformly if necessary such",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MAX_Y_MIN" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MID_Y_MAX" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MAX_Y_MID" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            },
            "X_MIN_Y_MAX" : {
              "!doc" : "Force uniform scaling.",
              "!url" : "8.3.0/anychart.graphics.vector.Image.Align",
              "!type" : "anychart.graphics.vector.Image.Align"
            }
          }
        },
        "Shape" : {
          "!doc" : "Base class for all vector elements.",
          "!url" : "8.3.0/anychart.graphics.vector.Shape",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "strokeThickness" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#strokeThickness",
              "!doc" : "Stroke thickness setting."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Shape#fill",
              "!doc" : "Fill settings."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Shape",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "HatchFill" : {
          "!doc" : "HatchFill is a special pattern fill with predefined set of a primitives. Sets of a primitives does numbered and",
          "!url" : "8.3.0/anychart.graphics.vector.HatchFill",
          "prototype" : {
            "diamond" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diamond",
              "!doc" : "Draws a diamond set by its circumscribed circle center and radius."
            },
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "hLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hLine",
              "!doc" : "Draws a thick horizontal line set by its circumscribed circle center and radius."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildAt",
              "!doc" : "Removes element from a layer by index."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "triangleLeft" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleLeft",
              "!doc" : "Draws a triangle heading leftwards set by its circumscribed circle center and radius."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "star" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star",
              "!doc" : "Draws multi-pointed star."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "star4" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star4",
              "!doc" : "Draws four-pointed star."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "truncatedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#truncatedRect",
              "!doc" : "Draws rectangle with cut corners."
            },
            "image" : {
              "!type" : "fn(opt_src?: string, opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#image",
              "!doc" : "Invokes {@link anychart.graphics.vector.Image} class constructor."
            },
            "roundedRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedRect",
              "!doc" : "Draws rectangle with rounded corners."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#numChildren",
              "!doc" : "Returns the number of children."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "cross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#cross",
              "!doc" : "Draws a cross set by its circumscribed circle center and radius."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.HatchFill|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "swapChildren" : {
              "!type" : "fn(element1: +anychart.graphics.vector.Element, element2: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildren",
              "!doc" : "Swaps children."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "path" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#path",
              "!doc" : "Invokes {@link anychart.graphics.vector.Path} class constructor."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "swapChildrenAt" : {
              "!type" : "fn(index1: number, index2: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#swapChildrenAt",
              "!doc" : "Swaps children by indexes."
            },
            "star10" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star10",
              "!doc" : "Draws ten-pointed star."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "ellipse" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_rx?: number, opt_ry?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#ellipse",
              "!doc" : "Invokes {@link anychart.graphics.vector.Ellipse} class constructor."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "triangleDown" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleDown",
              "!doc" : "Draws a triangle heading downwards set by its circumscribed circle center and radius."
            },
            "addChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChild",
              "!doc" : "Add element to a layer, to the top (maximal index)."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "vLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#vLine",
              "!doc" : "Draws a thick vertical line set by its circumscribed circle center and radius."
            },
            "text" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#text",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "star6" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star6",
              "!doc" : "Draws six-pointed star."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "pie" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#pie",
              "!doc" : "Draws sector as pie chart element."
            },
            "diagonalCross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#diagonalCross",
              "!doc" : "Draws a diagonal cross set by its circumscribed circle center and radius."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "addChildAt" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element, index: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#addChildAt",
              "!doc" : "Adds an element to a layer by index. "
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "donut" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#donut",
              "!doc" : "Draws sector as donut chart element."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#getChildAt",
              "!doc" : "Returns element by index."
            },
            "star7" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star7",
              "!doc" : "Draws seven-pointed star."
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "star5" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#star5",
              "!doc" : "Draws five-pointed star."
            },
            "indexOfChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#indexOfChild",
              "!doc" : "Looks for an element in a layer and returns index or -1, if not found."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rect" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#rect",
              "!doc" : "Invokes {@link anychart.graphics.vector.Rect} class constructor."
            },
            "roundedInnerRect" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#roundedInnerRect",
              "!doc" : "Draws rectangle with corners rounded inside."
            },
            "layer" : {
              "!type" : "fn() -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#layer",
              "!doc" : "Invokes {@link anychart.graphics.vector.Layer} class constructor."
            },
            "html" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#html",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} class constructor and applies {@link anychart.graphics.vector.Text#htmlText} method"
            },
            "triangleUp" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleUp",
              "!doc" : "Draws a triangle heading upwards set by its circumscribed circle center and radius."
            },
            "forEachChild" : {
              "!type" : "fn(callback: fn(), opt_this?: Object) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#forEachChild",
              "!doc" : "Applies function to all elements in a layer."
            },
            "removeChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChild",
              "!doc" : "Removes element from a layer."
            },
            "circle" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_radius?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#circle",
              "!doc" : "Invokes {@link anychart.graphics.vector.Circle} class constructor."
            },
            "removeChildren" : {
              "!type" : "fn() -> [+anychart.graphics.vector.Element]",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#removeChildren",
              "!doc" : "Removes all children from a layer."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "hasChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#hasChild",
              "!doc" : "Checks if there is such element in children set."
            },
            "triangleRight" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Layer#triangleRight",
              "!doc" : "Draws a triangle heading rightwards set by its circumscribed circle center and radius."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          },
          "HatchFillType" : {
            "GRID" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_25" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "!doc" : "Hatch Fill types. @enum {string}",
            "CHECKER_BOARD" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "WEAVE" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_60" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DASHED_HORIZONTAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_90" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "SOLID_DIAMOND" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "HORIZONTAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "BACKWARD_DIAGONAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_20" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DASHED_BACKWARD_DIAGONAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_80" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "HORIZONTAL_BRICK" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
            "VERTICAL_BRICK" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_50" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_05" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DIVOT" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "VERTICAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_40" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "ZIG_ZAG" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "FORWARD_DIAGONAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "CONFETTI" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PLAID" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DASHED_FORWARD_DIAGONAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_30" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_75" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DIAGONAL_BRICK" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DASHED_VERTICAL" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_70" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "PERCENT_10" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            },
            "DIAGONAL_CROSS" : {
              "!doc" : "",
              "!url" : "8.3.0/anychart.graphics.vector.HatchFill.HatchFillType",
              "!type" : "anychart.graphics.vector.HatchFill.HatchFillType"
            }
          }
        },
        "Element" : {
          "!doc" : "Abstract class for all vector elements, such as groups and primitives.",
          "!url" : "8.3.0/anychart.graphics.vector.Element",
          "prototype" : {
            "getAbsoluteWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
              "!doc" : "Returns width within root bounds."
            },
            "getAbsoluteHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
              "!doc" : "Returns height within root bounds."
            },
            "getAbsoluteY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
              "!doc" : "Returns an absolute Y (root element coordinate system)."
            },
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
              "!doc" : "Returns the width."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
              "!doc" : "Returns the current transformation matrix."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
              "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
              "!doc" : "Moves a shape taking an account the current transformation."
            },
            "hasParent" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
              "!doc" : "Whether parent element is set."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
              "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
              "!doc" : "Clipping setting."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
              "!doc" : "Sets the transformation matrix."
            },
            "parent" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
              "!doc" : "Parent layer."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
              "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
              "!doc" : "Disposes element completely."
            },
            "disableStrokeScaling" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
              "!doc" : "Vector effect property"
            },
            "attr" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
              "!doc" : "Attribute setting"
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#id",
              "!doc" : "Element identifier"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
              "!doc" : "Removes all listeners from this listenable."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
              "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Element#unlistenByKey",
              "!doc" : "Removes an event listener which was added with listen() by the key returned by listen()."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
              "!doc" : "Dragging setting."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
              "!doc" : "Returns the current rotation angle in degrees."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
              "!doc" : "Adds an event listener."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
              "!doc" : "Returns Y in the coordinate system of the parent."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
              "!doc" : "Visibility flag"
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
              "!doc" : "Rotates a shape around the given point."
            },
            "getAbsoluteBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
              "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
            },
            "cursor" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
              "!doc" : "Cursor type."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
              "!doc" : "Current element removes itself from the parent layer."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
              "!doc" : "Pointer events setting."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
              "!doc" : "Description setting"
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
              "!doc" : "Returns X in the coordinate system of the parent."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
              "!doc" : "Returns the height."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
              "!doc" : "Combines the current transformation with the given transformation matrix."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#title",
              "!doc" : "Title setting"
            },
            "getAbsoluteX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
              "!doc" : "Returns an absolute X (root element coordinate system)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
              "!doc" : "Z-index setting."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
              "!doc" : "Returns the bounds."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
              "!doc" : "Rotates a shape around the given rotation point."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
              "!doc" : "Stage object (to which the given element is bound)."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
              "!doc" : "Returns DOM element if element is rendered."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
              "!doc" : "Rotates a shape around the given anchor."
            }
          }
        },
        "Stage" : {
          "!doc" : "This class provide tools for cross-browser display with the single interface for both (SVG and VML).",
          "!url" : "8.3.0/anychart.graphics.vector.Stage",
          "prototype" : {
            "diamond" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#diamond",
              "!doc" : "Draws a diamond set by it circumscribed circle center and radius."
            },
            "getContainerElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getContainerElement",
              "!doc" : "Returns stage container element."
            },
            "getPngBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getPngBase64String",
              "!doc" : "Returns PNG as base64 string."
            },
            "hLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#hLine",
              "!doc" : "Draws a thick horizontal line set by its circumscribed circle center and radius."
            },
            "width" : {
              "!type" : "fn(opt_value?: string|number) -> number|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#width",
              "!doc" : "Stage width."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#removeChildAt",
              "!doc" : "Removes an element by index."
            },
            "triangleLeft" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#triangleLeft",
              "!doc" : "Draws a triangle heading leftwards set by it circumscribed circle center and radius."
            },
            "getTransformationMatrix" : {
              "!type" : "fn() -> [number]",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getTransformationMatrix",
              "!doc" : "Returns transformation matrix."
            },
            "star" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star",
              "!doc" : "Draws multi-pointed star."
            },
            "setPosition" : {
              "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#setPosition",
              "!doc" : "Sets top left corner coordinates of root layer (with transformation,in parent coordinate system)."
            },
            "star4" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star4",
              "!doc" : "Draws four-pointed star."
            },
            "translate" : {
              "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#translate",
              "!doc" : "Moves root layer taking transformation into account."
            },
            "height" : {
              "!type" : "fn(opt_value?: string|number) -> number|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#height",
              "!doc" : "Stage height."
            },
            "getJpgBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getJpgBase64String",
              "!doc" : "Returns JPG as base64 string."
            },
            "shareAsPng" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#shareAsPng",
              "!doc" : "Shares a stage as a PNG file and returns a link to the shared image."
            },
            "createClip" : {
              "!type" : "fn(opt_value?: [number]|+anychart.graphics.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Clip",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#createClip",
              "!doc" : "Creates a clip element using single value."
            },
            "scale" : {
              "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#scale",
              "!doc" : "Scales root layer in parent coordinates system. Scaling center is set in the parent system too."
            },
            "listenOnce" : {
              "!type" : "fn(type: string|+anychart.graphics.vector.Stage.EventType, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#listenOnce",
              "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
            },
            "clip" : {
              "!type" : "fn(opt_value?: +anychart.graphics.math.Rect) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#clip",
              "!doc" : "Gets clip bounds."
            },
            "image" : {
              "!type" : "fn(opt_src?: string, opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Image",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#image",
              "!doc" : "Invokes {@link anychart.graphics.vector.Image} constructor."
            },
            "isRendering" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#isRendering",
              "!doc" : "Indicates if stage is in rendering process."
            },
            "getPdfBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getPdfBase64String",
              "!doc" : "Returns PDF as base64 string."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#numChildren",
              "!doc" : "A number of stage children."
            },
            "setTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#setTransformationMatrix",
              "!doc" : "Sets transformation matrix."
            },
            "cross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#cross",
              "!doc" : "Draws a cross defined by a circumscribed circle."
            },
            "saveAsPng" : {
              "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#saveAsPng",
              "!doc" : "Saves the current stage as PNG Image."
            },
            "parent" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#parent",
              "!doc" : "Returns self."
            },
            "swapChildren" : {
              "!type" : "fn(element1: +anychart.graphics.vector.Element, element2: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#swapChildren",
              "!doc" : "Swaps two children."
            },
            "suspend" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#suspend",
              "!doc" : "Suspends rendering (changes instant to suspended)."
            },
            "unlisten" : {
              "!type" : "fn(type: string|+anychart.graphics.vector.Stage.EventType, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#unlisten",
              "!doc" : "Removes a listener added with {@link anychart.graphics.vector.Stage#listen} or {@link anychart.graphics.vector.Stage#listenOnce} methods."
            },
            "dispose" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#dispose",
              "!doc" : "Disposes stage."
            },
            "path" : {
              "!type" : "fn() -> +anychart.graphics.vector.Path",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#path",
              "!doc" : "Invokes {@link anychart.graphics.vector.Path} constructor."
            },
            "saveAsPdf" : {
              "!type" : "fn(opt_paperSize?: string, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#saveAsPdf",
              "!doc" : "Saves the current stage as PDF Document."
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#id",
              "!doc" : "Stage identifier."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#removeAllListeners",
              "!doc" : "Removes all listeners from an object. You can also optionally remove listeners of some particular type."
            },
            "asyncMode" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#asyncMode",
              "!doc" : "Stage rendering mode."
            },
            "swapChildrenAt" : {
              "!type" : "fn(index1: number, index2: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#swapChildrenAt",
              "!doc" : "Swaps two children by id."
            },
            "star10" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star10",
              "!doc" : "Draws ten-pointed star."
            },
            "scaleByAnchor" : {
              "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#scaleByAnchor",
              "!doc" : "Scales root layer in parent coordinates system. Scaling center is set by root layer anchor."
            },
            "saveAsSvg" : {
              "!type" : "fn(opt_value?: string|number, opt_value?: bool|number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#saveAsSvg",
              "!doc" : "Saves the stage as SVG Image."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#unlistenByKey",
              "!doc" : "Removes an event listener which was added with {@link anychart.graphics.vector.Stage#listen} by the key returned by {@link anychart.graphics.vector.Stage#listen} or {@link anychart.graphics.vector.Stage#listenOnce}."
            },
            "getRotationAngle" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getRotationAngle",
              "!doc" : "Returns rotation angle in degrees."
            },
            "ellipse" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_rx?: number, opt_ry?: number) -> +anychart.graphics.vector.Ellipse",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#ellipse",
              "!doc" : "Invokes {@link anychart.graphics.vector.Ellipse} constructor."
            },
            "listen" : {
              "!type" : "fn(type: string|+anychart.graphics.vector.Stage.EventType, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#listen",
              "!doc" : "Adds an event listener to a stage."
            },
            "getY" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getY",
              "!doc" : "Returns Y of top left corner."
            },
            "triangleDown" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#triangleDown",
              "!doc" : "Draws a triangle heading downwards set by it circumscribed circle center and radius."
            },
            "addChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#addChild",
              "!doc" : "Adds an element."
            },
            "visible" : {
              "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#visible",
              "!doc" : "Switch flag of stage visibility."
            },
            "getDomWrapper" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getDomWrapper",
              "!doc" : "Returns a DIV wrapper that contains stage and other utilitarian DOM elements."
            },
            "setRotation" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#setRotation",
              "!doc" : "Rotates root layer around a point."
            },
            "saveAsJpg" : {
              "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#saveAsJpg",
              "!doc" : "Saves the current stage as JPG Image."
            },
            "vLine" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#vLine",
              "!doc" : "Draws a thick vertical line set by its circumscribed circle center and radius."
            },
            "text" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#text",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} constructor."
            },
            "star6" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star6",
              "!doc" : "Draws six-pointed star."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#remove",
              "!doc" : "Removes everything."
            },
            "pie" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#pie",
              "!doc" : "Draws arc as pie chart element."
            },
            "diagonalCross" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#diagonalCross",
              "!doc" : "Draws a diagonal cross set by it circumscribed circle center and radius."
            },
            "isSuspended" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#isSuspended",
              "!doc" : "Returns rendering state (true - suspended, false - instant)."
            },
            "addChildAt" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element, index: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#addChildAt",
              "!doc" : "Adds an element by index."
            },
            "desc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#desc",
              "!doc" : "Description attribute for SVG structure."
            },
            "getX" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getX",
              "!doc" : "Returns X of top left corner."
            },
            "shareAsJpg" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#shareAsJpg",
              "!doc" : "Share a stage as a JPG and return link to shared image."
            },
            "donut" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#donut",
              "!doc" : "Draws arc as donut chart element."
            },
            "appendTransformationMatrix" : {
              "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#appendTransformationMatrix",
              "!doc" : "Combines current transformation with another."
            },
            "title" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#title",
              "!doc" : "Title attribute for SVG structure."
            },
            "pattern" : {
              "!type" : "fn(bounds: +anychart.graphics.math.Rect) -> +anychart.graphics.vector.PatternFill",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#pattern",
              "!doc" : "Invokes {@link anychart.graphics.vector.PatternFill}."
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getChildAt",
              "!doc" : "Returns an element by index."
            },
            "star7" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star7",
              "!doc" : "Draws seven-pointed star."
            },
            "star5" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#star5",
              "!doc" : "Draws five-pointed star."
            },
            "hatchFill" : {
              "!type" : "fn(opt_type?: +anychart.graphics.vector.HatchFill.HatchFillType, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.HatchFill",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#hatchFill",
              "!doc" : "Invokes {@link anychart.graphics.vector.HatchFill} constructor."
            },
            "indexOfChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> number",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#indexOfChild",
              "!doc" : "Returns index of a child."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#print",
              "!doc" : "Print stage."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.graphics.math.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getBounds",
              "!doc" : "Returns bounds."
            },
            "rect" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Rect",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#rect",
              "!doc" : "Invokes {@link anychart.graphics.vector.Rect} constructor."
            },
            "shareAsPdf" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#shareAsPdf",
              "!doc" : "Share a stage as a PDF and return link to shared image."
            },
            "shareAsSvg" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string, opt_filename?: string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#shareAsSvg",
              "!doc" : "Share a stage as a SVG and return link to shared image."
            },
            "resize" : {
              "!type" : "fn(width: number|string, height: number|string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#resize",
              "!doc" : "Stage resize. Anything drawn on stage must fit in it."
            },
            "layer" : {
              "!type" : "fn() -> +anychart.graphics.vector.Layer",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#layer",
              "!doc" : "Invokes {@link anychart.graphics.vector.Layer} constructor."
            },
            "html" : {
              "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#html",
              "!doc" : "Invokes {@link anychart.graphics.vector.Text} and applies {@link anychart.graphics.vector.Text#htmlText} method"
            },
            "getSvgBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getSvgBase64String",
              "!doc" : "Returns SVG as base64 string."
            },
            "triangleUp" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#triangleUp",
              "!doc" : "Draws a triangle heading upwards set by its circumscribed circle center and radius."
            },
            "toSvg" : {
              "!type" : "fn(opt_value?: string|number, opt_value?: bool|number) -> string",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#toSvg",
              "!doc" : "Returns SVG string"
            },
            "forEachChild" : {
              "!type" : "fn(callback: fn(), opt_this?: Object) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#forEachChild",
              "!doc" : "Applies function to all children."
            },
            "removeChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> +anychart.graphics.vector.Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#removeChild",
              "!doc" : "Removes an element."
            },
            "circle" : {
              "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_radius?: number) -> +anychart.graphics.vector.Circle",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#circle",
              "!doc" : "Invokes {@link anychart.graphics.vector.Circle} constructor."
            },
            "removeChildren" : {
              "!type" : "fn() -> [+anychart.graphics.vector.Element]",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#removeChildren",
              "!doc" : "Removes all elements."
            },
            "data" : {
              "!type" : "fn(opt_value?: Object) -> Object|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#data",
              "!doc" : "Returns stage JSON. Serializes stage and all its object to JSON."
            },
            "rotate" : {
              "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#rotate",
              "!doc" : "Rotates root layer."
            },
            "maxResizeDelay" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#maxResizeDelay",
              "!doc" : "Getter for max delay."
            },
            "rotateByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#rotateByAnchor",
              "!doc" : "Rotates root layer around an anchor."
            },
            "getStage" : {
              "!type" : "fn() -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#getStage",
              "!doc" : "Returns self."
            },
            "domElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#domElement",
              "!doc" : "Returns stage root DOM element."
            },
            "container" : {
              "!type" : "fn(opt_value?: Element) -> Element|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#container",
              "!doc" : "Container settings."
            },
            "credits" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.StageCredits|+anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#credits",
              "!doc" : "Credits settings"
            },
            "hasChild" : {
              "!type" : "fn(element: +anychart.graphics.vector.Element) -> bool",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#hasChild",
              "!doc" : "Checks if there is such element in children set."
            },
            "triangleRight" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#triangleRight",
              "!doc" : "Draws a triangle heading rightwards set by it circumscribed circle center and radius."
            },
            "setRotationByAnchor" : {
              "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#setRotationByAnchor",
              "!doc" : "Rotates root layer around an anchor."
            },
            "resume" : {
              "!type" : "fn(opt_force?: bool) -> +anychart.graphics.vector.Stage",
              "!url" : "8.3.0/anychart.graphics.vector.Stage#resume",
              "!doc" : "Removes suspend state and applies all changes in sync (if any)."
            }
          },
          "EventType" : {
            "!doc" : "Stage events. @enum {string}",
            "!url" : "8.3.0/anychart.graphics.vector.Stage.EventType",
            "RENDER_FINISH" : {
              "!doc" : "Rendering end. Called when all DOM-elements are created and added to the Document, and before loading images,",
              "!url" : "8.3.0/anychart.graphics.vector.Stage.EventType",
              "!type" : "anychart.graphics.vector.Stage.EventType"
            },
            "RENDER_START" : {
              "!doc" : "Rendering start. Called before changes of the DOM start.",
              "!url" : "8.3.0/anychart.graphics.vector.Stage.EventType",
              "!type" : "anychart.graphics.vector.Stage.EventType"
            },
            "STAGE_RENDERED" : {
              "!doc" : "Called when all external resources used on the Stage are loaded.",
              "!url" : "8.3.0/anychart.graphics.vector.Stage.EventType",
              "!type" : "anychart.graphics.vector.Stage.EventType"
            },
            "STAGE_RESIZE" : {
              "!doc" : "Called when the Stage is resized, the container is resized with percentage values of width and height, and the width and height values are changed.",
              "!url" : "8.3.0/anychart.graphics.vector.Stage.EventType",
              "!type" : "anychart.graphics.vector.Stage.EventType"
            }
          }
        },
        "vml" : {
          "Text" : {
            "!doc" : "A class for text formatting. Processes plain text and HTML text.",
            "!url" : "8.3.0/anychart.graphics.vector.vml.Text",
            "prototype" : {
              "getAbsoluteWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteWidth",
                "!doc" : "Returns width within root bounds."
              },
              "getAbsoluteHeight" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteHeight",
                "!doc" : "Returns height within root bounds."
              },
              "getAbsoluteY" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteY",
                "!doc" : "Returns an absolute Y (root element coordinate system)."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#width",
                "!doc" : "Width setting."
              },
              "getWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getWidth",
                "!doc" : "Returns the width."
              },
              "getTransformationMatrix" : {
                "!type" : "fn() -> [number]",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getTransformationMatrix",
                "!doc" : "Returns the current transformation matrix."
              },
              "setPosition" : {
                "!type" : "fn(x: number, y: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#setPosition",
                "!doc" : "Sets top left corner of a shape (transformation taken into account) in the coordinate system of the parent."
              },
              "translate" : {
                "!type" : "fn(tx: number, ty: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#translate",
                "!doc" : "Moves a shape taking an account the current transformation."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#height",
                "!doc" : "Height setting."
              },
              "hasParent" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.graphics.vector.Element#hasParent",
                "!doc" : "Whether parent element is set."
              },
              "scale" : {
                "!type" : "fn(sx: number, sy: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#scale",
                "!doc" : "Scales a shape. Scaling center is set in the coordinate system of the parent."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.graphics.vector.Element#listenOnce",
                "!doc" : "Adds an event listener that is removed automatically after the listener fired once."
              },
              "clip" : {
                "!type" : "fn(opt_value?: +anychart.graphics.math.Rect|string) -> +anychart.graphics.math.Rect|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#clip",
                "!doc" : "Clipping setting."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#vAlign",
                "!doc" : "Vertical align setting."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#fontFamily",
                "!doc" : "Font family setting."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#fontStyle",
                "!doc" : "Font style setting."
              },
              "setTransformationMatrix" : {
                "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#setTransformationMatrix",
                "!doc" : "Sets the transformation matrix."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#fontWeight",
                "!doc" : "Font weight setting."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#lineHeight",
                "!doc" : "Line height setting."
              },
              "parent" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#parent",
                "!doc" : "Parent layer."
              },
              "x" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.T#xt#x",
                "!doc" : "X coordinate setting."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.graphics.vector.Element#unlisten",
                "!doc" : "Removes an event listener which was added with listen() or listenOnce()."
              },
              "dispose" : {
                "!type" : "fn()",
                "!url" : "8.3.0/anychart.graphics.vector.Element#dispose",
                "!doc" : "Disposes element completely."
              },
              "disableStrokeScaling" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#disableStrokeScaling",
                "!doc" : "Vector effect property"
              },
              "htmlText" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#htmlText",
                "!doc" : "HTML format."
              },
              "attr" : {
                "!type" : "fn(key: string, opt_value?: +Object) -> +Object|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#attr",
                "!doc" : "Attribute setting"
              },
              "id" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#id",
                "!doc" : "Element identifier"
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#letterSpacing",
                "!doc" : "Letter spacing setting."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#removeAllListeners",
                "!doc" : "Removes all listeners from this listenable."
              },
              "scaleByAnchor" : {
                "!type" : "fn(sx: number, sy: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#scaleByAnchor",
                "!doc" : "Scales a shape by anchor. Scaling center is set as an anchor."
              },
              "drag" : {
                "!type" : "fn(opt_value?: bool|+anychart.graphics.math.Rect) -> bool|+anychart.graphics.math.Rect|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#drag",
                "!doc" : "Dragging setting."
              },
              "getRotationAngle" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getRotationAngle",
                "!doc" : "Returns the current rotation angle in degrees."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#fontVariant",
                "!doc" : "Font variant setting."
              },
              "style" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.TextStyle|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#style",
                "!doc" : "Text style settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.graphics.vector.Element#listen",
                "!doc" : "Adds an event listener."
              },
              "getY" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getY",
                "!doc" : "Returns Y in the coordinate system of the parent."
              },
              "visible" : {
                "!type" : "fn(opt_isVisible?: bool) -> bool|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#visible",
                "!doc" : "Visibility flag"
              },
              "setRotation" : {
                "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#setRotation",
                "!doc" : "Rotates a shape around the given point."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#hAlign",
                "!doc" : "Horizontal align setting."
              },
              "direction" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#direction",
                "!doc" : "Text direction setting."
              },
              "getAbsoluteBounds" : {
                "!type" : "fn() -> +anychart.graphics.math.Rect",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteBounds",
                "!doc" : "Gets element bounds in absolute coordinates (root element coordinate system)."
              },
              "text" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#text",
                "!doc" : "Text setting."
              },
              "cursor" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Cursor) -> +anychart.graphics.vector.Cursor|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#cursor",
                "!doc" : "Cursor type."
              },
              "remove" : {
                "!type" : "fn() -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#remove",
                "!doc" : "Current element removes itself from the parent layer."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#fontSize",
                "!doc" : "Font size setting."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#disablePointerEvents",
                "!doc" : "Pointer events setting."
              },
              "desc" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#desc",
                "!doc" : "Description setting"
              },
              "decoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#decoration",
                "!doc" : "Text decoration setting."
              },
              "getX" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getX",
                "!doc" : "Returns X in the coordinate system of the parent."
              },
              "getHeight" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getHeight",
                "!doc" : "Returns the height."
              },
              "appendTransformationMatrix" : {
                "!type" : "fn(m00: number, m10: number, m01: number, m11: number, m02: number, m12: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#appendTransformationMatrix",
                "!doc" : "Combines the current transformation with the given transformation matrix."
              },
              "title" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#title",
                "!doc" : "Title setting"
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#textOverflow",
                "!doc" : "Text overflow setting."
              },
              "y" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/a#ychart.graphics.vector.Text#y",
                "!doc" : "Y coordinate setting."
              },
              "getAbsoluteX" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getAbsoluteX",
                "!doc" : "Returns an absolute X (root element coordinate system)."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.WordWrap) -> string|+anychart.graphics.vector.Text.WordWrap|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#wordWrap",
                "!doc" : "Text word-wrap mode."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#zIndex",
                "!doc" : "Z-index setting."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.WordBreak) -> string|+anychart.graphics.vector.Text.WordBreak|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#wordBreak",
                "!doc" : "Text word-break mode."
              },
              "getBounds" : {
                "!type" : "fn() -> +anychart.graphics.math.Rect",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getBounds",
                "!doc" : "Returns the bounds."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#selectable",
                "!doc" : "Text selection setting."
              },
              "rotate" : {
                "!type" : "fn(degrees: number, opt_cx?: number, opt_cy?: number) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#rotate",
                "!doc" : "Rotates a shape around the given rotation point."
              },
              "color" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#color",
                "!doc" : "Color setting."
              },
              "rotateByAnchor" : {
                "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#rotateByAnchor",
                "!doc" : "Rotates a shape around the given anchor."
              },
              "opacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#opacity",
                "!doc" : "Opacity setting."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Text#textIndent",
                "!doc" : "Text indent setting."
              },
              "getStage" : {
                "!type" : "fn() -> +anychart.graphics.vector.Stage",
                "!url" : "8.3.0/anychart.graphics.vector.Element#getStage",
                "!doc" : "Stage object (to which the given element is bound)."
              },
              "domElement" : {
                "!type" : "fn() -> Element",
                "!url" : "8.3.0/anychart.graphics.vector.Element#domElement",
                "!doc" : "Returns DOM element if element is rendered."
              },
              "setRotationByAnchor" : {
                "!type" : "fn(degrees: number, opt_anchor?: +anychart.graphics.vector.Anchor|string) -> +anychart.graphics.vector.vml.Text",
                "!url" : "8.3.0/anychart.graphics.vector.Element#setRotationByAnchor",
                "!doc" : "Rotates a shape around the given anchor."
              }
            }
          },
          "!doc" : "A namespace for working with vml.",
          "!url" : "8.3.0/anychart.graphics.vector.vml"
        }
      },
      "text" : {
        "!type" : "fn(opt_x?: number, opt_y?: number, opt_text?: string, opt_style?: +anychart.graphics.vector.TextStyle) -> +anychart.graphics.vector.Text",
        "!url" : "8.3.0/anychart.graphics#text",
        "!doc" : "Creates, depending on the technology used, an instance of the {@link anychart.graphics.vector.Text}"
      },
      "events" : {
        "listen" : {
          "!type" : "fn(target: +anychart.graphics.vector.Element, type: string|[string], listener: fn()|Object, opt_capture?: bool, opt_handler?: Object) -> Object",
          "!url" : "8.3.0/anychart.graphics.events#listen",
          "!doc" : "Adds an event listener for an event to a DOM node or to an implementing object."
        },
        "listenOnce" : {
          "!type" : "fn(target: +anychart.graphics.vector.Element, type: string|[string], listener: fn()|Object, opt_capture?: bool, opt_handler?: Object) -> Object",
          "!url" : "8.3.0/anychart.graphics.events#listenOnce",
          "!doc" : "Adds an event listener for a certain event to a DOM node or to an implementing object."
        },
        "removeAll" : {
          "!type" : "fn(target: +anychart.graphics.vector.Element, opt_type?: string) -> number",
          "!url" : "8.3.0/anychart.graphics.events#removeAll",
          "!doc" : "Removes all listeners from an object."
        },
        "unlisten" : {
          "!type" : "fn(target: +anychart.graphics.vector.Element, type: string|[string], listener: fn()|Object, opt_capture?: bool, opt_handler?: Object) -> bool",
          "!url" : "8.3.0/anychart.graphics.events#unlisten",
          "!doc" : "Removes a listener added using listen() or listenOnce() methods."
        },
        "unlistenByKey" : {
          "!type" : "fn(key: Object) -> bool",
          "!url" : "8.3.0/anychart.graphics.events#unlistenByKey",
          "!doc" : "Removes an event listener which was added with listen() by the key returned by listen() or listenOnce()."
        },
        "BrowserEvent" : {
          "!doc" : "Encapsulates browser event for anychart.graphics.",
          "!url" : "8.3.0/anychart.graphics.events.BrowserEvent",
          "prototype" : {
            "preventDefault" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.events.BrowserEvent#preventDefault",
              "!doc" : "Prevents DOM event default action."
            },
            "stopPropagation" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.events.BrowserEvent#stopPropagation",
              "!doc" : "Stops both DOM and wrapper event propagation."
            },
            "stopWrapperPropagation" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.graphics.events.BrowserEvent#stopWrapperPropagation",
              "!doc" : "Stops event propagation (doesn't stop original DOM event propagation)."
            }
          }
        },
        "EventType" : {
          "DBLCLICK" : {
            "!doc" : "Fires on double click on an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "MOUSEOVER" : {
            "!doc" : "Fires when the mouse pointer is over an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "!doc" : "Constants for event names. @enum {string}",
          "DRAG_BEFORE" : {
            "!doc" : "Fires before drag.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "TOUCHMOVE" : {
            "!doc" : "Fires on touchmove.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "TOUCHSTART" : {
            "!doc" : "Fires on touchstart.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "DRAG" : {
            "!doc" : "Fires on drag.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "CLICK" : {
            "!doc" : "Fires on click on an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "!url" : "8.3.0/anychart.graphics.events.EventType",
          "MOUSEMOVE" : {
            "!doc" : "Fires when mouse is moved on an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "MOUSEUP" : {
            "!doc" : "Fires when the mouse is up on an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "CONTEXTMENU" : {
            "!doc" : "Fires on context menu.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "DRAG_END" : {
            "!doc" : "Fires on drag end.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "DRAG_START" : {
            "!doc" : "Fires on drag start.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "DRAG_EARLY_CANCEL" : {
            "!doc" : "Fires if drag action was canceled before the START event.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "MOUSEOUT" : {
            "!doc" : "Fires when the mouse pointer is out of an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "TAP" : {
            "!doc" : "Fires on tap (fast touchstart - touchend).",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "TOUCHCANCEL" : {
            "!doc" : "Fires when the touch is cancelled. To learn more about working with this event type,",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "MOUSEDOWN" : {
            "!doc" : "Fires when the mouse is down on an element.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          },
          "TOUCHEND" : {
            "!doc" : "Fires on touchend.",
            "!url" : "8.3.0/anychart.graphics.events.EventType",
            "!type" : "anychart.graphics.events.EventType"
          }
        },
        "!doc" : "A namespace of all global functions of the ACGraph event model.",
        "!url" : "8.3.0/anychart.graphics.events"
      },
      "type" : {
        "!type" : "fn() -> +anychart.graphics.StageType",
        "!url" : "8.3.0/anychart.graphics#type",
        "!doc" : "Returns the stage type recommended for the current browser (identified by a name and version). Which is selected from"
      },
      "hatchFill" : {
        "!type" : "fn(opt_type?: +anychart.graphics.vector.HatchFill.HatchFillType, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.HatchFill",
        "!url" : "8.3.0/anychart.graphics#hatchFill",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.HatchFill} class. In case a fill with such parameters does not"
      },
      "updateReferences" : {
        "!type" : "fn()",
        "!url" : "8.3.0/anychart.graphics#updateReferences",
        "!doc" : "Update all paths to svg defs."
      },
      "create" : {
        "!type" : "fn(opt_container?: Element|string, opt_width?: string|number, opt_height?: string|number) -> +anychart.graphics.vector.Stage",
        "!url" : "8.3.0/anychart.graphics#create",
        "!doc" : "Creates and returns a Stage object providing instruments for cross-browser drawing with a common interface"
      },
      "rect" : {
        "!type" : "fn(opt_x?: number, opt_y?: number, opt_width?: number, opt_height?: number) -> +anychart.graphics.vector.Rect",
        "!url" : "8.3.0/anychart.graphics#rect",
        "!doc" : "Creates an instance ot the {@link anychart.graphics.vector.Rect} class."
      },
      "layer" : {
        "!type" : "fn() -> +anychart.graphics.vector.Layer",
        "!url" : "8.3.0/anychart.graphics#layer",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Layer} class."
      },
      "patternFill" : {
        "!type" : "fn(bounds: +anychart.graphics.math.Rect) -> +anychart.graphics.vector.PatternFill",
        "!url" : "8.3.0/anychart.graphics#patternFill",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.PatternFill} class."
      },
      "useAbsoluteReferences" : {
        "!type" : "fn(opt_value?: bool) -> bool",
        "!url" : "8.3.0/anychart.graphics#useAbsoluteReferences",
        "!doc" : "Whether to use absolute path to svg defs."
      },
      "circle" : {
        "!type" : "fn(opt_cx?: number, opt_cy?: number, opt_radius?: number) -> +anychart.graphics.vector.Circle",
        "!url" : "8.3.0/anychart.graphics#circle",
        "!doc" : "Creates an instance of the {@link anychart.graphics.vector.Circle} class "
      }
    },
    "onDocumentLoad" : {
      "!type" : "fn(func: fn(), opt_scope?: +Object)",
      "!url" : "8.3.0/anychart#onDocumentLoad",
      "!doc" : "Adds callback for the document load event."
    },
    "area" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#area",
      "!doc" : "Creates and returns an Area Chart."
    },
    "onDocumentReady" : {
      "!type" : "fn(func: fn(), opt_scope?: +Object)",
      "!url" : "8.3.0/anychart#onDocumentReady",
      "!doc" : "Adds callback for the document ready event."
    },
    "pareto" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Pareto",
      "!url" : "8.3.0/anychart#pareto",
      "!doc" : "Creates and returns a Pareto Chart."
    },
    "licenseKey" : {
      "!type" : "fn(opt_value?: string) -> string",
      "!url" : "8.3.0/anychart#licenseKey",
      "!doc" : "Setter for AnyChart license key."
    },
    "vertical" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#vertical",
      "!doc" : "Creates and returns a Vertical Chart."
    },
    "exports" : {
      "facebook" : {
        "!type" : "fn(opt_captionOrOptions?: string|Object, opt_link?: string, opt_name?: string, opt_description?: string, opt_width?: string, opt_height?: string, opt_appId?: string) -> Object",
        "!url" : "8.3.0/anychart.exports#facebook",
        "!doc" : "Facebook sharing settings"
      },
      "filename" : {
        "!type" : "fn(opt_value?: string) -> string",
        "!url" : "8.3.0/anychart.exports#filename",
        "!doc" : "Setter and getter for the file name for exported files."
      },
      "image" : {
        "!type" : "fn(opt_widthOrOptions?: string|Object, opt_height?: string) -> Object",
        "!url" : "8.3.0/anychart.exports#image",
        "!doc" : "Getter for dimensions for exported images and PDFs."
      },
      "linkedin" : {
        "!type" : "fn(opt_captionOrOptions?: string|Object, opt_description?: string, opt_width?: string, opt_height?: string) -> Object",
        "!url" : "8.3.0/anychart.exports#linkedin",
        "!doc" : "LinkedIn sharing settings"
      },
      "pinterest" : {
        "!type" : "fn(opt_linkOrOptions?: string|Object, opt_description?: string, opt_width?: string, opt_height?: string) -> Object",
        "!url" : "8.3.0/anychart.exports#pinterest",
        "!doc" : "Pinterest sharing settings"
      },
      "server" : {
        "!type" : "fn(opt_address?: string) -> string",
        "!url" : "8.3.0/anychart.exports#server",
        "!doc" : "Setter for an address export server script, which is used to export to an image or PDF."
      },
      "twitter" : {
        "!type" : "fn(opt_urlOrOptions?: string|Object, opt_width?: string, opt_height?: string) -> Object",
        "!url" : "8.3.0/anychart.exports#twitter",
        "!doc" : "Twitter sharing settings"
      },
      "!doc" : "The anychart.exports namespace contains export functions.",
      "!url" : "8.3.0/anychart.exports"
    },
    "fromXml" : {
      "!type" : "fn(xmlConfig: string|Node) -> +Object",
      "!url" : "8.3.0/anychart#fromXml",
      "!doc" : "Creates an element by XML config."
    },
    "DEVELOP" : {
      "!doc" : "Defines if it is developer edition.",
      "!url" : "8.3.0/anychart#DEVELOP",
      "!type" : "boolean"
    },
    "heatMap" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.HeatMap",
      "!url" : "8.3.0/anychart#heatMap",
      "!doc" : "Creates and returns a Heat Map."
    },
    "box" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#box",
      "!doc" : "Creates and returns a Box Chart."
    },
    "line3d" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian3d",
      "!url" : "8.3.0/anychart#line3d",
      "!doc" : "Creates and returns a Line 3D Chart."
    },
    "pie3d" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.Pie",
      "!url" : "8.3.0/anychart#pie3d",
      "!doc" : "Creates and returns a 3D Pie Chart."
    },
    "mekko" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Mekko",
      "!url" : "8.3.0/anychart#mekko",
      "!doc" : "Creates and returns a Mekko Chart."
    },
    "VERSION" : {
      "!doc" : "The current version of the framework.",
      "!url" : "8.3.0/anychart#VERSION",
      "!type" : "string"
    },
    "verticalLine" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#verticalLine",
      "!doc" : "Creates and returns a Vertical Line chart."
    },
    "scatter" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Scatter",
      "!url" : "8.3.0/anychart#scatter",
      "!doc" : "Creates and returns a Scatter Chart."
    },
    "scales" : {
      "GeoTicks" : {
        "!doc" : "The GeoTicks class contains methods for configuring ticks on the Geo scale.",
        "!url" : "8.3.0/anychart.scales.GeoTicks",
        "prototype" : {
          "count" : {
            "!type" : "fn(opt_value?: number, opt_maximumCount?: number) -> number|+anychart.scales.GeoTicks",
            "!url" : "8.3.0/anychart.scales.GeoTicks#count",
            "!doc" : "Ticks count."
          },
          "get" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.scales.GeoTicks#get",
            "!doc" : "Returns an array of ticks."
          },
          "interval" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GeoTicks",
            "!url" : "8.3.0/anychart.scales.GeoTicks#interval",
            "!doc" : "Ticks interval."
          },
          "set" : {
            "!type" : "fn(ticks: +Array) -> +anychart.scales.GeoTicks",
            "!url" : "8.3.0/anychart.scales.GeoTicks#set",
            "!doc" : "Setups ticks as an explicit array of fixed ticks."
          }
        }
      },
      "!doc" : "The anychart.scales namespace contains fundamental scales classes and base classes.",
      "calendar" : {
        "!type" : "fn(opt_parentCalendar?: +anychart.scales.Calendar) -> +anychart.scales.Calendar",
        "!url" : "8.3.0/anychart.scales#calendar",
        "!doc" : "Constructor function for the calendar."
      },
      "ordinal" : {
        "!type" : "fn() -> +anychart.scales.Ordinal",
        "!url" : "8.3.0/anychart.scales#ordinal",
        "!doc" : "Constructor function for ordinal scale."
      },
      "GanttDateTime" : {
        "!doc" : "The GanttDateTime class contains methods for configuring DateTime scale on the Gantt chart.",
        "!url" : "8.3.0/anychart.scales.GanttDateTime",
        "prototype" : {
          "getTotalRange" : {
            "!type" : "fn() -> +Object",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#getTotalRange",
            "!doc" : "Gets total minimum and maximum dates set for a scale."
          },
          "softMaximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#softMaximum",
            "!doc" : "Soft maximum settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "minimumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#minimumGap",
            "!doc" : "Minimum gap settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#minimum",
            "!doc" : "Scale minimum."
          },
          "maximumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#maximumGap",
            "!doc" : "Maximum gap settings."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#transform",
            "!doc" : "Transforms values to ratio."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "getRange" : {
            "!type" : "fn() -> +Object",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#getRange",
            "!doc" : "Gets minimum and maximum visible dates set for a scale."
          },
          "softMinimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#softMinimum",
            "!doc" : "Soft minimum settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> number",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#inverseTransform",
            "!doc" : "Processes reverse transformation of the ratio backward to value."
          },
          "zoomLevels" : {
            "!type" : "fn(opt_settings?: +anychart.scales.GanttDateTime.ZoomLevelsSettings) -> +anychart.scales.GanttDateTime.ZoomLevelsSettings|+anychart.scales.GanttDateTime",
            "!url" : "8.3.0/anychart.scales.GanttDateTime#zoomLevels",
            "!doc" : "Zoom level settings."
          }
        },
        "ZoomLevelsSettings" : {
          "!doc" : "Type definition for zoom level settings.",
          "!url" : "8.3.0/anychart.scales.GanttDateTime.ZoomLevelsSettings",
          "prototype" : {
            "The" : {
              "!type" : "[[+anychart.enums.Interval|string|{unit:+anychart.enums.Interval, count:number}]]",
              "!doc" : "level set for the timeline header."
            }
          }
        }
      },
      "LinearColor" : {
        "!doc" : "The LinearColor class contains methods for configuring Linear color scale.",
        "!url" : "8.3.0/anychart.scales.LinearColor",
        "prototype" : {
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "colorToValue" : {
            "!type" : "fn(value: string) -> number",
            "!url" : "8.3.0/anychart.scales.LinearColor#colorToValue",
            "!doc" : "Converts color to value. Returns number ratio by its color."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.ScatterBase#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "valueToColor" : {
            "!type" : "fn(value: number) -> string",
            "!url" : "8.3.0/anychart.scales.LinearColor#valueToColor",
            "!doc" : "Converts value to color. Returns color ratio by its number."
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.LinearColor#ticks",
            "!doc" : "Ticks settings."
          },
          "minorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.LinearColor#minorTicks",
            "!doc" : "Minor ticks settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.ScatterBase#inverseTransform",
            "!doc" : "Returns tick by its position ratio."
          },
          "colors" : {
            "!type" : "fn(var_args: string|+anychart.graphics.vector.SolidFill|+anychart.graphics.vector.LinearGradientFill|+anychart.graphics.vector.RadialGradientFill|[string|+anychart.graphics.vector.SolidFill|+anychart.graphics.vector.LinearGradientFill|+anychart.graphics.vector.RadialGradientFill]) -> [Object]|+anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.LinearColor#colors",
            "!doc" : "Linear gradient settings."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.LinearColor",
            "!url" : "8.3.0/anychart.scales.ScatterBase#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "ScatterTicks" : {
        "!doc" : "The ScatterTicks class contains methods for configuring ticks on the Scatter scale.",
        "!url" : "8.3.0/anychart.scales.ScatterTicks",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "base" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#base",
            "!doc" : "Ticks base value."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "count" : {
            "!type" : "fn(opt_value?: number, opt_maximumCount?: number) -> number|+anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#count",
            "!doc" : "Ticks count."
          },
          "mode" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScatterTicksMode|string) -> +anychart.enums.ScatterTicksMode|string|+anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#mode",
            "!doc" : "Ticks mode."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "interval" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#interval",
            "!doc" : "Ticks interval."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "set" : {
            "!type" : "fn(ticks: +Array) -> +anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#set",
            "!doc" : "Setups ticks as an explicit array of fixed ticks."
          },
          "get" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#get",
            "!doc" : "Returns an array of ticks. Each tick is a value in terms of data, to make a tick on."
          },
          "allowFractional" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.ScatterTicks",
            "!url" : "8.3.0/anychart.scales.ScatterTicks#allowFractional",
            "!doc" : "Allow showing fractional values in ticks"
          }
        }
      },
      "Geo" : {
        "!doc" : "The Geo class contains methods for configuring Geo scale in the Map.",
        "!url" : "8.3.0/anychart.scales.Geo",
        "prototype" : {
          "gap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#gap",
            "!doc" : "Gap settings."
          },
          "precision" : {
            "!type" : "fn(opt_value?: [number]|number, opt_yPrecision?: number) -> [number]|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#precision",
            "!doc" : "Precision settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Geo#getType",
            "!doc" : "Returns scale type."
          },
          "yMinorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.GeoTicks|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#yMinorTicks",
            "!doc" : "Y minor ticks settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "xMinorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.GeoTicks|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#xMinorTicks",
            "!doc" : "X ticks settings."
          },
          "xTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.GeoTicks|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#xTicks",
            "!doc" : "X ticks settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minimumY" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#minimumY",
            "!doc" : "Scale minimum Y settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "maximumY" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#maximumY",
            "!doc" : "Scale maximum Y settings."
          },
          "yTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.GeoTicks|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#yTicks",
            "!doc" : "Y ticks settings."
          },
          "minimumX" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#minimumX",
            "!doc" : "Scale minimum X settings."
          },
          "maximumX" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#maximumX",
            "!doc" : "Scale maximum X settings."
          },
          "maxTicksCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#maxTicksCount",
            "!doc" : "Maximum ticks count."
          },
          "extendDataRange" : {
            "!type" : "fn(x: number, y: number, var_args: +Object) -> +anychart.scales.Geo",
            "!url" : "8.3.0/anychart.scales.Geo#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "Base" : {
        "!doc" : "The Base class contains methods for all types scales.",
        "!url" : "8.3.0/anychart.scales.Base",
        "prototype" : {
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Base",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.Base",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "dateTime" : {
        "!type" : "fn() -> +anychart.scales.DateTime",
        "!url" : "8.3.0/anychart.scales#dateTime",
        "!doc" : "Constructor function for DateTime scale."
      },
      "DateTimeWithCalendar" : {
        "!doc" : "The DateTimeWithCalendar class contains methods for configuring calendar on the DateTime scale.",
        "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar",
        "prototype" : {
          "calendar" : {
            "!type" : "fn() -> +anychart.scales.Calendar",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#calendar",
            "!doc" : "Calendar settings."
          },
          "softMaximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#softMaximum",
            "!doc" : "Soft maximum settings."
          },
          "startDate" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#startDate",
            "!doc" : "Start date."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "minimumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#minimumGap",
            "!doc" : "Minimum gap settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "dateToPix" : {
            "!type" : "fn(date: number|Date) -> number",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#dateToPix",
            "!doc" : "Transforms date to pixels."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "maximumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#maximumGap",
            "!doc" : "Maximum gap settings."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.ScatterBase#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "count" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#count",
            "!doc" : "Count settings."
          },
          "pixToDate" : {
            "!type" : "fn(pix: number) -> number",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#pixToDate",
            "!doc" : "Transforms pixels to date."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "unitPixSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#unitPixSize",
            "!doc" : "Unit size settings."
          },
          "softMinimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#softMinimum",
            "!doc" : "Soft minimum settings."
          },
          "unit" : {
            "!type" : "fn(opt_value?: +anychart.enums.Interval|string) -> +anychart.enums.Interval|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#unit",
            "!doc" : "Unit settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.ScatterBase#inverseTransform",
            "!doc" : "Returns tick by its position ratio."
          },
          "skipHolidays" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#skipHolidays",
            "!doc" : "Holidays settings."
          },
          "getTicks" : {
            "!type" : "fn(fromPix: number, toPix: number, opt_unit?: +anychart.enums.Interval|string, opt_count?: number) -> [+anychart.scales.DateTimeWithCalendar.Tick]",
            "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar#getTicks",
            "!doc" : "Returns ticks array."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.DateTimeWithCalendar",
            "!url" : "8.3.0/anychart.scales.ScatterBase#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        },
        "Tick" : {
          "!doc" : "Type definition for tick.",
          "!url" : "8.3.0/anychart.scales.DateTimeWithCalendar.Tick",
          "prototype" : {
            "end" : {
              "!type" : "number",
              "!doc" : "End date."
            },
            "holiday" : {
              "!type" : "bool",
              "!doc" : "Whether to disable holidays"
            },
            "start" : {
              "!type" : "number",
              "!doc" : "Start date."
            }
          }
        }
      },
      "ScatterBase" : {
        "!doc" : "The ScatterBase class contains methods for configuring all scatter scales ({api:anychart.scales.Linear}Linear{api}, {api:anychart.scales.Logarithmic}Logarithmic{api} and {api:anychart.scales.DateTime}DateTime{api}).",
        "!url" : "8.3.0/anychart.scales.ScatterBase",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "alignMaximum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#alignMaximum",
            "!doc" : "Align maximum settings."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.ScatterBase#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "alignMinimum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#alignMinimum",
            "!doc" : "Align minimum settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.ScatterBase#inverseTransform",
            "!doc" : "Returns tick by its position ratio."
          },
          "maxTicksCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maxTicksCount",
            "!doc" : "Maximum ticks count."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.ScatterBase",
            "!url" : "8.3.0/anychart.scales.ScatterBase#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "Logarithmic" : {
        "!doc" : "The Logarithmic class contains methods for configuring Logarithmic scale.",
        "!url" : "8.3.0/anychart.scales.Logarithmic",
        "prototype" : {
          "stackMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleStackMode|string) -> +anychart.enums.ScaleStackMode|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#stackMode",
            "!doc" : "Getter for the stacked mode."
          },
          "softMaximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#softMaximum",
            "!doc" : "Soft maximum settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "stickToZero" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#stickToZero",
            "!doc" : "Stick to zero."
          },
          "logBase" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Logarithmic#logBase",
            "!doc" : "logarithmic base value."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "minimumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#minimumGap",
            "!doc" : "Minimum gap settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "alignMaximum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Logarithmic#alignMaximum",
            "!doc" : "Align maximum settings."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "maximumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#maximumGap",
            "!doc" : "Maximum gap settings."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.Logarithmic#transform",
            "!doc" : "Returns the tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stackDirection" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleStackDirection|string) -> +anychart.enums.ScaleStackDirection|string|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#stackDirection",
            "!doc" : "The stacking direction."
          },
          "alignMinimum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Logarithmic#alignMinimum",
            "!doc" : "Align minimum settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#ticks",
            "!doc" : "Ticks settings."
          },
          "softMinimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#softMinimum",
            "!doc" : "Soft minimum settings."
          },
          "minorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.Linear#minorTicks",
            "!doc" : "Minor ticks settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.Logarithmic#inverseTransform",
            "!doc" : "Returns the tick by its position ratio."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.Logarithmic",
            "!url" : "8.3.0/anychart.scales.ScatterBase#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "linearColor" : {
        "!type" : "fn(var_args: string|+anychart.graphics.vector.SolidFill|+anychart.graphics.vector.LinearGradientFill|+anychart.graphics.vector.RadialGradientFill|[string|+anychart.graphics.vector.SolidFill|+anychart.graphics.vector.LinearGradientFill|+anychart.graphics.vector.RadialGradientFill]) -> +anychart.scales.LinearColor",
        "!url" : "8.3.0/anychart.scales#linearColor",
        "!doc" : "Constructor function for the linear color scale."
      },
      "log" : {
        "!type" : "fn() -> +anychart.scales.Logarithmic",
        "!url" : "8.3.0/anychart.scales#log",
        "!doc" : "Constructor function for logarithmic scale."
      },
      "Ordinal" : {
        "!doc" : "The Ordinal class contains methods for configuring Ordinal scale.",
        "!url" : "8.3.0/anychart.scales.Ordinal",
        "prototype" : {
          "weights" : {
            "!type" : "fn(opt_value?: [number]) -> [number]|+anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Ordinal#weights",
            "!doc" : "Scale weights."
          },
          "values" : {
            "!type" : "fn(opt_values?: [+Object]|+Object, var_args: +Object) -> [number|string]|+anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Ordinal#values",
            "!doc" : "Input domain."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "transform" : {
            "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
            "!url" : "8.3.0/anychart.scales.Ordinal#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.OrdinalTicks|+anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Ordinal#ticks",
            "!doc" : "Ticks settings."
          },
          "names" : {
            "!type" : "fn(opt_value?: [+Object]|string) -> [+Object]|+anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Ordinal#names",
            "!doc" : "Tics names."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.Ordinal#inverseTransform",
            "!doc" : "Returns tick name by its ratio position."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.Ordinal",
            "!url" : "8.3.0/anychart.scales.Ordinal#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "!url" : "8.3.0/anychart.scales",
      "Linear" : {
        "!doc" : "The Linear class contains methods for configuring Linear scale.",
        "!url" : "8.3.0/anychart.scales.Linear",
        "prototype" : {
          "comparisonMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleComparisonMode|string) -> +anychart.enums.ScaleComparisonMode|string|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#comparisonMode",
            "!doc" : "Scale changes mode."
          },
          "stackMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleStackMode|string) -> +anychart.enums.ScaleStackMode|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#stackMode",
            "!doc" : "Getter for the stacked mode."
          },
          "softMaximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#softMaximum",
            "!doc" : "Soft maximum settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "stickToZero" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#stickToZero",
            "!doc" : "Stick to zero."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "minimumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#minimumGap",
            "!doc" : "Minimum gap settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "alignMaximum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#alignMaximum",
            "!doc" : "Align maximum settings."
          },
          "compareWith" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleCompareWithMode|string|number|Date) -> +anychart.enums.ScaleCompareWithMode|string|number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#compareWith",
            "!doc" : "Changes zero for series."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "maximumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#maximumGap",
            "!doc" : "Maximum gap settings."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.ScatterBase#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stackDirection" : {
            "!type" : "fn(opt_value?: +anychart.enums.ScaleStackDirection|string) -> +anychart.enums.ScaleStackDirection|string|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#stackDirection",
            "!doc" : "The stacking direction."
          },
          "alignMinimum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#alignMinimum",
            "!doc" : "Align minimum settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#ticks",
            "!doc" : "Ticks settings."
          },
          "softMinimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#softMinimum",
            "!doc" : "Soft minimum settings."
          },
          "minorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.ScatterTicks|+anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.Linear#minorTicks",
            "!doc" : "Minor ticks settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.ScatterBase#inverseTransform",
            "!doc" : "Returns tick by its position ratio."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.Linear",
            "!url" : "8.3.0/anychart.scales.ScatterBase#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      },
      "StockScatterDateTime" : {
        "!doc" : "The StockScatterDateTime class contains methods for configuring scatter datetime scale on the Stock.",
        "!url" : "8.3.0/anychart.scales.StockScatterDateTime",
        "prototype" : {
          "ticksCount" : {
            "!type" : "fn(opt_count?: number) -> number|+anychart.scales.StockScatterDateTime",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#ticksCount",
            "!doc" : "Minor ticks count"
          },
          "getMinimum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getMinimum",
            "!doc" : "Getter for the scale minimum."
          },
          "getFullMinimum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getFullMinimum",
            "!doc" : "Getter for the full scale minimum."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "transform" : {
            "!type" : "fn(value: number|string|Date) -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#transform",
            "!doc" : "Transforms values to ratio."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "ticks" : {
            "!type" : "fn(opt_ticks?: +anychart.scales.StockScatterDateTime.TicksSettings) -> +anychart.scales.StockScatterDateTime.TicksSettings|+anychart.scales.StockScatterDateTime",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#ticks",
            "!doc" : "Ticks settings"
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#inverseTransform",
            "!doc" : "Processes reverse transformation of the ratio backward to value."
          },
          "getFullMaximum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getFullMaximum",
            "!doc" : "Getter for the full scale maximum."
          },
          "getMaximum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getMaximum",
            "!doc" : "Getter for the scale maximum."
          }
        },
        "TicksSettings" : {
          "!doc" : "Type definition for ticks settings.",
          "!url" : "8.3.0/anychart.scales.StockScatterDateTime.TicksSettings",
          "prototype" : {
            "ticks" : {
              "!type" : "[{minor: (string|{unit:+anychart.enums.Interval, count:number}), major: (string|{unit:+anychart.enums.Interval, count:number})}]",
              "!doc" : "Array of minor/major ticks."
            }
          }
        }
      },
      "linear" : {
        "!type" : "fn() -> +anychart.scales.Linear",
        "!url" : "8.3.0/anychart.scales#linear",
        "!doc" : "Constructor function for linear scale."
      },
      "ordinalColor" : {
        "!type" : "fn(opt_value?: [Object]) -> +anychart.scales.OrdinalColor",
        "!url" : "8.3.0/anychart.scales#ordinalColor",
        "!doc" : "Constructor function for linear color scale."
      },
      "StockOrdinalDateTime" : {
        "!doc" : "The StockOrdinalDateTime class contains methods for configuring ordinal date time scale on the Stock.",
        "!url" : "8.3.0/anychart.scales.StockOrdinalDateTime",
        "prototype" : {
          "getMinimum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getMinimum",
            "!doc" : "Getter for the scale minimum."
          },
          "getFullMinimum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getFullMinimum",
            "!doc" : "Getter for the full scale minimum."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "transform" : {
            "!type" : "fn(value: number|string|Date) -> number",
            "!url" : "8.3.0/anychart.scales.StockOrdinalDateTime#transform",
            "!doc" : "Transforms values to ratio."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> number",
            "!url" : "8.3.0/anychart.scales.StockOrdinalDateTime#inverseTransform",
            "!doc" : "Processes reverse transformation of the ratio backward to value."
          },
          "getFullMaximum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getFullMaximum",
            "!doc" : "Getter for the full scale maximum."
          },
          "getMaximum" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.StockScatterDateTime#getMaximum",
            "!doc" : "Getter for the scale maximum."
          }
        }
      },
      "DateTimeTicks" : {
        "!doc" : "The DateTimeTicks class contains methods for configuring ticks on the DateTime scale.",
        "!url" : "8.3.0/anychart.scales.DateTimeTicks",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "count" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTimeTicks",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#count",
            "!doc" : "Ticks count."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "interval" : {
            "!type" : "fn(opt_value?: string|+anychart.enums.Interval|number, opt_value?: number, opt_days?: number, opt_hours?: number, opt_minutes?: number, opt_seconds?: number) -> string|+anychart.scales.DateTimeTicks",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#interval",
            "!doc" : "Ticks interval settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "getIntervalUnitCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#getIntervalUnitCount",
            "!doc" : "Returns interval unit count."
          },
          "getIntervalUnit" : {
            "!type" : "fn() -> +anychart.enums.Interval",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#getIntervalUnit",
            "!doc" : "Returns interval unit."
          },
          "set" : {
            "!type" : "fn(ticks: +Array) -> +anychart.scales.DateTimeTicks",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#set",
            "!doc" : "Setups ticks as an explicit array of fixed ticks."
          },
          "get" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.scales.DateTimeTicks#get",
            "!doc" : "Returns an array of ticks. Each tick is a value in terms of data, to make a tick on."
          }
        }
      },
      "Calendar" : {
        "!doc" : "The Calendar class contains methods for configuring calendar in the Resource chart.",
        "!url" : "8.3.0/anychart.scales.Calendar",
        "prototype" : {
          "availabilities" : {
            "!type" : "fn(opt_value?: [+anychart.scales.Calendar.Availability]) -> [+anychart.scales.Calendar.Availability]|+anychart.scales.Calendar",
            "!url" : "8.3.0/anychart.scales.Calendar#availabilities",
            "!doc" : "Availabilities settings."
          },
          "getWorkingSchedule" : {
            "!type" : "fn(startDate: number, endDate: number, opt_unit?: +anychart.enums.Interval|string, opt_count?: number) -> [+anychart.scales.Calendar.ScheduleItem]",
            "!url" : "8.3.0/anychart.scales.Calendar#getWorkingSchedule",
            "!doc" : "Gets the working time in passed datetime interval."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "timezoneOffset" : {
            "!type" : "fn(var_value: number) -> [number]|+anychart.scales.Calendar",
            "!url" : "8.3.0/anychart.scales.Calendar#timezoneOffset",
            "!doc" : "Timezone offset settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "weekendRange" : {
            "!type" : "fn(var_value: [number]) -> [number]|+anychart.scales.Calendar",
            "!url" : "8.3.0/anychart.scales.Calendar#weekendRange",
            "!doc" : "Settings for regular weekend days."
          }
        },
        "Availability" : {
          "!doc" : "Type definition for availabilities.",
          "!url" : "8.3.0/anychart.scales.Calendar.Availability",
          "prototype" : {
            "each" : {
              "!type" : "+anychart.enums.AvailabilityPeriod|string",
              "!doc" : "Define the frequency of repetition."
            },
            "ends" : {
              "!type" : "Date|number|string",
              "!doc" : "Define end date."
            },
            "from" : {
              "!type" : "Date|number|string",
              "!doc" : "Define time from."
            },
            "isWorking" : {
              "!type" : "bool",
              "!doc" : "Define work time."
            },
            "on" : {
              "!type" : "Date|number|string",
              "!doc" : "Day of the week or date."
            },
            "starts" : {
              "!type" : "Date|number|string",
              "!doc" : "Define start date."
            },
            "to" : {
              "!type" : "Date|number|string",
              "!doc" : "Define time to."
            }
          }
        },
        "ScheduleItem" : {
          "!doc" : "Type definition for one schedule item.",
          "!url" : "8.3.0/anychart.scales.Calendar.ScheduleItem",
          "prototype" : {
            "end" : {
              "!type" : "number",
              "!doc" : "End interval."
            },
            "start" : {
              "!type" : "number",
              "!doc" : "Start interval."
            },
            "workingTime" : {
              "!type" : "[[number]]",
              "!doc" : "An array of the working time."
            }
          }
        }
      },
      "OrdinalColor" : {
        "!doc" : "The OrdinalColor class contains methods for configuring Ordinal color scale.",
        "!url" : "8.3.0/anychart.scales.OrdinalColor",
        "prototype" : {
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "colorToValue" : {
            "!type" : "fn(value: string) -> number",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#colorToValue",
            "!doc" : "Returns value for passed color. Value is a middle of its range."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "getProcessedRanges" : {
            "!type" : "fn() -> [Object]",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#getProcessedRanges",
            "!doc" : "Returns processed ranges."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "transform" : {
            "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#transform",
            "!doc" : "Returns tick position ratio by its value."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#inverted",
            "!doc" : "Scale inversion."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "valueToColor" : {
            "!type" : "fn(value: number) -> string",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#valueToColor",
            "!doc" : "Converts value to color. Returns color relative to passed value."
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.OrdinalTicks|+anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#ticks",
            "!doc" : "Ticks settings."
          },
          "names" : {
            "!type" : "fn(opt_value?: [+Object]|string) -> [+Object]|+anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#names",
            "!doc" : "Scale names settings."
          },
          "getRangeByValue" : {
            "!type" : "fn(value: number) -> Object",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#getRangeByValue",
            "!doc" : "Returns range for passed value."
          },
          "ranges" : {
            "!type" : "fn(opt_value?: [Object]) -> [Object]|+anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#ranges",
            "!doc" : "Scale ranges"
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#inverseTransform",
            "!doc" : "Returns tick value by its ratio position."
          },
          "colors" : {
            "!type" : "fn(opt_value?: [string]) -> [string]|+anychart.scales.OrdinalColor",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#colors",
            "!doc" : "Linear gradient settings."
          },
          "getIndexByValue" : {
            "!type" : "fn(value: number) -> number",
            "!url" : "8.3.0/anychart.scales.OrdinalColor#getIndexByValue",
            "!doc" : "Returns range index relative passed value."
          }
        }
      },
      "OrdinalTicks" : {
        "!doc" : "The OrdinalTicks class contains methods for configuring ticks on the Ordinal scale.",
        "!url" : "8.3.0/anychart.scales.OrdinalTicks",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "maxCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.OrdinalTicks",
            "!url" : "8.3.0/anychart.scales.OrdinalTicks#maxCount",
            "!doc" : "Maximum ticks count."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "interval" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.OrdinalTicks",
            "!url" : "8.3.0/anychart.scales.OrdinalTicks#interval",
            "!doc" : "Ticks interval."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "names" : {
            "!type" : "fn(opt_values?: +Array) -> +Array|+anychart.scales.OrdinalTicks",
            "!url" : "8.3.0/anychart.scales.OrdinalTicks#names",
            "!doc" : "Tick names settings."
          },
          "set" : {
            "!type" : "fn(ticks: +Array) -> +anychart.scales.OrdinalTicks",
            "!url" : "8.3.0/anychart.scales.OrdinalTicks#set",
            "!doc" : "Setups ticks as an explicit array of fixed ticks."
          },
          "get" : {
            "!type" : "fn() -> +Array",
            "!url" : "8.3.0/anychart.scales.OrdinalTicks#get",
            "!doc" : "Returns an array of ticks. Each tick can be:"
          }
        }
      },
      "DateTime" : {
        "!doc" : "The DateTime class contains methods for configuring DateTime scale.",
        "!url" : "8.3.0/anychart.scales.DateTime",
        "prototype" : {
          "softMaximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#softMaximum",
            "!doc" : "Soft maximum settings."
          },
          "getType" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.scales.Base#getType",
            "!doc" : "Returns scale type."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "minimumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#minimumGap",
            "!doc" : "Minimum gap settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "alignMaximum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#alignMaximum",
            "!doc" : "Align maximum settings."
          },
          "maximum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.ScatterBase#maximum",
            "!doc" : "Scale maximum."
          },
          "minimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.ScatterBase#minimum",
            "!doc" : "Scale minimum."
          },
          "maximumGap" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#maximumGap",
            "!doc" : "Maximum gap settings."
          },
          "transform" : {
            "!type" : "fn(value: +Object) -> number",
            "!url" : "8.3.0/anychart.scales.DateTime#transform",
            "!doc" : "Returns tick position ratio by its name."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.Base#inverted",
            "!doc" : "Inversion state."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "finishAutoCalc" : {
            "!type" : "fn(opt_silently?: bool) -> bool",
            "!url" : "8.3.0/anychart.scales.Base#finishAutoCalc",
            "!doc" : "Informs the scale that an auto-range calculation started for the chart in past was ended."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "alignMinimum" : {
            "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#alignMinimum",
            "!doc" : "Align minimum settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "startAutoCalc" : {
            "!type" : "fn() -> +anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.Base#startAutoCalc",
            "!doc" : "Informs scale that an auto-range calculation started for the chart, so it should reset its data range on the first"
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.DateTimeTicks|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#ticks",
            "!doc" : "Ticks settings."
          },
          "softMinimum" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#softMinimum",
            "!doc" : "Soft minimum settings."
          },
          "minorTicks" : {
            "!type" : "fn(opt_value?: Object|+Array) -> +anychart.scales.DateTimeTicks|+anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#minorTicks",
            "!doc" : "Minor ticks settings."
          },
          "inverseTransform" : {
            "!type" : "fn(ratio: number) -> +Object",
            "!url" : "8.3.0/anychart.scales.ScatterBase#inverseTransform",
            "!doc" : "Returns tick by its position ratio."
          },
          "extendDataRange" : {
            "!type" : "fn(var_args: +Object) -> +anychart.scales.DateTime",
            "!url" : "8.3.0/anychart.scales.DateTime#extendDataRange",
            "!doc" : "Extends the current input domain with the passed values (if such don't exist in the domain)."
          }
        }
      }
    },
    "math" : {
      "stochastic" : {
        "calculate" : {
          "!type" : "fn(context: Object, closeValue: number, highValue: number, lowValue: number) -> [number]",
          "!url" : "8.3.0/anychart.math.stochastic#calculate",
          "!doc" : "Stochastic calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.stochastic.Context)",
          "!url" : "8.3.0/anychart.math.stochastic#calculationFunction",
          "!doc" : "Calculates Stochastic."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.stochastic#createComputer",
          "!doc" : "Creates a Stochastic computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string) -> +anychart.math.stochastic.Context",
          "!url" : "8.3.0/anychart.math.stochastic#initContext",
          "!doc" : "Creates a context for Stochastic indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.stochastic.Context)",
          "!url" : "8.3.0/anychart.math.stochastic#startFunction",
          "!doc" : "Start calculation function for Stochastic indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.stochastic.Context",
          "prototype" : {
            "kMACalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation function for the smoothed %K."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Low cycle queue."
            },
            "kMAContext" : {
              "!type" : "+anychart.math.sma.Context|+anychart.math.ema.Context|Object",
              "!doc" : "EMA or SMA context to calculate smoothing %K."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "High cycle queue."
            },
            "dMAType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator %D smoothing type."
            },
            "kMAType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator %K smoothing type."
            },
            "kPeriod" : {
              "!type" : "number",
              "!doc" : "Indicator %K period."
            },
            "dMAContext" : {
              "!type" : "+anychart.math.sma.Context|+anychart.math.ema.Context|Object",
              "!doc" : "EMA or SMA context to calculate %D."
            },
            "dMACalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation %D function."
            }
          }
        },
        "!doc" : "Namespace anychart.math.stochastic",
        "!url" : "8.3.0/anychart.math.stochastic"
      },
      "CoordinateObject" : {
        "!doc" : "Type definition for coordinate.",
        "!url" : "8.3.0/anychart.math.CoordinateObject",
        "prototype" : {
          "x" : {
            "!type" : "string|number",
            "!doc" : "X-coordinate"
          },
          "y" : {
            "!type" : "string|number",
            "!doc" : "Y-coordinate"
          }
        }
      },
      "volumeMA" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.volumeMA.Context, volume: number) -> [number]",
          "!url" : "8.3.0/anychart.math.volumeMA#calculate",
          "!doc" : "Calculates Moving Average over Volume."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.volumeMA.Context)",
          "!url" : "8.3.0/anychart.math.volumeMA#calculationFunction",
          "!doc" : "Calculates Volume+MA."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.volumeMA#createComputer",
          "!doc" : "Creates Volume + MA computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_maPeriod?: number, opt_maType?: string|+anychart.enums.MovingAverageType) -> +anychart.math.volumeMA.Context",
          "!url" : "8.3.0/anychart.math.volumeMA#initContext",
          "!doc" : "Creates context for Volume+MA indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.volumeMA.Context)",
          "!url" : "8.3.0/anychart.math.volumeMA#startFunction",
          "!doc" : "Start calculation function for Volume+MA indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.volumeMA.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "The function to dispose the context."
            },
            "maCalculate" : {
              "!type" : "fn()",
              "!doc" : "Function for the moving average calculation."
            },
            "maContext" : {
              "!type" : "+anychart.math.sma.Context|+anychart.math.ema.Context",
              "!doc" : "Context for the Moving Average calculation."
            },
            "maPeriod" : {
              "!type" : "number",
              "!doc" : "Moving Average period."
            },
            "maType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator smoothing type."
            }
          }
        },
        "!doc" : "Namespace anychart.math.volumeMA",
        "!url" : "8.3.0/anychart.math.volumeMA"
      },
      "Coordinate" : {
        "!doc" : "Identifies an x-y coordinate pair.",
        "!url" : "8.3.0/anychart.math.Coordinate",
        "prototype" : {
          "XYCoordinates" : {
            "!type" : "[number]|Object|+anychart.math.CoordinateObject",
            "!doc" : "Coordinates."
          }
        }
      },
      "!doc" : "Namespace anychart.math",
      "atr" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.atr.Context, close: number, high: number, low: number) -> number",
          "!url" : "8.3.0/anychart.math.atr#calculate",
          "!doc" : "ATR calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.atr.Context)",
          "!url" : "8.3.0/anychart.math.atr#calculationFunction",
          "!doc" : "Calculates ATR."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.atr#createComputer",
          "!doc" : "Creates an ATR computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.atr.Context",
          "!url" : "8.3.0/anychart.math.atr#initContext",
          "!doc" : "Creates a context for ATR indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.atr.Context)",
          "!url" : "8.3.0/anychart.math.atr#startFunction",
          "!doc" : "Start calculation function for ATR indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.atr.Context",
          "prototype" : {
            "dequeuedValue" : {
              "!type" : "number",
              "!doc" : "The value excluded from the queue."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevClose" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.atr",
        "!url" : "8.3.0/anychart.math.atr"
      },
      "rsi" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.rsi.Context)",
          "!url" : "8.3.0/anychart.math.rsi#calculationFunction",
          "!doc" : "Calculates RSI."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.rsi#createComputer",
          "!doc" : "Creates a RSI computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.rsi.Context",
          "!url" : "8.3.0/anychart.math.rsi#initContext",
          "!doc" : "Creates a context for RSI indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.rsi.Context)",
          "!url" : "8.3.0/anychart.math.rsi#startFunction",
          "!doc" : "Start calculation function for RSI indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.rsi.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "downwardChange" : {
              "!type" : "number",
              "!doc" : "The number to calculate"
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            },
            "upwardChange" : {
              "!type" : "number",
              "!doc" : "The number to calculate"
            }
          }
        },
        "!doc" : "Namespace anychart.math.rsi",
        "!url" : "8.3.0/anychart.math.rsi"
      },
      "priceChannels" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.priceChannels.Context, high: number, low: number) -> [number]",
          "!url" : "8.3.0/anychart.math.priceChannels#calculate",
          "!doc" : "Price Channels calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.priceChannels.Context)",
          "!url" : "8.3.0/anychart.math.priceChannels#calculationFunction",
          "!doc" : "Calculates Price Channels."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.priceChannels#createComputer",
          "!doc" : "Creates Price Channels computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.priceChannels.Context",
          "!url" : "8.3.0/anychart.math.priceChannels#initContext",
          "!doc" : "Creates context for Price Channels indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.priceChannels.Context)",
          "!url" : "8.3.0/anychart.math.priceChannels#startFunction",
          "!doc" : "Start calculation function for Price Channels indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.priceChannels.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "[number]",
              "!doc" : "High queue."
            },
            "lowQueue" : {
              "!type" : "[number]",
              "!doc" : "Low queue."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            }
          }
        },
        "!doc" : "Namespace anychart.math.priceChannels",
        "!url" : "8.3.0/anychart.math.priceChannels"
      },
      "psar" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.psar.Context, high: number, low: number) -> number",
          "!url" : "8.3.0/anychart.math.psar#calculate",
          "!doc" : "Parabolic SAR calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.psar.Context)",
          "!url" : "8.3.0/anychart.math.psar#calculationFunction",
          "!doc" : "Calculates Parabolic SAR."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_accelerationFactorStart?: number, opt_accelerationFactorIncrement?: number, opt_accelerationFactorMaximum?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.psar#createComputer",
          "!doc" : "Creates Parabolic SAR computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_accelerationFactorStart?: number, opt_accelerationFactorIncrement?: number, opt_accelerationFactorMaximum?: number) -> +anychart.math.psar.Context",
          "!url" : "8.3.0/anychart.math.psar#initContext",
          "!doc" : "Creates context for Parabolic SAR indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.psar.Context)",
          "!url" : "8.3.0/anychart.math.psar#startFunction",
          "!doc" : "Start calculation function for Parabolic SAR indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.psar.Context",
          "prototype" : {
            "currentUpTrendEP" : {
              "!type" : "number",
              "!doc" : "The current value of EP for the uptrend."
            },
            "isUptrend" : {
              "!type" : "bool",
              "!doc" : "Whether to show the uptrend or no."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of low values."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of high values."
            },
            "dequeuedLow" : {
              "!type" : "number",
              "!doc" : "Dequeued of the low value."
            },
            "alphaIncrement" : {
              "!type" : "number",
              "!doc" : "Increment value of the acceleration factor (alpha)."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            },
            "dequeuedHigh" : {
              "!type" : "number",
              "!doc" : "Dequeued of the high value."
            },
            "currentDownTrendEP" : {
              "!type" : "number",
              "!doc" : "The current value of EP for the downtrend."
            },
            "alpha" : {
              "!type" : "number",
              "!doc" : "The current value of the acceleration factor (alpha)."
            },
            "alphaMax" : {
              "!type" : "number",
              "!doc" : "Maximum value of the acceleration factor (alpha)."
            },
            "alphaStart" : {
              "!type" : "number",
              "!doc" : "The start value  of the acceleration factor (alpha)."
            }
          }
        },
        "!doc" : "Namespace anychart.math.psar",
        "!url" : "8.3.0/anychart.math.psar"
      },
      "obv" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.obv.Context, close: number, volume: number) -> number",
          "!url" : "8.3.0/anychart.math.obv#calculate",
          "!doc" : "OBV calculation"
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.obv.Context)",
          "!url" : "8.3.0/anychart.math.obv#calculationFunction",
          "!doc" : "Calculates OBV."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.obv#createComputer",
          "!doc" : "Creates OBV computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn() -> +anychart.math.obv.Context",
          "!url" : "8.3.0/anychart.math.obv#initContext",
          "!doc" : "Creates context for OBV indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.obv.Context)",
          "!url" : "8.3.0/anychart.math.obv#startFunction",
          "!doc" : "Start calculation function for OBV indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.obv.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "The function to dispose the context."
            },
            "prevCloseValue" : {
              "!type" : "number",
              "!doc" : "Previous close value."
            },
            "prevObvValue" : {
              "!type" : "number",
              "!doc" : "Previous value of the OBV indicator."
            }
          }
        },
        "!doc" : "Namespace anychart.math.obv\r{docs:Stock_Charts/Technical_Indicators/Mathematical_Description}Learn more about indicator mathematics.{docs}",
        "!url" : "8.3.0/anychart.math.obv"
      },
      "cmf" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.cmf.Context, close: number, high: number, low: number, volume: number) -> number",
          "!url" : "8.3.0/anychart.math.cmf#calculate",
          "!doc" : "CMF calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.cmf.Context)",
          "!url" : "8.3.0/anychart.math.cmf#calculationFunction",
          "!doc" : "Calculates CMF."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.cmf#createComputer",
          "!doc" : "Creates a CMF computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.cmf.Context",
          "!url" : "8.3.0/anychart.math.cmf#initContext",
          "!doc" : "Creates a context for CMF indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.cmf.Context)",
          "!url" : "8.3.0/anychart.math.cmf#startFunction",
          "!doc" : "Start calculation function for CMF indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.cmf.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "mfvQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Money flow volume values."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevMFVSum" : {
              "!type" : "number",
              "!doc" : "Previous value of mfv sum."
            },
            "prevVolumeSum" : {
              "!type" : "number",
              "!doc" : "Previous value of volume sum."
            },
            "volumeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Volume values."
            }
          }
        },
        "!doc" : "Namespace anychart.math.cmf",
        "!url" : "8.3.0/anychart.math.cmf"
      },
      "sma" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.sma.Context, value: number) -> number",
          "!url" : "8.3.0/anychart.math.sma#calculate",
          "!doc" : "SMA calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.sma.Context)",
          "!url" : "8.3.0/anychart.math.sma#calculationFunction",
          "!doc" : "Calculates SMA."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.sma#createComputer",
          "!doc" : "Creates a SMA computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.sma.Context",
          "!url" : "8.3.0/anychart.math.sma#initContext",
          "!doc" : "Creates a context for SMA indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.sma.Context)",
          "!url" : "8.3.0/anychart.math.sma#startFunction",
          "!doc" : "Start calculation function for SMA indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.sma.Context",
          "prototype" : {
            "dequeuedValue" : {
              "!type" : "number",
              "!doc" : "The value excluded from the queue."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.sma",
        "!url" : "8.3.0/anychart.math.sma"
      },
      "bbands" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.bbands.Context, value: number) -> [number]",
          "!url" : "8.3.0/anychart.math.bbands#calculate",
          "!doc" : "Bollinger Bands calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.bbands.Context)",
          "!url" : "8.3.0/anychart.math.bbands#calculationFunction",
          "!doc" : "Calculates Bollinger Bands."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.bbands#createComputer",
          "!doc" : "Creates the Bollinger Bands computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_deviation?: number) -> +anychart.math.bbands.Context",
          "!url" : "8.3.0/anychart.math.bbands#initContext",
          "!doc" : "Creates a context for the Bollinger Bands indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.bbands.Context)",
          "!url" : "8.3.0/anychart.math.bbands#startFunction",
          "!doc" : "Start calculation function for the Bollinger Bands indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.bbands.Context",
          "prototype" : {
            "dequeuedValue" : {
              "!type" : "number",
              "!doc" : "The value excluded from the queue."
            },
            "deviation" : {
              "!type" : "number",
              "!doc" : "Indicator deviation."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycle queue."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevDeviation" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            }
          }
        },
        "!doc" : "Namespace anychart.math.bbands",
        "!url" : "8.3.0/anychart.math.bbands"
      },
      "Rect" : {
        "!doc" : "Define rectangle.",
        "!url" : "8.3.0/anychart.math.Rect",
        "prototype" : { }
      },
      "williamsR" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.williamsR.Context, close: number, high: number, low: number) -> number",
          "!url" : "8.3.0/anychart.math.williamsR#calculate",
          "!doc" : "Williams %R calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.williamsR.Context)",
          "!url" : "8.3.0/anychart.math.williamsR#calculationFunction",
          "!doc" : "Calculates Williams %R."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.williamsR#createComputer",
          "!doc" : "Creates Williams %R computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.williamsR.Context",
          "!url" : "8.3.0/anychart.math.williamsR#initContext",
          "!doc" : "Creates context for Williams %R indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.williamsR.Context)",
          "!url" : "8.3.0/anychart.math.williamsR#startFunction",
          "!doc" : "Start calculation function for Williams %R indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.williamsR.Context",
          "prototype" : {
            "closeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of close values."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of high values."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of low values."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            }
          }
        },
        "!doc" : "Namespace anychart.math.williamsR",
        "!url" : "8.3.0/anychart.math.williamsR"
      },
      "CycledQueue" : {
        "!doc" : "Class for queues with random access by indexes. Default maximum queue length is 256. It dequeues automatically when",
        "!url" : "8.3.0/anychart.math.CycledQueue",
        "prototype" : {
          "clear" : {
            "!type" : "fn(opt_newLengthLimit?: number)",
            "!url" : "8.3.0/anychart.math.CycledQueue#clear",
            "!doc" : "Clears the queue. You can optionally reset the queue length limit."
          },
          "dequeue" : {
            "!type" : "fn() -> +Object",
            "!url" : "8.3.0/anychart.math.CycledQueue#dequeue",
            "!doc" : "Removes the first item from the queue and returns it."
          },
          "enqueue" : {
            "!type" : "fn(item: +Object) -> +Object",
            "!url" : "8.3.0/anychart.math.CycledQueue#enqueue",
            "!doc" : "Enqueues passed the item."
          },
          "get" : {
            "!type" : "fn(index: number) -> +Object",
            "!url" : "8.3.0/anychart.math.CycledQueue#get",
            "!doc" : "Returns the queue item at the specified index."
          },
          "getLength" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.math.CycledQueue#getLength",
            "!doc" : "Returns current queue length."
          }
        }
      },
      "!url" : "8.3.0/anychart.math",
      "roc" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.roc.Context)",
          "!url" : "8.3.0/anychart.math.roc#calculationFunction",
          "!doc" : "Calculates RoC."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.roc#createComputer",
          "!doc" : "Creates a RoC computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.roc.Context",
          "!url" : "8.3.0/anychart.math.roc#initContext",
          "!doc" : "Creates a context for RoC indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.roc.Context)",
          "!url" : "8.3.0/anychart.math.roc#startFunction",
          "!doc" : "Start calculation function for RoC indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.roc.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.roc",
        "!url" : "8.3.0/anychart.math.roc"
      },
      "macd" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.macd.Context, value: number) -> [number]",
          "!url" : "8.3.0/anychart.math.macd#calculate",
          "!doc" : "MACD calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.macd.Context)",
          "!url" : "8.3.0/anychart.math.macd#calculationFunction",
          "!doc" : "Calculates MACD."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_signalPeriod?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.macd#createComputer",
          "!doc" : "Creates a MACD computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_fastPeriod?: number, opt_slowPeriod?: number, opt_signalPeriod?: number) -> +anychart.math.macd.Context",
          "!url" : "8.3.0/anychart.math.macd#initContext",
          "!doc" : "Creates a context for MACD indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.macd.Context)",
          "!url" : "8.3.0/anychart.math.macd#startFunction",
          "!doc" : "Start calculation function for MACD indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.macd.Context",
          "prototype" : {
            "slowResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate"
            },
            "signalQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Signal cycled queue"
            },
            "fastResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate"
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "slowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Slow cycled queue"
            },
            "fastPeriod" : {
              "!type" : "number",
              "!doc" : "Fast indicator period."
            },
            "fastQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Fast cycled queue."
            },
            "signalResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate"
            },
            "slowPeriod" : {
              "!type" : "number",
              "!doc" : "Slow indicator period."
            },
            "signalPeriod" : {
              "!type" : "number",
              "!doc" : "Signal indicator period."
            }
          }
        },
        "!doc" : "Namespace anychart.math.macd",
        "!url" : "8.3.0/anychart.math.macd"
      },
      "ha" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.ha.Context, open: number, high: number, low: number, close: number) -> [number]",
          "!url" : "8.3.0/anychart.math.ha#calculate",
          "!doc" : "Heikin-Ashi calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.ha.Context)",
          "!url" : "8.3.0/anychart.math.ha#calculationFunction",
          "!doc" : "Calculates Heikin-Ashi."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.ha#createComputer",
          "!doc" : "Creates Heikin-Ashi computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn() -> +anychart.math.ha.Context",
          "!url" : "8.3.0/anychart.math.ha#initContext",
          "!doc" : "Creates context for Heikin-Ashi indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.ha.Context)",
          "!url" : "8.3.0/anychart.math.ha#startFunction",
          "!doc" : "Start calculation function for Heikin-Ashi indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.ha.Context",
          "prototype" : {
            "closeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Close values."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "openQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Open values."
            }
          }
        },
        "!doc" : "Namespace anychart.math.ha",
        "!url" : "8.3.0/anychart.math.ha"
      },
      "keltnerChannels" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.keltnerChannels.Context, close: number, high: number, low: number) -> [number]",
          "!url" : "8.3.0/anychart.math.keltnerChannels#calculate",
          "!doc" : "Keltner Channels calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.keltnerChannels.Context)",
          "!url" : "8.3.0/anychart.math.keltnerChannels#calculationFunction",
          "!doc" : "Calculates Keltner Channels."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_atrPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType, opt_multiplier?: number) -> +anychart.data.TableMapping",
          "!url" : "8.3.0/anychart.math.keltnerChannels#createComputer",
          "!doc" : "Creates Keltner Channel computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_maPeriod?: number, opt_atrPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType, opt_multiplier?: number) -> +anychart.math.keltnerChannels.Context",
          "!url" : "8.3.0/anychart.math.keltnerChannels#initContext",
          "!doc" : "Creates context for Keltner Channels indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.keltnerChannels.Context)",
          "!url" : "8.3.0/anychart.math.keltnerChannels#startFunction",
          "!doc" : "Start calculation function for Keltner Channels indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.keltnerChannels.Context",
          "prototype" : {
            "atrContext" : {
              "!type" : "+anychart.math.atr.Context",
              "!doc" : "Context for the Average True Range calculation."
            },
            "atrPeriod" : {
              "!type" : "number",
              "!doc" : "Average True Range period."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "The function to dispose the context."
            },
            "maCalculate" : {
              "!type" : "fn()",
              "!doc" : "Function for the moving average calculation."
            },
            "maContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Context for the Moving Average calculation."
            },
            "maPeriod" : {
              "!type" : "number",
              "!doc" : "Moving Average period."
            },
            "maType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Moving Average type."
            },
            "multiplier" : {
              "!type" : "number",
              "!doc" : "Multiplier."
            }
          }
        },
        "!doc" : "Namespace anychart.math.keltnerChannels",
        "!url" : "8.3.0/anychart.math.keltnerChannels"
      },
      "ema" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.ema.Context, value: number) -> number",
          "!url" : "8.3.0/anychart.math.ema#calculate",
          "!doc" : "EMA calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.ema.Context)",
          "!url" : "8.3.0/anychart.math.ema#calculationFunction",
          "!doc" : "Calculates EMA."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.ema#createComputer",
          "!doc" : "Creates an EMA computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.ema.Context",
          "!url" : "8.3.0/anychart.math.ema#initContext",
          "!doc" : "Creates a context for EMA indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.ema.Context)",
          "!url" : "8.3.0/anychart.math.ema#startFunction",
          "!doc" : "Start calculation function for EMA indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.ema.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.ema",
        "!url" : "8.3.0/anychart.math.ema"
      },
      "cycledQueue" : {
        "!type" : "fn(opt_lengthLimit?: number) -> +anychart.math.CycledQueue",
        "!url" : "8.3.0/anychart.math#cycledQueue",
        "!doc" : "Returns a queue with random access by indexes. Default maximum queue length is 256. It dequeues automatically when"
      },
      "mfi" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.mfi.Context, close: number, high: number, low: number, volume: number) -> number",
          "!url" : "8.3.0/anychart.math.mfi#calculate",
          "!doc" : "MFI calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.mfi.Context)",
          "!url" : "8.3.0/anychart.math.mfi#calculationFunction",
          "!doc" : "Calculates MFI."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.mfi#createComputer",
          "!doc" : "Creates MFI computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.mfi.Context",
          "!url" : "8.3.0/anychart.math.mfi#initContext",
          "!doc" : "Creates a context for MFI indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.mfi.Context)",
          "!url" : "8.3.0/anychart.math.mfi#startFunction",
          "!doc" : "Start calculation function for MFI indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.mfi.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "lastValueSign" : {
              "!type" : "number",
              "!doc" : "Value for determining positive/negative money flow value."
            },
            "negativeFlow" : {
              "!type" : "number",
              "!doc" : "Negative money flow value."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "positiveFlow" : {
              "!type" : "number",
              "!doc" : "Positive money flow value."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            },
            "priceQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of the calculated price."
            },
            "volumeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of the calculated volume."
            }
          }
        },
        "!doc" : "Namespace anychart.math.mfi",
        "!url" : "8.3.0/anychart.math.mfi"
      },
      "kdj" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.kdj.Context, close: number, high: number, low: number) -> [number]",
          "!url" : "8.3.0/anychart.math.kdj#calculate",
          "!doc" : "KDJ calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.kdj.Context)",
          "!url" : "8.3.0/anychart.math.kdj#calculationFunction",
          "!doc" : "Calculates KDJ."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kMultiplier?: number, opt_dMultiplier?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.kdj#createComputer",
          "!doc" : "Creates a KDJ computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kMultiplier?: number, opt_dMultiplier?: number) -> +anychart.math.kdj.Context",
          "!url" : "8.3.0/anychart.math.kdj#initContext",
          "!doc" : "Creates a context for KDJ indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.kdj.Context)",
          "!url" : "8.3.0/anychart.math.kdj#startFunction",
          "!doc" : "Start calculation function for KDJ indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.kdj.Context",
          "prototype" : {
            "kMACalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation function for the smoothed %K."
            },
            "kMultiplier" : {
              "!type" : "number",
              "!doc" : "The %K multiplier to calculate the % J values."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Low cycle queue."
            },
            "kMAContext" : {
              "!type" : "+anychart.math.sma.Context|+anychart.math.ema.Context|Object",
              "!doc" : "EMA or SMA context to calculate smoothing %K."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "High cycle queue."
            },
            "dMAType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator %D smoothing type."
            },
            "kMAType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator %K smoothing type."
            },
            "kPeriod" : {
              "!type" : "number",
              "!doc" : "Indicator %K period."
            },
            "dMAContext" : {
              "!type" : "+anychart.math.sma.Context|+anychart.math.ema.Context|Object",
              "!doc" : "EMA or SMA context to calculate %D."
            },
            "dMACalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation %D function"
            },
            "dMultiplier" : {
              "!type" : "number",
              "!doc" : "The %D multiplier to calculate the % J values."
            }
          }
        },
        "!doc" : "Namespace anychart.math.kdj",
        "!url" : "8.3.0/anychart.math.kdj"
      },
      "momentum" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.momentum.Context, close: number) -> number",
          "!url" : "8.3.0/anychart.math.momentum#calculate",
          "!doc" : "Momentum calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.momentum.Context)",
          "!url" : "8.3.0/anychart.math.momentum#calculationFunction",
          "!doc" : "Calculates Momentum."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.momentum#createComputer",
          "!doc" : "Creates Momentum computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.momentum.Context",
          "!url" : "8.3.0/anychart.math.momentum#initContext",
          "!doc" : "Creates context for Momentum indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.momentum.Context)",
          "!url" : "8.3.0/anychart.math.momentum#startFunction",
          "!doc" : "Start calculation function for Momentum indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.momentum.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Queue for accumulation of close values."
            }
          }
        },
        "!doc" : "Namespace anychart.math.momentum",
        "!url" : "8.3.0/anychart.math.momentum"
      },
      "mma" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.mma.Context)",
          "!url" : "8.3.0/anychart.math.mma#calculationFunction",
          "!doc" : "Calculates MMA."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.mma#createComputer",
          "!doc" : "Creates a MMA computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.mma.Context",
          "!url" : "8.3.0/anychart.math.mma#initContext",
          "!doc" : "Creates a context for MMA indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.mma.Context)",
          "!url" : "8.3.0/anychart.math.mma#startFunction",
          "!doc" : "Start calculation function for MMA indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.mma.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.mma",
        "!url" : "8.3.0/anychart.math.mma"
      },
      "ama" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.ama.Context)",
          "!url" : "8.3.0/anychart.math.ama#calculationFunction",
          "!doc" : "Calculates AMA."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_fastPeriod?: number, opt_slowPeriod?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.ama#createComputer",
          "!doc" : "Creates an AMA computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_fastPeriod?: number, opt_slowPeriod?: number) -> +anychart.math.ama.Context",
          "!url" : "8.3.0/anychart.math.ama#initContext",
          "!doc" : "Creates a context for AMA indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.ama.Context)",
          "!url" : "8.3.0/anychart.math.ama#startFunction",
          "!doc" : "Start calculation function for AMA indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.ama.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "fastPeriod" : {
              "!type" : "number",
              "!doc" : "Fast indicator period."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevNoise" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            },
            "slowPeriod" : {
              "!type" : "number",
              "!doc" : "Slow indicator period."
            }
          }
        },
        "!doc" : "Namespace anychart.math.ama",
        "!url" : "8.3.0/anychart.math.ama"
      },
      "cci" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.cci.Context, close: number, high: number, low: number) -> number",
          "!url" : "8.3.0/anychart.math.cci#calculate",
          "!doc" : "CCI calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.cci.Context)",
          "!url" : "8.3.0/anychart.math.cci#calculationFunction",
          "!doc" : "Calculates CCI."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.cci#createComputer",
          "!doc" : "Creates a CCI computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.cci.Context",
          "!url" : "8.3.0/anychart.math.cci#initContext",
          "!doc" : "Creates a context for CCI indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.cci.Context)",
          "!url" : "8.3.0/anychart.math.cci#startFunction",
          "!doc" : "Start calculation function for CCI indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.cci.Context",
          "prototype" : {
            "dequeuedValue" : {
              "!type" : "number",
              "!doc" : "The value excluded from the queue."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "queue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycled queue."
            }
          }
        },
        "!doc" : "Namespace anychart.math.cci",
        "!url" : "8.3.0/anychart.math.cci"
      },
      "rect" : {
        "!type" : "fn(x: number, y: number, w: number, h: number) -> +anychart.math.Rect",
        "!url" : "8.3.0/anychart.math#rect",
        "!doc" : "Constructor function."
      },
      "bbandsB" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.bbandsB.Context)",
          "!url" : "8.3.0/anychart.math.bbandsB#calculationFunction",
          "!doc" : "Calculates %B."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.bbandsB#createComputer",
          "!doc" : "Creates the %B computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_deviation?: number) -> +anychart.math.bbandsB.Context",
          "!url" : "8.3.0/anychart.math.bbandsB#initContext",
          "!doc" : "Creates context for the %B indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.bbandsB.Context)",
          "!url" : "8.3.0/anychart.math.bbandsB#startFunction",
          "!doc" : "Start calculation function for the %B indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.bbandsB.Context",
          "prototype" : {
            "deviation" : {
              "!type" : "number",
              "!doc" : "Indicator deviation."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycle queue."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevDeviation" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            }
          }
        },
        "!doc" : "Namespace anychart.math.bbandsB",
        "!url" : "8.3.0/anychart.math.bbandsB"
      },
      "bbandsWidth" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.bbandsWidth.Context, value: number) -> number",
          "!url" : "8.3.0/anychart.math.bbandsWidth#calculate",
          "!doc" : "Bollinger Bands Width calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.bbandsWidth.Context)",
          "!url" : "8.3.0/anychart.math.bbandsWidth#calculationFunction",
          "!doc" : "Calculates Bollinger Bands Width."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.bbandsWidth#createComputer",
          "!doc" : "Creates the Bollinger Bands Width computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_deviation?: number) -> +anychart.math.bbandsWidth.Context",
          "!url" : "8.3.0/anychart.math.bbandsWidth#initContext",
          "!doc" : "Creates context for the Bollinger Bands Width indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.bbandsWidth.Context)",
          "!url" : "8.3.0/anychart.math.bbandsWidth#startFunction",
          "!doc" : "Start calculation function for the Bollinger Bands Width indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.bbandsWidth.Context",
          "prototype" : {
            "dequeuedValue" : {
              "!type" : "number",
              "!doc" : "The value excluded from the queue."
            },
            "deviation" : {
              "!type" : "number",
              "!doc" : "Indicator deviation."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Cycle queue."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "prevDeviation" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "The number to calculate."
            }
          }
        },
        "!doc" : "Namespace anychart.math.bbandsWidth",
        "!url" : "8.3.0/anychart.math.bbandsWidth"
      },
      "cho" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.cho.Context, close: number, high: number, low: number, volume: number) -> number",
          "!url" : "8.3.0/anychart.math.cho#calculate",
          "!doc" : "CHO calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.cho.Context)",
          "!url" : "8.3.0/anychart.math.cho#calculationFunction",
          "!doc" : "Calculates CHO."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_maType?: string) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.cho#createComputer",
          "!doc" : "Creates a CHO computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_fastPeriod?: number, opt_slowPeriod?: number, opt_maType?: string) -> +anychart.math.cho.Context",
          "!url" : "8.3.0/anychart.math.cho#initContext",
          "!doc" : "Creates a context for CHO indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.cho.Context)",
          "!url" : "8.3.0/anychart.math.cho#startFunction",
          "!doc" : "Start calculation function for CHO indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.cho.Context",
          "prototype" : {
            "adlContext" : {
              "!type" : "+anychart.math.adl.Context",
              "!doc" : "Context for adl calculation."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "fastMAContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Fast MA context."
            },
            "maCalculate" : {
              "!type" : "fn()",
              "!doc" : "Function for MA calculation (ema or sma)."
            },
            "maType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Type of smoothing."
            },
            "slowMAContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Slow MA context"
            }
          }
        },
        "!doc" : "Namespace anychart.math.cho",
        "!url" : "8.3.0/anychart.math.cho"
      },
      "adl" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.adl.Context, close: number, high: number, low: number, volume: number) -> number",
          "!url" : "8.3.0/anychart.math.adl#calculate",
          "!doc" : "ADL calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.adl.Context)",
          "!url" : "8.3.0/anychart.math.adl#calculationFunction",
          "!doc" : "Calculates ADL."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.adl#createComputer",
          "!doc" : "Creates an ADL computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn() -> +anychart.math.adl.Context",
          "!url" : "8.3.0/anychart.math.adl#initContext",
          "!doc" : "Creates a context for ADL indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.adl.Context)",
          "!url" : "8.3.0/anychart.math.adl#startFunction",
          "!doc" : "Start calculation function for ADL indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.adl.Context",
          "prototype" : {
            "closeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Close values."
            },
            "dispose" : {
              "!type" : "number",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "High values."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Low values."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Period - always 1."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            },
            "volumeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Volume values."
            }
          }
        },
        "!doc" : "Namespace anychart.math.adl",
        "!url" : "8.3.0/anychart.math.adl"
      },
      "aroon" : {
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.aroon.Context)",
          "!url" : "8.3.0/anychart.math.aroon#calculationFunction",
          "!doc" : "Calculates Aroon."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.aroon#createComputer",
          "!doc" : "Creates an Aroon computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number) -> +anychart.math.aroon.Context",
          "!url" : "8.3.0/anychart.math.aroon#initContext",
          "!doc" : "Creates a context for Aroon indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.aroon.Context)",
          "!url" : "8.3.0/anychart.math.aroon#startFunction",
          "!doc" : "Start calculation function for Aroon indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.aroon.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "High cycle queue."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Low cycle queue."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            }
          }
        },
        "!doc" : "Namespace anychart.math.aroon",
        "!url" : "8.3.0/anychart.math.aroon"
      },
      "dmi" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.dmi.Context, close: number, high: number, low: number) -> [number]",
          "!url" : "8.3.0/anychart.math.dmi#calculate",
          "!doc" : "DMI calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.dmi.Context)",
          "!url" : "8.3.0/anychart.math.dmi#calculationFunction",
          "!doc" : "Calculates DMI."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_adxPeriod?: number, opt_useWildersSmoothing?: bool) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.dmi#createComputer",
          "!doc" : "Creates a DMI computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_adxPeriod?: number, opt_useWildersSmoothing?: bool) -> +anychart.math.dmi.Context",
          "!url" : "8.3.0/anychart.math.dmi#initContext",
          "!doc" : "Creates a context for DMI indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.dmi.Context)",
          "!url" : "8.3.0/anychart.math.dmi#startFunction",
          "!doc" : "Start calculation function for DMI indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.dmi.Context",
          "prototype" : {
            "pdiValue" : {
              "!type" : "number",
              "!doc" : "Last +DI calculated value."
            },
            "adxQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "DX values."
            },
            "useWildersSmoothing" : {
              "!type" : "bool",
              "!doc" : "Whether to use wilders smoothing."
            },
            "pdiSumValue" : {
              "!type" : "number",
              "!doc" : "+DI values sum."
            },
            "lowQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Low values."
            },
            "adxAlpha" : {
              "!type" : "number",
              "!doc" : "Constant for ADX smoothing."
            },
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "Dispose function."
            },
            "trSumValue" : {
              "!type" : "number",
              "!doc" : "TR (true range) values sum."
            },
            "highQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "High values."
            },
            "ndiSumValue" : {
              "!type" : "number",
              "!doc" : "DI values sum."
            },
            "ndiValue" : {
              "!type" : "number",
              "!doc" : "Last -DI calculated value."
            },
            "adxValue" : {
              "!type" : "number",
              "!doc" : "Last ADX calculated value."
            },
            "alpha" : {
              "!type" : "number",
              "!doc" : "Constant for DI smoothing."
            },
            "closeQueue" : {
              "!type" : "+anychart.math.CycledQueue",
              "!doc" : "Close values."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Period."
            },
            "adxPeriod" : {
              "!type" : "number",
              "!doc" : "Period for ADX."
            }
          }
        },
        "!doc" : "Namespace anychart.math.dmi",
        "!url" : "8.3.0/anychart.math.dmi"
      },
      "trix" : {
        "calculate" : {
          "!type" : "fn(context: +anychart.math.trix.Context, value: number) -> [number]",
          "!url" : "8.3.0/anychart.math.trix#calculate",
          "!doc" : "TRIX calculation."
        },
        "calculationFunction" : {
          "!type" : "fn(row: +anychart.data.TableComputer.RowProxy, context: +anychart.math.trix.Context)",
          "!url" : "8.3.0/anychart.math.trix#calculationFunction",
          "!doc" : "Calculates TRIX."
        },
        "createComputer" : {
          "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_signalPeriod?: number, opt_maType?: string|+anychart.enums.MovingAverageType, opt_signalMaType?: string|+anychart.enums.MovingAverageType) -> +anychart.data.TableComputer",
          "!url" : "8.3.0/anychart.math.trix#createComputer",
          "!doc" : "Creates TRIX computer for the given table mapping."
        },
        "initContext" : {
          "!type" : "fn(opt_period?: number, opt_signalPeriod?: number, opt_maType?: string|+anychart.enums.MovingAverageType, opt_signalMaType?: string|+anychart.enums.MovingAverageType) -> +anychart.math.trix.Context",
          "!url" : "8.3.0/anychart.math.trix#initContext",
          "!doc" : "Creates context for TRIX indicator calculation."
        },
        "startFunction" : {
          "!type" : "fn(context: +anychart.math.trix.Context)",
          "!url" : "8.3.0/anychart.math.trix#startFunction",
          "!doc" : "Start calculation function for TRIX indicator calculation."
        },
        "Context" : {
          "!doc" : "Type definition for the context.",
          "!url" : "8.3.0/anychart.math.trix.Context",
          "prototype" : {
            "dispose" : {
              "!type" : "fn()",
              "!doc" : "The function to dispose the context."
            },
            "maType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Indicator smoothing type."
            },
            "signalMaType" : {
              "!type" : "+anychart.enums.MovingAverageType|string",
              "!doc" : "Signal smoothing type."
            },
            "firstMaContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Context for the first pass of the Moving Average function."
            },
            "signalMaContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Context for the signal pass of the Moving Average function."
            },
            "maSignalCalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation function for the Moving Average signal value."
            },
            "prevResult" : {
              "!type" : "number",
              "!doc" : "Previous calculation result."
            },
            "period" : {
              "!type" : "number",
              "!doc" : "Indicator period."
            },
            "signalPeriod" : {
              "!type" : "number",
              "!doc" : "Signal indicator period."
            },
            "thirdMaContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Context for the third pass of the Moving Average function."
            },
            "maCalculate" : {
              "!type" : "fn()",
              "!doc" : "Calculation function for the Moving Average."
            },
            "secondMaContext" : {
              "!type" : "+anychart.math.ema.Context|+anychart.math.sma.Context",
              "!doc" : "Context for the second pass of the Moving Average function."
            }
          }
        },
        "!doc" : "Namespace anychart.math.trix\r{docs:Stock_Charts/Technical_Indicators/Mathematical_Description}Learn more about indicator mathematics.{docs}",
        "!url" : "8.3.0/anychart.math.trix"
      }
    },
    "!url" : "8.3.0/anychart",
    "SignalEvent" : {
      "!doc" : "Special event for changes in dirty states.",
      "!url" : "8.3.0/anychart.SignalEvent",
      "prototype" : {
        "targetBoundsChanged" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetBoundsChanged",
          "!doc" : "If target signalled bounds change."
        },
        "targetDataChanged" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetDataChanged",
          "!doc" : "If target signalled data change."
        },
        "targetMetaChanged" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetMetaChanged",
          "!doc" : "If target signalled meta change."
        },
        "targetNeedsReapplication" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetNeedsReapplication",
          "!doc" : "If target needs to be reapplied."
        },
        "targetNeedsRecalculation" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetNeedsRecalculation",
          "!doc" : "If target needs to be recalculated."
        },
        "targetNeedsRedraw" : {
          "!type" : "fn() -> bool",
          "!url" : "8.3.0/anychart.SignalEvent#targetNeedsRedraw",
          "!doc" : "If target needs redraw."
        }
      }
    },
    "bubble" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Scatter",
      "!url" : "8.3.0/anychart#bubble",
      "!doc" : "Creates and returns a Bubble Chart."
    },
    "enums" : {
      "PolarSeriesType" : {
        "!doc" : "Polar series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.PolarSeriesType",
        "AREA" : {
          "!doc" : "Area series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "COLUMN" : {
          "!doc" : "Column series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "LINE" : {
          "!doc" : "Line series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "POLYGON" : {
          "!doc" : "Polygon series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "POLYLINE" : {
          "!doc" : "Polyline series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        },
        "RANGE_COLUMN" : {
          "!doc" : "Range Column series type.",
          "!url" : "8.3.0/anychart.enums.PolarSeriesType",
          "!type" : "anychart.enums.PolarSeriesType"
        }
      },
      "WaterfallDataMode" : {
        "!doc" : "List of waterfall chart data modes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.WaterfallDataMode",
        "ABSOLUTE" : {
          "!doc" : "Absolute data mode.",
          "!url" : "8.3.0/anychart.enums.WaterfallDataMode",
          "!type" : "anychart.enums.WaterfallDataMode"
        },
        "DIFF" : {
          "!doc" : "Diff data mode.",
          "!url" : "8.3.0/anychart.enums.WaterfallDataMode",
          "!type" : "anychart.enums.WaterfallDataMode"
        }
      },
      "Cartesian3dSeriesType" : {
        "!doc" : "Cartesian 3d series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.Cartesian3dSeriesType",
        "AREA" : {
          "!doc" : "Area series type.",
          "!url" : "8.3.0/anychart.enums.Cartesian3dSeriesType",
          "!type" : "anychart.enums.Cartesian3dSeriesType"
        },
        "BAR" : {
          "!doc" : "Bar series type.",
          "!url" : "8.3.0/anychart.enums.Cartesian3dSeriesType",
          "!type" : "anychart.enums.Cartesian3dSeriesType"
        },
        "COLUMN" : {
          "!doc" : "Column series type.",
          "!url" : "8.3.0/anychart.enums.Cartesian3dSeriesType",
          "!type" : "anychart.enums.Cartesian3dSeriesType"
        }
      },
      "Sort" : {
        "!doc" : "Sort enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.Sort",
        "ASC" : {
          "!doc" : "Ascending sorting.",
          "!url" : "8.3.0/anychart.enums.Sort",
          "!type" : "anychart.enums.Sort"
        },
        "DESC" : {
          "!doc" : "Descending sorting.",
          "!url" : "8.3.0/anychart.enums.Sort",
          "!type" : "anychart.enums.Sort"
        },
        "NONE" : {
          "!doc" : "No sorting.",
          "!url" : "8.3.0/anychart.enums.Sort",
          "!type" : "anychart.enums.Sort"
        }
      },
      "SunburstCalculationMode" : {
        "!doc" : "Sunburst calculation mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.SunburstCalculationMode",
        "ORDINAL_FROM_LEAVES" : {
          "!doc" : "\"Ordinal-from-leaves\" mode. The calculation is based on a number of leaves.",
          "!url" : "8.3.0/anychart.enums.SunburstCalculationMode",
          "!type" : "anychart.enums.SunburstCalculationMode"
        },
        "ORDINAL_FROM_ROOT" : {
          "!doc" : "\"Ordinal-from-root\" mode. The calculation is based on a number of points on the levels.",
          "!url" : "8.3.0/anychart.enums.SunburstCalculationMode",
          "!type" : "anychart.enums.SunburstCalculationMode"
        },
        "PARENT_DEPENDENT" : {
          "!doc" : "\"Parent-dependent\" mode. The calculation is based on a values of the field \"value\".",
          "!url" : "8.3.0/anychart.enums.SunburstCalculationMode",
          "!type" : "anychart.enums.SunburstCalculationMode"
        },
        "PARENT_INDEPENDENT" : {
          "!doc" : "'Parent-independent' mode. The calculation is based on leaves values.",
          "!url" : "8.3.0/anychart.enums.SunburstCalculationMode",
          "!type" : "anychart.enums.SunburstCalculationMode"
        }
      },
      "GanttDateTimeMarkers" : {
        "!doc" : "Gantt Date Time scale markers. @enum {string}",
        "!url" : "8.3.0/anychart.enums.GanttDateTimeMarkers",
        "CURRENT" : {
          "!doc" : "Current browser date.",
          "!url" : "8.3.0/anychart.enums.GanttDateTimeMarkers",
          "!type" : "anychart.enums.GanttDateTimeMarkers"
        },
        "END" : {
          "!doc" : "Ending date of the last data item.",
          "!url" : "8.3.0/anychart.enums.GanttDateTimeMarkers",
          "!type" : "anychart.enums.GanttDateTimeMarkers"
        },
        "START" : {
          "!doc" : "Starting date of the first data item.",
          "!url" : "8.3.0/anychart.enums.GanttDateTimeMarkers",
          "!type" : "anychart.enums.GanttDateTimeMarkers"
        }
      },
      "PyramidLabelsPosition" : {
        "!doc" : "Labels position for the funnel chart and pyramid. @enum {string}",
        "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
        "INSIDE" : {
          "!doc" : "Inside a point.",
          "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
          "!type" : "anychart.enums.PyramidLabelsPosition"
        },
        "OUTSIDE_LEFT" : {
          "!doc" : "Outside of a point to the left.",
          "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
          "!type" : "anychart.enums.PyramidLabelsPosition"
        },
        "OUTSIDE_LEFT_IN_COLUMN" : {
          "!doc" : "Outside of a point to the left in column.",
          "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
          "!type" : "anychart.enums.PyramidLabelsPosition"
        },
        "OUTSIDE_RIGHT" : {
          "!doc" : "Outside of a point to the right.",
          "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
          "!type" : "anychart.enums.PyramidLabelsPosition"
        },
        "OUTSIDE_RIGHT_IN_COLUMN" : {
          "!doc" : "Outside of a point to the right in column.",
          "!url" : "8.3.0/anychart.enums.PyramidLabelsPosition",
          "!type" : "anychart.enums.PyramidLabelsPosition"
        }
      },
      "StockRangeAnchor" : {
        "!doc" : "Stock range anchor. @enum {string}",
        "!url" : "8.3.0/anychart.enums.StockRangeAnchor",
        "FIRST_DATE" : {
          "!doc" : "Range anchor for the first date.",
          "!url" : "8.3.0/anychart.enums.StockRangeAnchor",
          "!type" : "anychart.enums.StockRangeAnchor"
        },
        "FIRST_VISIBLE_DATE" : {
          "!doc" : "Range anchor for the first visible date.",
          "!url" : "8.3.0/anychart.enums.StockRangeAnchor",
          "!type" : "anychart.enums.StockRangeAnchor"
        },
        "LAST_DATE" : {
          "!doc" : "Range anchor for the last date.",
          "!url" : "8.3.0/anychart.enums.StockRangeAnchor",
          "!type" : "anychart.enums.StockRangeAnchor"
        },
        "LAST_VISIBLE_DATE" : {
          "!doc" : "Range anchor for the last visible date.",
          "!url" : "8.3.0/anychart.enums.StockRangeAnchor",
          "!type" : "anychart.enums.StockRangeAnchor"
        }
      },
      "Orientation" : {
        "!doc" : "Orientation enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.Orientation",
        "BOTTOM" : {
          "!doc" : "Bottom orientation.",
          "!url" : "8.3.0/anychart.enums.Orientation",
          "!type" : "anychart.enums.Orientation"
        },
        "LEFT" : {
          "!doc" : "Left orientation.",
          "!url" : "8.3.0/anychart.enums.Orientation",
          "!type" : "anychart.enums.Orientation"
        },
        "RIGHT" : {
          "!doc" : "Right orientation.",
          "!url" : "8.3.0/anychart.enums.Orientation",
          "!type" : "anychart.enums.Orientation"
        },
        "TOP" : {
          "!doc" : "Top orientation.",
          "!url" : "8.3.0/anychart.enums.Orientation",
          "!type" : "anychart.enums.Orientation"
        }
      },
      "!doc" : "The anychart.enums namespace contains a set of named constants.",
      "FontVariant" : {
        "!doc" : "Font variant enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.FontVariant",
        "NORMAL" : {
          "!doc" : "Leave lowercase as is.",
          "!url" : "8.3.0/anychart.enums.FontVariant",
          "!type" : "anychart.enums.FontVariant"
        },
        "SMALL_CAP" : {
          "!doc" : "Make lowercase smaller",
          "!url" : "8.3.0/anychart.enums.FontVariant",
          "!type" : "anychart.enums.FontVariant"
        }
      },
      "MarkerType" : {
        "TRIANGLE_DOWN" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "!doc" : "Markers type. @enum {string}",
        "TRAPEZIUM" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "DIAMOND" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "PENTAGON" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "CIRCLE" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "STAR5" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "ARROW_RIGHT" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "ARROW_LEFT" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "STAR4" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "!url" : "8.3.0/anychart.enums.MarkerType",
        "TRIANGLE_RIGHT" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "LINE" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "STAR6" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "ARROW_DOWN" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "ARROW_UP" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "TRIANGLE_UP" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "ARROWHEAD" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "SQUARE" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "CROSS" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "STAR7" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "STAR10" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "DIAGONAL_CROSS" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        },
        "TRIANGLE_LEFT" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.MarkerType",
          "!type" : "anychart.enums.MarkerType"
        }
      },
      "HoverMode" : {
        "!doc" : "Hover mode enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.HoverMode",
        "BY_SPOT" : {
          "!doc" : "Charts hover mode by spot.",
          "!url" : "8.3.0/anychart.enums.HoverMode",
          "!type" : "anychart.enums.HoverMode"
        },
        "BY_X" : {
          "!doc" : "Charts hover mode by x.",
          "!url" : "8.3.0/anychart.enums.HoverMode",
          "!type" : "anychart.enums.HoverMode"
        },
        "SINGLE" : {
          "!doc" : "Charts hover mode by single value.",
          "!url" : "8.3.0/anychart.enums.HoverMode",
          "!type" : "anychart.enums.HoverMode"
        }
      },
      "VAlign" : {
        "!doc" : "Vertical align enum. @enum {string}",
        "!url" : "8.3.0/anychart.enums.VAlign",
        "BOTTOM" : {
          "!doc" : "Vertical align bottom.",
          "!url" : "8.3.0/anychart.enums.VAlign",
          "!type" : "anychart.enums.VAlign"
        },
        "MIDDLE" : {
          "!doc" : "Vertical align middle.",
          "!url" : "8.3.0/anychart.enums.VAlign",
          "!type" : "anychart.enums.VAlign"
        },
        "TOP" : {
          "!doc" : "Vertical align top.",
          "!url" : "8.3.0/anychart.enums.VAlign",
          "!type" : "anychart.enums.VAlign"
        }
      },
      "ScaleComparisonMode" : {
        "!doc" : "Enum for scale comparison mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScaleComparisonMode",
        "NONE" : {
          "!doc" : "No scale changes mode.",
          "!url" : "8.3.0/anychart.enums.ScaleComparisonMode",
          "!type" : "anychart.enums.ScaleComparisonMode"
        },
        "PERCENT" : {
          "!doc" : "Scale changes mode for percent.",
          "!url" : "8.3.0/anychart.enums.ScaleComparisonMode",
          "!type" : "anychart.enums.ScaleComparisonMode"
        },
        "VALUE" : {
          "!doc" : "Scale changes mode for value.",
          "!url" : "8.3.0/anychart.enums.ScaleComparisonMode",
          "!type" : "anychart.enums.ScaleComparisonMode"
        }
      },
      "GanttDataFields" : {
        "FILL" : {
          "!doc" : "Name of field for fill.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "PARENT" : {
          "!doc" : "Name of field for parent.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "!doc" : "Gantt reserved names of the field in data items. @enum {string}",
        "PROGRESS_VALUE" : {
          "!doc" : "Name of field for progress value.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "MARKERS" : {
          "!doc" : "Name of field for markers.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "CONNECTOR" : {
          "!doc" : "Name of field for connector.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "NAME" : {
          "!doc" : "Name of field for name.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "END" : {
          "!doc" : "Name of field for end.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "HOVER_STROKE" : {
          "!doc" : "Name of field for hover on stroke.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "PROGRESS" : {
          "!doc" : "Name of field for progress.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "CONNECT_TO" : {
          "!doc" : "Name of field for connector to.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "BASELINE_END" : {
          "!doc" : "Name of field for base line end.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "START_MARKER" : {
          "!doc" : "Name of field for start marker.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "!url" : "8.3.0/anychart.enums.GanttDataFields",
        "BASELINE" : {
          "!doc" : "Name of field for base line.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "ID" : {
          "!doc" : "Name of field for ID.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "STROKE" : {
          "!doc" : "Name of field for stroke.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "BASELINE_START" : {
          "!doc" : "Name of field for base line start.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "PERIODS" : {
          "!doc" : "Name of field for periods.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "LABEL" : {
          "!doc" : "Name of field for label.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "CHILDREN" : {
          "!doc" : "Name of field for children.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "ACTUAL_START" : {
          "!doc" : "Name of field for actual start.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "ACTUAL" : {
          "!doc" : "Name of field for actual.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "ROW_HEIGHT" : {
          "!doc" : "Name of field for height of row.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "START" : {
          "!doc" : "Name of field for start.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "HOVER_FILL" : {
          "!doc" : "Name of field for hover on fill.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "MILESTONE" : {
          "!doc" : "Name of field for milestone.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "COLLAPSED" : {
          "!doc" : "Name of field for collapsed.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "END_MARKER" : {
          "!doc" : "Name of field for end marker.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "CONNECTOR_TYPE" : {
          "!doc" : "Name of field for connector type.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        },
        "ACTUAL_END" : {
          "!doc" : "Name of field for actual end.",
          "!url" : "8.3.0/anychart.enums.GanttDataFields",
          "!type" : "anychart.enums.GanttDataFields"
        }
      },
      "EventMarkerDirection" : {
        "!doc" : "Event marker direction list. @enum {string}",
        "!url" : "8.3.0/anychart.enums.EventMarkerDirection",
        "AUTO" : {
          "!doc" : "Default marker direction.",
          "!url" : "8.3.0/anychart.enums.EventMarkerDirection",
          "!type" : "anychart.enums.EventMarkerDirection"
        },
        "DOWN" : {
          "!doc" : "Down marker direction.",
          "!url" : "8.3.0/anychart.enums.EventMarkerDirection",
          "!type" : "anychart.enums.EventMarkerDirection"
        },
        "UP" : {
          "!doc" : "Up marker direction.",
          "!url" : "8.3.0/anychart.enums.EventMarkerDirection",
          "!type" : "anychart.enums.EventMarkerDirection"
        }
      },
      "CartesianSeriesType" : {
        "STEP_LINE" : {
          "!doc" : "Step Line series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "STICK" : {
          "!doc" : "Stick series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "CANDLESTICK" : {
          "!doc" : "Candlestick series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "RANGE_BAR" : {
          "!doc" : "Range Bar series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "BAR" : {
          "!doc" : "Bar series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "!doc" : "Cartesian series types. @enum {string}",
        "HILO" : {
          "!doc" : "Hilo series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "OHLC" : {
          "!doc" : "OHLC series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "RANGE_SPLINE_AREA" : {
          "!doc" : "Range Spline Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "BOX" : {
          "!doc" : "Box series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "SPLINE_AREA" : {
          "!doc" : "Spline Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "BUBBLE" : {
          "!doc" : "Bubble series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "RANGE_COLUMN" : {
          "!doc" : "Range Column series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "LINE" : {
          "!doc" : "Line series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "RANGE_STEP_AREA" : {
          "!doc" : "Range Step Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "STEP_AREA" : {
          "!doc" : "Step Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "JUMP_LINE" : {
          "!doc" : "Jump line series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "AREA" : {
          "!doc" : "Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "SPLINE" : {
          "!doc" : "Spline series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "RANGE_AREA" : {
          "!doc" : "Range Area series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        },
        "COLUMN" : {
          "!doc" : "Column series type.",
          "!url" : "8.3.0/anychart.enums.CartesianSeriesType",
          "!type" : "anychart.enums.CartesianSeriesType"
        }
      },
      "WordWrap" : {
        "!doc" : "Text word-wrap mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.WordWrap",
        "BREAK_WORD" : {
          "!doc" : "Indicates that normally unbreakable words may be broken at arbitrary points if there are no otherwise acceptable break points in the line.",
          "!url" : "8.3.0/anychart.enums.WordWrap",
          "!type" : "anychart.enums.WordWrap"
        },
        "NORMAL" : {
          "!doc" : "Indicates that lines may only break at normal word break points.",
          "!url" : "8.3.0/anychart.enums.WordWrap",
          "!type" : "anychart.enums.WordWrap"
        }
      },
      "ScatterScaleTypes" : {
        "!doc" : "List of all scale types for scatter chart. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScatterScaleTypes",
        "DATE_TIME" : {
          "!doc" : "Datetime scale.",
          "!url" : "8.3.0/anychart.enums.ScatterScaleTypes",
          "!type" : "anychart.enums.ScatterScaleTypes"
        },
        "LINEAR" : {
          "!doc" : "Linear scale.",
          "!url" : "8.3.0/anychart.enums.ScatterScaleTypes",
          "!type" : "anychart.enums.ScatterScaleTypes"
        },
        "LOG" : {
          "!doc" : "Logarithmic scale.",
          "!url" : "8.3.0/anychart.enums.ScatterScaleTypes",
          "!type" : "anychart.enums.ScatterScaleTypes"
        }
      },
      "LegendItemsSourceMode" : {
        "!doc" : "Data collection mode for the legend. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LegendItemsSourceMode",
        "CATEGORIES" : {
          "!doc" : "Categories mode.",
          "!url" : "8.3.0/anychart.enums.LegendItemsSourceMode",
          "!type" : "anychart.enums.LegendItemsSourceMode"
        },
        "DEFAULT" : {
          "!doc" : "Default mode.",
          "!url" : "8.3.0/anychart.enums.LegendItemsSourceMode",
          "!type" : "anychart.enums.LegendItemsSourceMode"
        }
      },
      "WordBreak" : {
        "!doc" : "Text word-break mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.WordBreak",
        "BREAK_ALL" : {
          "!doc" : "Word breaks may be inserted between any character.",
          "!url" : "8.3.0/anychart.enums.WordBreak",
          "!type" : "anychart.enums.WordBreak"
        },
        "KEEP_ALL" : {
          "!doc" : "Don't allow word breaks for CJK text. Non-CJK text behavior is the same as for normal.",
          "!url" : "8.3.0/anychart.enums.WordBreak",
          "!type" : "anychart.enums.WordBreak"
        },
        "NORMAL" : {
          "!doc" : "Break words according to their usual rules.",
          "!url" : "8.3.0/anychart.enums.WordBreak",
          "!type" : "anychart.enums.WordBreak"
        }
      },
      "MilestoneShape" : {
        "!doc" : "Milestones shapes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MilestoneShape",
        "CIRCLE" : {
          "!doc" : "Circle milestones shape.",
          "!url" : "8.3.0/anychart.enums.MilestoneShape",
          "!type" : "anychart.enums.MilestoneShape"
        },
        "RECTANGLE" : {
          "!doc" : "Rectangle milestones shape.",
          "!url" : "8.3.0/anychart.enums.MilestoneShape",
          "!type" : "anychart.enums.MilestoneShape"
        },
        "RHOMBUS" : {
          "!doc" : "Rhombus milestones shape.",
          "!url" : "8.3.0/anychart.enums.MilestoneShape",
          "!type" : "anychart.enums.MilestoneShape"
        }
      },
      "StepDirection" : {
        "!doc" : "Step direction. @enum {string}",
        "!url" : "8.3.0/anychart.enums.StepDirection",
        "BACKWARD" : {
          "!doc" : "Backward step direction.",
          "!url" : "8.3.0/anychart.enums.StepDirection",
          "!type" : "anychart.enums.StepDirection"
        },
        "CENTER" : {
          "!doc" : "Center step direction.",
          "!url" : "8.3.0/anychart.enums.StepDirection",
          "!type" : "anychart.enums.StepDirection"
        },
        "FORWARD" : {
          "!doc" : "Forward step direction.",
          "!url" : "8.3.0/anychart.enums.StepDirection",
          "!type" : "anychart.enums.StepDirection"
        }
      },
      "ScaleStackDirection" : {
        "!doc" : "Direct stacking direction for the stacked scale mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScaleStackDirection",
        "DIRECT" : {
          "!doc" : "Direct stacking direction for the stacked scale mode.",
          "!url" : "8.3.0/anychart.enums.ScaleStackDirection",
          "!type" : "anychart.enums.ScaleStackDirection"
        },
        "REVERSE" : {
          "!doc" : "Reverse stacking direction for the stacked scale mode.",
          "!url" : "8.3.0/anychart.enums.ScaleStackDirection",
          "!type" : "anychart.enums.ScaleStackDirection"
        }
      },
      "PriceIndicatorDataSource" : {
        "!doc" : "List of data source for a price indicator value. @enum {string}",
        "!url" : "8.3.0/anychart.enums.PriceIndicatorDataSource",
        "FIRST_VISIBLE" : {
          "!doc" : "The data source is the first visible value of series.",
          "!url" : "8.3.0/anychart.enums.PriceIndicatorDataSource",
          "!type" : "anychart.enums.PriceIndicatorDataSource"
        },
        "LAST_VISIBLE" : {
          "!doc" : "The data source is the last visible value of series.",
          "!url" : "8.3.0/anychart.enums.PriceIndicatorDataSource",
          "!type" : "anychart.enums.PriceIndicatorDataSource"
        },
        "SERIES_END" : {
          "!doc" : "The data source is an end series value.",
          "!url" : "8.3.0/anychart.enums.PriceIndicatorDataSource",
          "!type" : "anychart.enums.PriceIndicatorDataSource"
        },
        "SERIES_START" : {
          "!doc" : "The data source is a start series value.",
          "!url" : "8.3.0/anychart.enums.PriceIndicatorDataSource",
          "!type" : "anychart.enums.PriceIndicatorDataSource"
        }
      },
      "ScatterSeriesType" : {
        "!doc" : "Scatter series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScatterSeriesType",
        "BUBBLE" : {
          "!doc" : "Bubble series type.",
          "!url" : "8.3.0/anychart.enums.ScatterSeriesType",
          "!type" : "anychart.enums.ScatterSeriesType"
        },
        "LINE" : {
          "!doc" : "Line series type.",
          "!url" : "8.3.0/anychart.enums.ScatterSeriesType",
          "!type" : "anychart.enums.ScatterSeriesType"
        },
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.ScatterSeriesType",
          "!type" : "anychart.enums.ScatterSeriesType"
        }
      },
      "TagCloudMode" : {
        "!doc" : "Tag cloud mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TagCloudMode",
        "RECT" : {
          "!doc" : "Rectangle mode.",
          "!url" : "8.3.0/anychart.enums.TagCloudMode",
          "!type" : "anychart.enums.TagCloudMode"
        },
        "SPIRAL" : {
          "!doc" : "Spiral mode.",
          "!url" : "8.3.0/anychart.enums.TagCloudMode",
          "!type" : "anychart.enums.TagCloudMode"
        }
      },
      "RadarSeriesType" : {
        "!doc" : "Radar series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.RadarSeriesType",
        "AREA" : {
          "!doc" : "Area series type.",
          "!url" : "8.3.0/anychart.enums.RadarSeriesType",
          "!type" : "anychart.enums.RadarSeriesType"
        },
        "LINE" : {
          "!doc" : "Line series type.",
          "!url" : "8.3.0/anychart.enums.RadarSeriesType",
          "!type" : "anychart.enums.RadarSeriesType"
        },
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.RadarSeriesType",
          "!type" : "anychart.enums.RadarSeriesType"
        }
      },
      "AggregationType" : {
        "!doc" : "Aggregation type for table columns. @enum {string}",
        "SUM" : {
          "!doc" : "Calculate the sum of values in a group and use it as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "LAST" : {
          "!doc" : "Choose the last non-NaN value in a group as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "LIST" : {
          "!doc" : "Put all non-undefined values in a group to an array and us it as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "FIRST_VALUE" : {
          "!doc" : "Choose the first non-undefined value as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "MIN" : {
          "!doc" : "Choose the lowest non-NaN value in a group as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "MAX" : {
          "!doc" : "Choose the biggest non-NaN value in a group as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "!url" : "8.3.0/anychart.enums.AggregationType",
        "LAST_VALUE" : {
          "!doc" : "Choose the last non-undefined value as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "WEIGHTED_AVERAGE" : {
          "!doc" : "Calculate average value in a group using other column values as weights and use it as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "AVERAGE" : {
          "!doc" : "Calculate average value in a group and use it as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        },
        "FIRST" : {
          "!doc" : "Choose the first non-NaN value in a group as a value of a point.",
          "!url" : "8.3.0/anychart.enums.AggregationType",
          "!type" : "anychart.enums.AggregationType"
        }
      },
      "EditorTabs" : {
        "DATA_LABELS" : {
          "!doc" : "Series labels settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "SERIES" : {
          "!doc" : "Series settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "!doc" : "Names of all the chart editor {api:anychart.editor.Step#tab}tabs{api}. @enum {string}",
        "TITLE" : {
          "!doc" : "Chart title settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "CIRCULAR_RANGES" : {
          "!doc" : "Circular gauges ranges settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "SCALES" : {
          "!doc" : "Scales settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "GRIDS" : {
          "!doc" : "Grids settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "POINTERS" : {
          "!doc" : "Gauges pointers settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "!url" : "8.3.0/anychart.enums.EditorTabs",
        "TOOLTIP" : {
          "!doc" : "Tooltip settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "SPECIFIC" : {
          "!doc" : "Chart specific settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "JSON" : {
          "!doc" : "Export to JSON tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "CREDITS" : {
          "!doc" : "Credits settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "LEGEND" : {
          "!doc" : "Legend settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "RADAR_POLAR_AXES" : {
          "!doc" : "Radar and polar charts axes settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "SCALE_BARS" : {
          "!doc" : "Scale bars settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "GAUGE_AXES" : {
          "!doc" : "Gauges axes settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "COLOR_RANGE" : {
          "!doc" : "Color ranges settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "THEMING" : {
          "!doc" : "Theming settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "SOURCE_CODE" : {
          "!doc" : "Export to javascript settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "CONTEXT_MENU" : {
          "!doc" : "Context menu settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "COLOR_SCALE" : {
          "!doc" : "Color scales settings tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "EMBED" : {
          "!doc" : "Save to cloud export tab.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        },
        "CARTESIAN_AXES" : {
          "!doc" : "Cartesian charts axes settings tabs.",
          "!url" : "8.3.0/anychart.enums.EditorTabs",
          "!type" : "anychart.enums.EditorTabs"
        }
      },
      "EventMarkerType" : {
        "!doc" : "Markers type list. @enum {string}",
        "!url" : "8.3.0/anychart.enums.EventMarkerType",
        "CIRCLE" : {
          "!doc" : "Circle marker type.",
          "!url" : "8.3.0/anychart.enums.EventMarkerType",
          "!type" : "anychart.enums.EventMarkerType"
        },
        "FLAG" : {
          "!doc" : "Flag marker type.",
          "!url" : "8.3.0/anychart.enums.EventMarkerType",
          "!type" : "anychart.enums.EventMarkerType"
        },
        "PIN" : {
          "!doc" : "Pin marker type.",
          "!url" : "8.3.0/anychart.enums.EventMarkerType",
          "!type" : "anychart.enums.EventMarkerType"
        },
        "RECT" : {
          "!doc" : "Rectangle marker type.",
          "!url" : "8.3.0/anychart.enums.EventMarkerType",
          "!type" : "anychart.enums.EventMarkerType"
        }
      },
      "MapUnboundRegionsMode" : {
        "!doc" : "Map unbound regions mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MapUnboundRegionsMode",
        "AS_IS" : {
          "!doc" : "Draws all the regions in any case with default settings.",
          "!url" : "8.3.0/anychart.enums.MapUnboundRegionsMode",
          "!type" : "anychart.enums.MapUnboundRegionsMode"
        },
        "HIDE" : {
          "!doc" : "Hides regions not bound to any data in choropleth series.",
          "!url" : "8.3.0/anychart.enums.MapUnboundRegionsMode",
          "!type" : "anychart.enums.MapUnboundRegionsMode"
        }
      },
      "ShapeType" : {
        "!doc" : "Shape type. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ShapeType",
        "CIRCLE" : {
          "!doc" : "Circle shape type.",
          "!url" : "8.3.0/anychart.enums.ShapeType",
          "!type" : "anychart.enums.ShapeType"
        },
        "ELLIPSE" : {
          "!doc" : "Ellipse shape type.",
          "!url" : "8.3.0/anychart.enums.ShapeType",
          "!type" : "anychart.enums.ShapeType"
        },
        "PATH" : {
          "!doc" : "Path shape type.",
          "!url" : "8.3.0/anychart.enums.ShapeType",
          "!type" : "anychart.enums.ShapeType"
        },
        "RECT" : {
          "!doc" : "Rectangle shape type.",
          "!url" : "8.3.0/anychart.enums.ShapeType",
          "!type" : "anychart.enums.ShapeType"
        }
      },
      "MapProjections" : {
        "WAGNER6" : {
          "!doc" : "Wagner6 map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "FAHEY" : {
          "!doc" : "Fahey map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "!doc" : "Supported projections enum. @enum {string}",
        "MERCATOR" : {
          "!doc" : "Mercator map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "ECKERT1" : {
          "!doc" : "Eckert1 map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "ROBINSON" : {
          "!doc" : "Robinson map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "AITOFF" : {
          "!doc" : "Aitoff map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "HAMMER" : {
          "!doc" : "Hammer map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "!url" : "8.3.0/anychart.enums.MapProjections",
        "BONNE" : {
          "!doc" : "Bonne map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "AUGUST" : {
          "!doc" : "August map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "ECKERT3" : {
          "!doc" : "Eckert3 map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "EQUIRECTANGULAR" : {
          "!doc" : "Equirectangular map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "ORTHOGRAPHIC" : {
          "!doc" : "Orthographic map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        },
        "WSG84" : {
          "!doc" : "Wsg84 map projection.",
          "!url" : "8.3.0/anychart.enums.MapProjections",
          "!type" : "anychart.enums.MapProjections"
        }
      },
      "LegendLayout" : {
        "!doc" : "Legend layout enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LegendLayout",
        "HORIZONTAL" : {
          "!doc" : "Horizontal layout.",
          "!url" : "8.3.0/anychart.enums.LegendLayout",
          "!type" : "anychart.enums.LegendLayout"
        },
        "HORIZONTAL_EXPANDABLE" : {
          "!doc" : "Places legend items one by one in horizontal rows.",
          "!url" : "8.3.0/anychart.enums.LegendLayout",
          "!type" : "anychart.enums.LegendLayout"
        },
        "VERTICAL" : {
          "!doc" : "Vertical layout.",
          "!url" : "8.3.0/anychart.enums.LegendLayout",
          "!type" : "anychart.enums.LegendLayout"
        },
        "VERTICAL_EXPANDABLE" : {
          "!doc" : "Places legend items one by one in vertical columns.",
          "!url" : "8.3.0/anychart.enums.LegendLayout",
          "!type" : "anychart.enums.LegendLayout"
        }
      },
      "EventType" : {
        "POINT_MOUSE_OUT" : {
          "!doc" : "Event type for point at leading off mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "TREE_ITEM_CREATE" : {
          "!doc" : "Data tree CRUD event type for tree item create.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_MOUSE_DOWN" : {
          "!doc" : "Event type for the marker mouse down.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_MOUSE_UP" : {
          "!doc" : "Event type for the connector mouse up.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKERS_SELECT" : {
          "!doc" : "Event type for select on markers.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_MOUSE_OUT" : {
          "!doc" : "Event type for out mouse on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ZOOM_END" : {
          "!doc" : "Event type for the zoom end.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_CLICK" : {
          "!doc" : "Event type for the connector click.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANNOTATION_CHANGE" : {
          "!doc" : "Event type for the annotation change.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "!doc" : "Event types enumeration. @enum {string}",
        "SPLITTER_CHANGE" : {
          "!doc" : "Event type for change splitter.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_MOUSE_UP" : {
          "!doc" : "Event type for up mouse on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_MOUSE_MOVE" : {
          "!doc" : "Event type for the marker mouse move.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKERS_HOVER" : {
          "!doc" : "Event type for hover on markers.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "DATA_CHANGED" : {
          "!doc" : "Event type when the data changes.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "TREE_ITEM_UPDATE" : {
          "!doc" : "Data tree CRUD event type for tree item update.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SCROLLER_CHANGE" : {
          "!doc" : "Event type for scroller change.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_SELECT" : {
          "!doc" : "Event type for the connector select.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECT_MARQUEE_FINISH" : {
          "!doc" : "Event type for the select marquee finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "DRILL_CHANGE" : {
          "!doc" : "Event type for the drill.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_MOUSE_DOWN" : {
          "!doc" : "Event type for point at down mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_DBLCLICK" : {
          "!doc" : "Event type for double click on item of legend.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CLOSE" : {
          "!doc" : "Event type for the \"close\".",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECTED_RANGE_CHANGE_FINISH" : {
          "!doc" : "Event type for selected range change finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_MOUSE_MOVE" : {
          "!doc" : "Event type for the connector mouse move.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_MOUSE_UP" : {
          "!doc" : "Event type for item of legend at up mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECT_MARQUEE_START" : {
          "!doc" : "Event type for the select marquee start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_CLICK" : {
          "!doc" : "Event type for click on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANNOTATION_UNSELECT" : {
          "!doc" : "Event type for the annotation unselect.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_SELECT" : {
          "!doc" : "Event type for select on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "DRAG" : {
          "!doc" : "Event type for moving of legend.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ZOOM" : {
          "!doc" : "Event type for the zoom.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_CLICK" : {
          "!doc" : "Event type for click on item of legend.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_MOUSE_MOVE" : {
          "!doc" : "Event type for point at move mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_CLICK" : {
          "!doc" : "Event type for the marker click.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "TREE_ITEM_MOVE" : {
          "!doc" : "Data tree CRUD event type for tree item move.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_MOUSE_MOVE" : {
          "!doc" : "Event type for item of legend at move mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANNOTATION_DRAWING_FINISH" : {
          "!doc" : "Event type for the annotation drawing finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SCROLLER_CHANGE_FINISH" : {
          "!doc" : "Event type for scroller change finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANNOTATION_CHANGE_FINISH" : {
          "!doc" : "Event type for the annotation change finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "!url" : "8.3.0/anychart.enums.EventType",
        "ANNOTATION_CHANGE_START" : {
          "!doc" : "Event type for the annotation change start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECTED_RANGE_BEFORE_CHANGE" : {
          "!doc" : "Event type for selected range before change.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_MOUSE_OVER" : {
          "!doc" : "Event type for point at hover mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECTED_RANGE_CHANGE" : {
          "!doc" : "Event type for selected range change.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_MOUSE_MOVE" : {
          "!doc" : "Event type for move mouse on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_MOUSE_UP" : {
          "!doc" : "Event type for the marker mouse up.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANNOTATION_SELECT" : {
          "!doc" : "Event type for the annotation select.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANIMATION_END" : {
          "!doc" : "Event type for animation finish.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "COMPLETE" : {
          "!doc" : "Event type for the \"complete\".",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_MOUSE_OUT" : {
          "!doc" : "Event type for the marker mouse over.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINTS_SELECT" : {
          "!doc" : "Event type for select on points.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECT_MARQUEE_CHANGE" : {
          "!doc" : "Event type for the select marquee change.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SELECTED_RANGE_CHANGE_START" : {
          "!doc" : "Event type for selected range change start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_MOUSE_DOWN" : {
          "!doc" : "Event type for the connector mouse down.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_MOUSE_OUT" : {
          "!doc" : "Event type for item of legend at leading off mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "TREE_ITEM_REMOVE" : {
          "!doc" : "Data tree CRUD event type for tree item remove.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_DBL_CLICK" : {
          "!doc" : "Event type for double click on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_DBLCLICK" : {
          "!doc" : "Event type for double click on point.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SCROLLER_CHANGE_START" : {
          "!doc" : "Event type for scroller change start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SCROLL_CHANGE" : {
          "!doc" : "Event type for change scroll.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ZOOM_START" : {
          "!doc" : "Event type for the zoom start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_MOUSE_DOWN" : {
          "!doc" : "Event type for item of legend at down mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "LEGEND_ITEM_MOUSE_OVER" : {
          "!doc" : "Event type for item of legend at hover mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "BEFORE_CREATE_CONNECTOR" : {
          "!doc" : "Grid event type for before create connector.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_MOUSE_UP" : {
          "!doc" : "Event type for point at up mouse.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_MOUSE_OUT" : {
          "!doc" : "Event type for the connector mouse out.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_MOUSE_OVER" : {
          "!doc" : "Event type for hover mouse on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_MOUSE_OVER" : {
          "!doc" : "Event type for the connector mouse over.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINTS_HOVER" : {
          "!doc" : "Event type for hover on points.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "DRAG_END" : {
          "!doc" : "Event type for legend at end of moving.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CHART_DRAW" : {
          "!doc" : "Event type for drawing chart.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "DRAG_START" : {
          "!doc" : "Event type for legend at start of moving.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_MOUSE_OVER" : {
          "!doc" : "Event type for the marker mouse over.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "POINT_CLICK" : {
          "!doc" : "Event type for click on point.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EDITOR_COMPLETE" : {
          "!doc" : "The \"editorComplete\" event is dispatched when the \"Complete\" button is pressed. Event is used in the {api:anychart.editor}chart editor{api}",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "CONNECTOR_DBL_CLICK" : {
          "!doc" : "Event type for the connector double click.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "SIGNAL" : {
          "!doc" : "Event type for signal.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ROW_MOUSE_DOWN" : {
          "!doc" : "Event type for down mouse on row.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "ANIMATION_START" : {
          "!doc" : "Event type for animation start.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        },
        "EVENT_MARKER_DBLCLICK" : {
          "!doc" : "Event type for the marker double click.",
          "!url" : "8.3.0/anychart.enums.EventType",
          "!type" : "anychart.enums.EventType"
        }
      },
      "MovingAverageType" : {
        "!doc" : "Smoothing Types Enum. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MovingAverageType",
        "EMA" : {
          "!doc" : "EMA smoothing type.",
          "!url" : "8.3.0/anychart.enums.MovingAverageType",
          "!type" : "anychart.enums.MovingAverageType"
        },
        "SMA" : {
          "!doc" : "SMA smoothing type.",
          "!url" : "8.3.0/anychart.enums.MovingAverageType",
          "!type" : "anychart.enums.MovingAverageType"
        }
      },
      "ScatterTicksMode" : {
        "!doc" : "Scatter ticks mode enum. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScatterTicksMode",
        "LINEAR" : {
          "!doc" : "Scatter ticks go with linear interval, e.g. [1, 2, 3, 4, 5]",
          "!url" : "8.3.0/anychart.enums.ScatterTicksMode",
          "!type" : "anychart.enums.ScatterTicksMode"
        },
        "LOGARITHMIC" : {
          "!doc" : "Scatter ticks go with log-linear interval, e.g. [0.1, 1, 10, 100, 1000]",
          "!url" : "8.3.0/anychart.enums.ScatterTicksMode",
          "!type" : "anychart.enums.ScatterTicksMode"
        }
      },
      "Interval" : {
        "WEEK" : {
          "!doc" : "Interval for ticks by weeks.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "YEAR" : {
          "!doc" : "Interval for ticks by years.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "MONTH" : {
          "!doc" : "Interval for ticks by months.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "!doc" : "Interval enumeration. @enum {string}",
        "QUARTER" : {
          "!doc" : "Interval for ticks by quarter.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "!url" : "8.3.0/anychart.enums.Interval",
        "SEMESTER" : {
          "!doc" : "Interval for ticks by semester.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "DAY" : {
          "!doc" : "Interval for ticks by days.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "MINUTE" : {
          "!doc" : "Interval for ticks by minutes.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "MILLISECOND" : {
          "!doc" : "Interval for ticks by miliseconds.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "THIRD_OF_MONTH" : {
          "!doc" : "Interval for ticks by third of month.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "HOUR" : {
          "!doc" : "Interval for ticks by hours.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        },
        "SECOND" : {
          "!doc" : "Interval for ticks by seconds.",
          "!url" : "8.3.0/anychart.enums.Interval",
          "!type" : "anychart.enums.Interval"
        }
      },
      "StockLabelsOverlapMode" : {
        "!doc" : "Overlap modes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.StockLabelsOverlapMode",
        "ALLOW_MAJOR_OVERLAP" : {
          "!doc" : "Minor labels cannot overlap other minor or major labels, but major labels can overlap major labels.",
          "!url" : "8.3.0/anychart.enums.StockLabelsOverlapMode",
          "!type" : "anychart.enums.StockLabelsOverlapMode"
        },
        "ALLOW_MINOR_OVERLAP" : {
          "!doc" : "Minor labels can overlap other minor labels, but major labels cannot overlap.",
          "!url" : "8.3.0/anychart.enums.StockLabelsOverlapMode",
          "!type" : "anychart.enums.StockLabelsOverlapMode"
        },
        "ALLOW_OVERLAP" : {
          "!doc" : "Allows labels to overlap.",
          "!url" : "8.3.0/anychart.enums.StockLabelsOverlapMode",
          "!type" : "anychart.enums.StockLabelsOverlapMode"
        },
        "NO_OVERLAP" : {
          "!doc" : "Forbids labels overlapping.",
          "!url" : "8.3.0/anychart.enums.StockLabelsOverlapMode",
          "!type" : "anychart.enums.StockLabelsOverlapMode"
        }
      },
      "Align" : {
        "!doc" : "Align enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.Align",
        "BOTTOM" : {
          "!doc" : "Bottom align.",
          "!url" : "8.3.0/anychart.enums.Align",
          "!type" : "anychart.enums.Align"
        },
        "CENTER" : {
          "!doc" : "Center align.",
          "!url" : "8.3.0/anychart.enums.Align",
          "!type" : "anychart.enums.Align"
        },
        "LEFT" : {
          "!doc" : "Left align.",
          "!url" : "8.3.0/anychart.enums.Align",
          "!type" : "anychart.enums.Align"
        },
        "RIGHT" : {
          "!doc" : "Right align.",
          "!url" : "8.3.0/anychart.enums.Align",
          "!type" : "anychart.enums.Align"
        },
        "TOP" : {
          "!doc" : "Top align.",
          "!url" : "8.3.0/anychart.enums.Align",
          "!type" : "anychart.enums.Align"
        }
      },
      "LabelsDisplayMode" : {
        "!doc" : "Display mode for labels. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LabelsDisplayMode",
        "ALWAYS_SHOW" : {
          "!doc" : "Display mode for showing of labels always.",
          "!url" : "8.3.0/anychart.enums.LabelsDisplayMode",
          "!type" : "anychart.enums.LabelsDisplayMode"
        },
        "CLIP" : {
          "!doc" : "Display mode for clipping of labels.",
          "!url" : "8.3.0/anychart.enums.LabelsDisplayMode",
          "!type" : "anychart.enums.LabelsDisplayMode"
        },
        "DROP" : {
          "!doc" : "Display mode for dropping of labels.",
          "!url" : "8.3.0/anychart.enums.LabelsDisplayMode",
          "!type" : "anychart.enums.LabelsDisplayMode"
        }
      },
      "MekkoSeriesType" : {
        "!doc" : "Mekko series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MekkoSeriesType",
        "MEKKO" : {
          "!doc" : "Series type is mekko.",
          "!url" : "8.3.0/anychart.enums.MekkoSeriesType",
          "!type" : "anychart.enums.MekkoSeriesType"
        }
      },
      "FontStyle" : {
        "!doc" : "Font style enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.FontStyle",
        "ITALIC" : {
          "!doc" : "Italic.",
          "!url" : "8.3.0/anychart.enums.FontStyle",
          "!type" : "anychart.enums.FontStyle"
        },
        "NORMAL" : {
          "!doc" : "Normal.",
          "!url" : "8.3.0/anychart.enums.FontStyle",
          "!type" : "anychart.enums.FontStyle"
        },
        "OBLIQUE" : {
          "!doc" : "Oblique.",
          "!url" : "8.3.0/anychart.enums.FontStyle",
          "!type" : "anychart.enums.FontStyle"
        }
      },
      "HAlign" : {
        "!doc" : "Horizontal align enum. @enum {string}",
        "!url" : "8.3.0/anychart.enums.HAlign",
        "CENTER" : {
          "!doc" : "The inline contents are centered within the line box.",
          "!url" : "8.3.0/anychart.enums.HAlign",
          "!type" : "anychart.enums.HAlign"
        },
        "END" : {
          "!doc" : "The same as right if direction is left-to-right and left if direction is right-to-left.",
          "!url" : "8.3.0/anychart.enums.HAlign",
          "!type" : "anychart.enums.HAlign"
        },
        "LEFT" : {
          "!doc" : "Aligns the text to the left.",
          "!url" : "8.3.0/anychart.enums.HAlign",
          "!type" : "anychart.enums.HAlign"
        },
        "RIGHT" : {
          "!doc" : "Aligns the text to the right.",
          "!url" : "8.3.0/anychart.enums.HAlign",
          "!type" : "anychart.enums.HAlign"
        },
        "START" : {
          "!doc" : "The same as left if direction is left-to-right and right if direction is right-to-left.",
          "!url" : "8.3.0/anychart.enums.HAlign",
          "!type" : "anychart.enums.HAlign"
        }
      },
      "!url" : "8.3.0/anychart.enums",
      "MapAsTableMode" : {
        "!doc" : "Modes enum for mapAsTable function. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MapAsTableMode",
        "OHLC" : {
          "!doc" : "Open-High-Low-Close values.",
          "!url" : "8.3.0/anychart.enums.MapAsTableMode",
          "!type" : "anychart.enums.MapAsTableMode"
        },
        "RANGE" : {
          "!doc" : "High-Low values.",
          "!url" : "8.3.0/anychart.enums.MapAsTableMode",
          "!type" : "anychart.enums.MapAsTableMode"
        },
        "VALUE" : {
          "!doc" : "Single values.",
          "!url" : "8.3.0/anychart.enums.MapAsTableMode",
          "!type" : "anychart.enums.MapAsTableMode"
        }
      },
      "ChartDataExportMode" : {
        "!doc" : "Data export mode enum. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ChartDataExportMode",
        "DEFAULT" : {
          "!doc" : "Current series export mode.",
          "!url" : "8.3.0/anychart.enums.ChartDataExportMode",
          "!type" : "anychart.enums.ChartDataExportMode"
        },
        "GROUPED" : {
          "!doc" : "Grouped data export mode, works only in stock charts.",
          "!url" : "8.3.0/anychart.enums.ChartDataExportMode",
          "!type" : "anychart.enums.ChartDataExportMode"
        },
        "RAW" : {
          "!doc" : "Raw Data export mode.",
          "!url" : "8.3.0/anychart.enums.ChartDataExportMode",
          "!type" : "anychart.enums.ChartDataExportMode"
        },
        "SELECTED" : {
          "!doc" : "Selected data export mode, works only in stock charts.",
          "!url" : "8.3.0/anychart.enums.ChartDataExportMode",
          "!type" : "anychart.enums.ChartDataExportMode"
        }
      },
      "LegendItemIconType" : {
        "STEP_LINE" : {
          "!doc" : "Icon type is step line.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "CANDLESTICK" : {
          "!doc" : "Icon type is candlestick.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "RANGE_BAR" : {
          "!doc" : "Icon type is range bar.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "BAR" : {
          "!doc" : "Icon type is bar.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "!doc" : "Predefined icons type. @enum {string}",
        "OHLC" : {
          "!doc" : "Icon type is OHLC.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "RANGE_SPLINE_AREA" : {
          "!doc" : "Icon type is range spline area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "CIRCLE" : {
          "!doc" : "Icon type is circle.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "SPLINE_AREA" : {
          "!doc" : "Icon type is spline area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "BUBBLE" : {
          "!doc" : "Icon type is bubble.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "RANGE_COLUMN" : {
          "!doc" : "Icon type is range column.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "!url" : "8.3.0/anychart.enums.LegendItemIconType",
        "MARKER" : {
          "!doc" : "Icon type is marker.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "LINE" : {
          "!doc" : "Icon type is line.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "RANGE_STEP_AREA" : {
          "!doc" : "Icon type is range step area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "STEP_AREA" : {
          "!doc" : "Icon type is step area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "AREA" : {
          "!doc" : "Icon type is area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "SPLINE" : {
          "!doc" : "Icon type is spline.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "RANGE_AREA" : {
          "!doc" : "Icon type is range area.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "SQUARE" : {
          "!doc" : "Icon type is square.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        },
        "COLUMN" : {
          "!doc" : "Icon type is column.",
          "!url" : "8.3.0/anychart.enums.LegendItemIconType",
          "!type" : "anychart.enums.LegendItemIconType"
        }
      },
      "EventMarkerPosition" : {
        "!doc" : "Event marker position list. @enum {string}",
        "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
        "AXIS" : {
          "!doc" : "A marker is displayed on a bottom bound of a plot.",
          "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
          "!type" : "anychart.enums.EventMarkerPosition"
        },
        "SERIES" : {
          "!doc" : "Position on a series value.",
          "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
          "!type" : "anychart.enums.EventMarkerPosition"
        },
        "SERIES_NEGATIVE" : {
          "!doc" : "A marker is displayed on a series value when a value is less zero or value is zero.",
          "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
          "!type" : "anychart.enums.EventMarkerPosition"
        },
        "SERIES_POSITIVE" : {
          "!doc" : "A marker is displayed on a series value when a value is greater zero or value is zero.",
          "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
          "!type" : "anychart.enums.EventMarkerPosition"
        },
        "ZERO" : {
          "!doc" : "A marker is displayed on a series value when the value is zero.",
          "!url" : "8.3.0/anychart.enums.EventMarkerPosition",
          "!type" : "anychart.enums.EventMarkerPosition"
        }
      },
      "ScaleCompareWithMode" : {
        "!doc" : "Enum for predefined part of LinearScale.compareWith() acceptable values. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScaleCompareWithMode",
        "FIRST_VISIBLE" : {
          "!doc" : "Compares scale with first visible point.",
          "!url" : "8.3.0/anychart.enums.ScaleCompareWithMode",
          "!type" : "anychart.enums.ScaleCompareWithMode"
        },
        "SERIES_START" : {
          "!doc" : "Compares scale with series start.",
          "!url" : "8.3.0/anychart.enums.ScaleCompareWithMode",
          "!type" : "anychart.enums.ScaleCompareWithMode"
        }
      },
      "TooltipDisplayMode" : {
        "!doc" : "Tooltip display mode settings. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TooltipDisplayMode",
        "SEPARATED" : {
          "!doc" : "Each series of the chart has its own tooltip.",
          "!url" : "8.3.0/anychart.enums.TooltipDisplayMode",
          "!type" : "anychart.enums.TooltipDisplayMode"
        },
        "SINGLE" : {
          "!doc" : "Tooltip is displayed on nearest point to cursor. TextFormatter have information only about one point.",
          "!url" : "8.3.0/anychart.enums.TooltipDisplayMode",
          "!type" : "anychart.enums.TooltipDisplayMode"
        },
        "UNION" : {
          "!doc" : "Displays only one tooltip (doesn\"t depend on series count), but textFormatter have information about all series points.",
          "!url" : "8.3.0/anychart.enums.TooltipDisplayMode",
          "!type" : "anychart.enums.TooltipDisplayMode"
        }
      },
      "EditorSteps" : {
        "!doc" : "Names of all the chart editor {api:anychart.editor.Editor#step}steps{api}. @enum {string}",
        "!url" : "8.3.0/anychart.enums.EditorSteps",
        "APPEARANCE" : {
          "!doc" : "Visual Appearance step.",
          "!url" : "8.3.0/anychart.enums.EditorSteps",
          "!type" : "anychart.enums.EditorSteps"
        },
        "CHART" : {
          "!doc" : "Setup Chart step.",
          "!url" : "8.3.0/anychart.enums.EditorSteps",
          "!type" : "anychart.enums.EditorSteps"
        },
        "DATA" : {
          "!doc" : "Configure Data step.",
          "!url" : "8.3.0/anychart.enums.EditorSteps",
          "!type" : "anychart.enums.EditorSteps"
        },
        "EXPORT" : {
          "!doc" : "Export step.",
          "!url" : "8.3.0/anychart.enums.EditorSteps",
          "!type" : "anychart.enums.EditorSteps"
        }
      },
      "TableSearchMode" : {
        "!doc" : "Enum for data table search modes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TableSearchMode",
        "EXACT" : {
          "!doc" : "Table search mode is exact.",
          "!url" : "8.3.0/anychart.enums.TableSearchMode",
          "!type" : "anychart.enums.TableSearchMode"
        },
        "EXACT_OR_NEXT" : {
          "!doc" : "Table search mode is exact or next.",
          "!url" : "8.3.0/anychart.enums.TableSearchMode",
          "!type" : "anychart.enums.TableSearchMode"
        },
        "EXACT_OR_PREV" : {
          "!doc" : "Table search mode is exact or prev.",
          "!url" : "8.3.0/anychart.enums.TableSearchMode",
          "!type" : "anychart.enums.TableSearchMode"
        },
        "NEAREST" : {
          "!doc" : "Table search mode is nearest.",
          "!url" : "8.3.0/anychart.enums.TableSearchMode",
          "!type" : "anychart.enums.TableSearchMode"
        }
      },
      "StringToken" : {
        "RELATIVE_FREQUENCY" : {
          "!doc" : "Relative frequency of the point. Used in pareto series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "ACTIVITY_INDEX" : {
          "!doc" : "Activity index. Used in Resource charts.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_AXIS_NAME" : {
          "!doc" : "The title text of the X Axis.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_MEDIAN" : {
          "!doc" : "The median X value of all the points within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "PERT_CHART_PROJECT_DURATION" : {
          "!doc" : "PERT chart statistics - project duration.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_SUM" : {
          "!doc" : "The sum of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "VALUE" : {
          "!doc" : "The value of this point.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_MIN" : {
          "!doc" : "The minimal X value of all the elements within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_BUBBLE_SIZE_AVERAGE" : {
          "!doc" : "The average bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_MEDIAN" : {
          "!doc" : "The median y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "INDEX" : {
          "!doc" : "The index of this point in the series this point represents (zero-based).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "!doc" : "String token enumeration. @enum {string}",
        "OPEN" : {
          "!doc" : "The open value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_RANGE_MIN" : {
          "!doc" : "The minimal range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "BUBBLE_SIZE_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_NAME" : {
          "!doc" : "The name of this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_MIN" : {
          "!doc" : "The minimal range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_SUM" : {
          "!doc" : "The sum of all the points X values (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_X_MIN" : {
          "!doc" : "The minimal of all the points X values (Scatter plot chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_BUBBLE_SIZE_MODE" : {
          "!doc" : "The mode bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MAX_Y_VALUE_POINT_NAME" : {
          "!doc" : "The name of the point with a maximal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_MIN" : {
          "!doc" : "The minimal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_MEDIAN" : {
          "!doc" : "The median range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_MODE" : {
          "!doc" : "The mode X value of all the points within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "NAME" : {
          "!doc" : "The name of this point.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_NAME" : {
          "!doc" : "The name of the category.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_RANGE_MIN" : {
          "!doc" : "The minimal of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "RANGE_END" : {
          "!doc" : "The ending value of this point (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "RANGE" : {
          "!doc" : "The range of this point (RangeEnd - RangeStart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "AXIS_SCALE_MAX" : {
          "!doc" : "The maximal scale value.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_SUM" : {
          "!doc" : "The sum of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "Y_VALUE" : {
          "!doc" : "The Y value of this point.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "AXIS_NAME" : {
          "!doc" : "The name of the axis.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_LAST_X_VALUE" : {
          "!doc" : "The X value of the last point in this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CLOSE" : {
          "!doc" : "The close value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "AXIS_SCALE_MIN" : {
          "!doc" : "The minimal scale value.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_AVERAGE" : {
          "!doc" : "The average y value of all the points.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MAX_Y_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_MAX" : {
          "!doc" : "The maximal y value of all the elements within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_SUM" : {
          "!doc" : "The sum of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_RANGE_SUM" : {
          "!doc" : "The sum of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "BUBBLE_SIZE_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_MODE" : {
          "!doc" : "The mode of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "PERT_CHART_CRITICAL_PATH_STANDARD_DEVIATION" : {
          "!doc" : "PERT chart statistics - standard deviation for critical path.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_AVERAGE" : {
          "!doc" : "Category Y range average.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_BUBBLE_MIN_SIZE" : {
          "!doc" : "The minimal of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "LOW" : {
          "!doc" : "The low value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_MAX" : {
          "!doc" : "The maximal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_FIRST_Y_VALUE" : {
          "!doc" : "The y value of the first point in this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_MODE" : {
          "!doc" : "The mode range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "Y_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "END" : {
          "!doc" : "Activity end date. Used in Resource charts.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_POINT_COUNT" : {
          "!doc" : "The number of points in this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_SUM" : {
          "!doc" : "The sum of all ranges in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "!url" : "8.3.0/anychart.enums.StringToken",
        "SERIES_BUBBLE_SIZE_MEDIAN" : {
          "!doc" : "The median bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_PERCENT_OF_TOTAL" : {
          "!doc" : "Category Y range percent of total (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_BUBBLE_MAX_SIZE" : {
          "!doc" : "The maximal bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_X_AVERAGE" : {
          "!doc" : "The average X value of all the points (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CUMULATIVE_FREQUENCY" : {
          "!doc" : "Cumulative frequency of the point. Used in pareto series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "RANGE_START" : {
          "!doc" : "The starting value of this point (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "X_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_X_SUM" : {
          "!doc" : "The sum of all the points X values (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SELECTED_POINTS_SUM" : {
          "!doc" : "The sum of the selected points on the {api:anychart.charts.Venn}Venn diagram{api}.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "MINUTES_PER_DAY" : {
          "!doc" : "Activity minutes per day. Used in Resource charts.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_MODE" : {
          "!doc" : "The mode y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_PERCENT_OF_TOTAL" : {
          "!doc" : "The percent of all the data on the chart this category represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "X_VALUE" : {
          "!doc" : "The X value of this point (Scatter Plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MAX_Y_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal sum of the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_AVERAGE" : {
          "!doc" : "The average X value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "RESOURCE_INDEX" : {
          "!doc" : "Resource index that holds the activity. Used in Resource charts.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_BUBBLE_MAX_SIZE" : {
          "!doc" : "The maximal of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "AVERAGE" : {
          "!doc" : "Average.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_Y_RANGE_MAX" : {
          "!doc" : "The maximal of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "Y_PERCENT_OF_CATEGORY" : {
          "!doc" : "The percentage of all the points with the same name this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "BUBBLE_SIZE" : {
          "!doc" : "The bubble size value of this point (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_BUBBLE_SIZE_SUM" : {
          "!doc" : "The sum of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_BUBBLE_MIN_SIZE" : {
          "!doc" : "The minimal bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "HIGH" : {
          "!doc" : "The high value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_SERIES_COUNT" : {
          "!doc" : "The number of the series within the chart.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_RANGE_MAX" : {
          "!doc" : "The maximal range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "X_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents (Scatter Plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_MEDIAN" : {
          "!doc" : "The median of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MIN_Y_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal sum of the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "CATEGORY_Y_AVERAGE" : {
          "!doc" : "The average of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_RANGE_MAX" : {
          "!doc" : "The maximal range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_BUBBLE_SIZE_AVERAGE" : {
          "!doc" : "The average bubble size of all the points (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_X_MAX" : {
          "!doc" : "The maximal X value of all the elements within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_MIN" : {
          "!doc" : "The minimal y value of all the elements within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "START" : {
          "!doc" : "Activity start date. Used in Resource charts.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MIN_Y_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_POINT_COUNT" : {
          "!doc" : "The number of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_X_MAX" : {
          "!doc" : "The maximal of all the points X values (Scatter plot chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_AXIS_NAME" : {
          "!doc" : "The title text of the Y Axis.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_RANGE_SUM" : {
          "!doc" : "The sum of all ranges in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_BUBBLE_SIZE_SUM" : {
          "!doc" : "The sum of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_LAST_Y_VALUE" : {
          "!doc" : "The y value of the first point in this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "DATA_PLOT_MIN_Y_VALUE_POINT_NAME" : {
          "!doc" : "The name of the point with a minimal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_FIRST_X_VALUE" : {
          "!doc" : "The X value of the first point in this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "Y_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "SERIES_Y_AVERAGE" : {
          "!doc" : "The average y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        },
        "BUBBLE_SIZE_PERCENT_OF_CATEGORY" : {
          "!doc" : "The percentage of all the points with the same name this point represents (Categorized charts).",
          "!url" : "8.3.0/anychart.enums.StringToken",
          "!type" : "anychart.enums.StringToken"
        }
      },
      "LabelsOverlapMode" : {
        "!doc" : "Overlap modes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LabelsOverlapMode",
        "ALLOW_OVERLAP" : {
          "!doc" : "Allows labels to overlap.",
          "!url" : "8.3.0/anychart.enums.LabelsOverlapMode",
          "!type" : "anychart.enums.LabelsOverlapMode"
        },
        "NO_OVERLAP" : {
          "!doc" : "Forbids labels to overlap.",
          "!url" : "8.3.0/anychart.enums.LabelsOverlapMode",
          "!type" : "anychart.enums.LabelsOverlapMode"
        }
      },
      "TreeFillingMethod" : {
        "!doc" : "Data fill method. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TreeFillingMethod",
        "AS_TABLE" : {
          "!doc" : "Using this method means that the original data will be treated as a linear array of objects each of which",
          "!url" : "8.3.0/anychart.enums.TreeFillingMethod",
          "!type" : "anychart.enums.TreeFillingMethod"
        },
        "AS_TREE" : {
          "!doc" : "Using this method means that the original data will be treated as an array of objects with a hierarchical tree",
          "!url" : "8.3.0/anychart.enums.TreeFillingMethod",
          "!type" : "anychart.enums.TreeFillingMethod"
        }
      },
      "Position" : {
        "LEFT_BOTTOM" : {
          "!doc" : "The left-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "RIGHT_BOTTOM" : {
          "!doc" : "The right-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "RIGHT_CENTER" : {
          "!doc" : "The right-center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "!doc" : "Position enum. Defines 9 items. Similar to Anchor. Distinct by meaning. @enum {string}",
        "CENTER" : {
          "!doc" : "The center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "AUTO" : {
          "!doc" : "Automatic mode for anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "!url" : "8.3.0/anychart.enums.Position",
        "CENTER_BOTTOM" : {
          "!doc" : "The center-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "LEFT_CENTER" : {
          "!doc" : "The left-center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "CENTER_TOP" : {
          "!doc" : "The center-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "RIGHT_TOP" : {
          "!doc" : "The right-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        },
        "LEFT_TOP" : {
          "!doc" : "The left-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Position",
          "!type" : "anychart.enums.Position"
        }
      },
      "ChartScrollerPosition" : {
        "!doc" : "ChartScroller possible positions. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ChartScrollerPosition",
        "AFTER_AXES" : {
          "!doc" : "Scroller position is after axis.",
          "!url" : "8.3.0/anychart.enums.ChartScrollerPosition",
          "!type" : "anychart.enums.ChartScrollerPosition"
        },
        "BEFORE_AXES" : {
          "!doc" : "Scroller position is before axis.",
          "!url" : "8.3.0/anychart.enums.ChartScrollerPosition",
          "!type" : "anychart.enums.ChartScrollerPosition"
        }
      },
      "Anchor" : {
        "LEFT_BOTTOM" : {
          "!doc" : "The left-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "RIGHT_BOTTOM" : {
          "!doc" : "The right-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "RIGHT_CENTER" : {
          "!doc" : "The right-center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "!doc" : "Anchor enum. Defines 9 items. @enum {string}",
        "CENTER" : {
          "!doc" : "The center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "AUTO" : {
          "!doc" : "Automatic mode for anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "!url" : "8.3.0/anychart.enums.Anchor",
        "CENTER_BOTTOM" : {
          "!doc" : "The center-bottom anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "LEFT_CENTER" : {
          "!doc" : "The left-center anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "CENTER_TOP" : {
          "!doc" : "The center-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "RIGHT_TOP" : {
          "!doc" : "The right-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        },
        "LEFT_TOP" : {
          "!doc" : "The left-top anchor of the element.",
          "!url" : "8.3.0/anychart.enums.Anchor",
          "!type" : "anychart.enums.Anchor"
        }
      },
      "LegendPositionMode" : {
        "!doc" : "Legend position mode enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LegendPositionMode",
        "INSIDE" : {
          "!doc" : "Inside position mode.",
          "!url" : "8.3.0/anychart.enums.LegendPositionMode",
          "!type" : "anychart.enums.LegendPositionMode"
        },
        "OUTSIDE" : {
          "!doc" : "Outside position mode.",
          "!url" : "8.3.0/anychart.enums.LegendPositionMode",
          "!type" : "anychart.enums.LegendPositionMode"
        }
      },
      "ScaleRangeMode" : {
        "!doc" : "Scale range mode for the axis markers (line, range, text). @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScaleRangeMode",
        "CONSIDER" : {
          "!doc" : "The 'consider' mode consider the marker value in the scale calculation.",
          "!url" : "8.3.0/anychart.enums.ScaleRangeMode",
          "!type" : "anychart.enums.ScaleRangeMode"
        },
        "NONE" : {
          "!doc" : "The 'none' mode doesn't consider the marker value in the scale calculation.",
          "!url" : "8.3.0/anychart.enums.ScaleRangeMode",
          "!type" : "anychart.enums.ScaleRangeMode"
        }
      },
      "A11yMode" : {
        "!doc" : "Accessibility modes. @enum {string}",
        "!url" : "8.3.0/anychart.enums.A11yMode",
        "CHART_ELEMENTS" : {
          "!doc" : "Generates chart as a chart elements (aria tags) for VoiceOver.",
          "!url" : "8.3.0/anychart.enums.A11yMode",
          "!type" : "anychart.enums.A11yMode"
        },
        "DATA_TABLE" : {
          "!doc" : "Generates chart as a table for VoiceOver.",
          "!url" : "8.3.0/anychart.enums.A11yMode",
          "!type" : "anychart.enums.A11yMode"
        }
      },
      "StockRangeType" : {
        "!doc" : "Stock period range type. @enum {string}",
        "!url" : "8.3.0/anychart.enums.StockRangeType",
        "MAX" : {
          "!doc" : "Range type for maximum period.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "MTD" : {
          "!doc" : "Range type for \"month to day\" period.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "POINTS" : {
          "!doc" : "Range type for points.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "QTD" : {
          "!doc" : "Range type for \"quarter to day\" period.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "RANGE" : {
          "!doc" : "Range type for range.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "UNIT" : {
          "!doc" : "Range type for unit.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        },
        "YTD" : {
          "!doc" : "Range type for \"year to day\" period.",
          "!url" : "8.3.0/anychart.enums.StockRangeType",
          "!type" : "anychart.enums.StockRangeType"
        }
      },
      "CircularGaugePointerType" : {
        "!doc" : "List of all circular gauge pointers type. @enum {string}",
        "!url" : "8.3.0/anychart.enums.CircularGaugePointerType",
        "BAR" : {
          "!doc" : "Bar pointer.",
          "!url" : "8.3.0/anychart.enums.CircularGaugePointerType",
          "!type" : "anychart.enums.CircularGaugePointerType"
        },
        "KNOB" : {
          "!doc" : "Knob pointer.",
          "!url" : "8.3.0/anychart.enums.CircularGaugePointerType",
          "!type" : "anychart.enums.CircularGaugePointerType"
        },
        "MARKER" : {
          "!doc" : "Marker pointer.",
          "!url" : "8.3.0/anychart.enums.CircularGaugePointerType",
          "!type" : "anychart.enums.CircularGaugePointerType"
        },
        "NEEDLE" : {
          "!doc" : "Needle pointer.",
          "!url" : "8.3.0/anychart.enums.CircularGaugePointerType",
          "!type" : "anychart.enums.CircularGaugePointerType"
        }
      },
      "ErrorMode" : {
        "!doc" : "Series error mode enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ErrorMode",
        "BOTH" : {
          "!doc" : "Series error mode for X and value.",
          "!url" : "8.3.0/anychart.enums.ErrorMode",
          "!type" : "anychart.enums.ErrorMode"
        },
        "NONE" : {
          "!doc" : "No series error mode.",
          "!url" : "8.3.0/anychart.enums.ErrorMode",
          "!type" : "anychart.enums.ErrorMode"
        },
        "VALUE" : {
          "!doc" : "Series error mode for value.",
          "!url" : "8.3.0/anychart.enums.ErrorMode",
          "!type" : "anychart.enums.ErrorMode"
        },
        "X" : {
          "!doc" : "Series error mode for X value.",
          "!url" : "8.3.0/anychart.enums.ErrorMode",
          "!type" : "anychart.enums.ErrorMode"
        }
      },
      "SelectionMode" : {
        "!doc" : "Selection mode enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.SelectionMode",
        "DRILL_DOWN" : {
          "!doc" : "Charts selection mode for drill down.",
          "!url" : "8.3.0/anychart.enums.SelectionMode",
          "!type" : "anychart.enums.SelectionMode"
        },
        "MULTI_SELECT" : {
          "!doc" : "Charts selection mode for multi select.",
          "!url" : "8.3.0/anychart.enums.SelectionMode",
          "!type" : "anychart.enums.SelectionMode"
        },
        "NONE" : {
          "!doc" : "No selection mode.",
          "!url" : "8.3.0/anychart.enums.SelectionMode",
          "!type" : "anychart.enums.SelectionMode"
        },
        "SINGLE_SELECT" : {
          "!doc" : "Charts selection mode for single select.",
          "!url" : "8.3.0/anychart.enums.SelectionMode",
          "!type" : "anychart.enums.SelectionMode"
        }
      },
      "CrosshairDisplayMode" : {
        "!doc" : "Display mode for crosshair. @enum {string}",
        "!url" : "8.3.0/anychart.enums.CrosshairDisplayMode",
        "FLOAT" : {
          "!doc" : "Display mode is float.",
          "!url" : "8.3.0/anychart.enums.CrosshairDisplayMode",
          "!type" : "anychart.enums.CrosshairDisplayMode"
        },
        "STICKY" : {
          "!doc" : "Display mode is sticky.",
          "!url" : "8.3.0/anychart.enums.CrosshairDisplayMode",
          "!type" : "anychart.enums.CrosshairDisplayMode"
        }
      },
      "BulletMarkerType" : {
        "!doc" : "Bullet marker type. @enum {string}",
        "!url" : "8.3.0/anychart.enums.BulletMarkerType",
        "BAR" : {
          "!doc" : "Bullet marker type bar.",
          "!url" : "8.3.0/anychart.enums.BulletMarkerType",
          "!type" : "anychart.enums.BulletMarkerType"
        },
        "ELLIPSE" : {
          "!doc" : "Bullet marker type ellipse.",
          "!url" : "8.3.0/anychart.enums.BulletMarkerType",
          "!type" : "anychart.enums.BulletMarkerType"
        },
        "LINE" : {
          "!doc" : "Bullet marker type line.",
          "!url" : "8.3.0/anychart.enums.BulletMarkerType",
          "!type" : "anychart.enums.BulletMarkerType"
        },
        "X" : {
          "!doc" : "Bullet marker type X.",
          "!url" : "8.3.0/anychart.enums.BulletMarkerType",
          "!type" : "anychart.enums.BulletMarkerType"
        }
      },
      "TimeTrackingMode" : {
        "!doc" : "Time tracking mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TimeTrackingMode",
        "ACTIVITY_PER_CHART" : {
          "!doc" : "The height depends on the maximum occupancy of the resource. The maximum height of all resources used for all rows.",
          "!url" : "8.3.0/anychart.enums.TimeTrackingMode",
          "!type" : "anychart.enums.TimeTrackingMode"
        },
        "ACTIVITY_PER_RESOURCE" : {
          "!doc" : "The height depends on the maximum occupancy of the resource. The height is calculated for each row.",
          "!url" : "8.3.0/anychart.enums.TimeTrackingMode",
          "!type" : "anychart.enums.TimeTrackingMode"
        },
        "AVAILABILITY_PER_CHART" : {
          "!doc" : "Row height depends on the total maximum time available in the calendar. The maximum height of all resources used for all rows.",
          "!url" : "8.3.0/anychart.enums.TimeTrackingMode",
          "!type" : "anychart.enums.TimeTrackingMode"
        },
        "AVAILABILITY_PER_RESOURCE" : {
          "!doc" : "Row height depends on the maximum total time available in the calendar. The height is calculated for each row.",
          "!url" : "8.3.0/anychart.enums.TimeTrackingMode",
          "!type" : "anychart.enums.TimeTrackingMode"
        }
      },
      "AnnotationTypes" : {
        "FIBONACCI_ARC" : {
          "!doc" : "Fibonacci arc annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "!doc" : "Annotations type. @enum {string}",
        "RECTANGLE" : {
          "!doc" : "Rectangle annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "VERTICAL_LINE" : {
          "!doc" : "Vertical line annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "FIBONACCI_FAN" : {
          "!doc" : "Fibonacci fan annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "!url" : "8.3.0/anychart.enums.AnnotationTypes",
        "MARKER" : {
          "!doc" : "Marker annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "LINE" : {
          "!doc" : "Line annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "ELLIPSE" : {
          "!doc" : "Ellipse annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "FIBONACCI_TIMEZONES" : {
          "!doc" : "Fibonacci timezones annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "ANDREWS_PITCHFORK" : {
          "!doc" : "Andrews Pitchfork annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "LABEL" : {
          "!doc" : "Label annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "TRIANGLE" : {
          "!doc" : "Triangle annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "INFINITE_LINE" : {
          "!doc" : "Infinite line annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "TREND_CHANNEL" : {
          "!doc" : "Trend channel annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "FIBONACCI_RETRACEMENT" : {
          "!doc" : "Fibonacci retracement annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "RAY" : {
          "!doc" : "Ray annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        },
        "HORIZONTAL_LINE" : {
          "!doc" : "Horizontal line annotation.",
          "!url" : "8.3.0/anychart.enums.AnnotationTypes",
          "!type" : "anychart.enums.AnnotationTypes"
        }
      },
      "GaugeSidePosition" : {
        "!doc" : "Gauges elements position relative axis. @enum {string}",
        "!url" : "8.3.0/anychart.enums.GaugeSidePosition",
        "CENTER" : {
          "!doc" : "Inside a axis, no matter where the gauge center is.",
          "!url" : "8.3.0/anychart.enums.GaugeSidePosition",
          "!type" : "anychart.enums.GaugeSidePosition"
        },
        "INSIDE" : {
          "!doc" : "Outside of a axis, but closer to the gauge center.",
          "!url" : "8.3.0/anychart.enums.GaugeSidePosition",
          "!type" : "anychart.enums.GaugeSidePosition"
        },
        "OUTSIDE" : {
          "!doc" : "Outside of a axis, but further from the gauge center.",
          "!url" : "8.3.0/anychart.enums.GaugeSidePosition",
          "!type" : "anychart.enums.GaugeSidePosition"
        }
      },
      "AvailabilityPeriod" : {
        "!doc" : "Availability period for calendar. @enum {string}",
        "!url" : "8.3.0/anychart.enums.AvailabilityPeriod",
        "DAY" : {
          "!doc" : "Each day.",
          "!url" : "8.3.0/anychart.enums.AvailabilityPeriod",
          "!type" : "anychart.enums.AvailabilityPeriod"
        },
        "NONE" : {
          "!doc" : "None.",
          "!url" : "8.3.0/anychart.enums.AvailabilityPeriod",
          "!type" : "anychart.enums.AvailabilityPeriod"
        },
        "WEEK" : {
          "!doc" : "Each week.",
          "!url" : "8.3.0/anychart.enums.AvailabilityPeriod",
          "!type" : "anychart.enums.AvailabilityPeriod"
        },
        "YEAR" : {
          "!doc" : "Each year.",
          "!url" : "8.3.0/anychart.enums.AvailabilityPeriod",
          "!type" : "anychart.enums.AvailabilityPeriod"
        }
      },
      "GaugeScaleTypes" : {
        "!doc" : "List of all scale types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.GaugeScaleTypes",
        "LINEAR" : {
          "!doc" : "Linear scale.",
          "!url" : "8.3.0/anychart.enums.GaugeScaleTypes",
          "!type" : "anychart.enums.GaugeScaleTypes"
        },
        "LOG" : {
          "!doc" : "Logarithmic scale.",
          "!url" : "8.3.0/anychart.enums.GaugeScaleTypes",
          "!type" : "anychart.enums.GaugeScaleTypes"
        }
      },
      "ConnectorType" : {
        "!doc" : "Connection types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ConnectorType",
        "FINISH_FINISH" : {
          "!doc" : "Connector type from finish to finish.",
          "!url" : "8.3.0/anychart.enums.ConnectorType",
          "!type" : "anychart.enums.ConnectorType"
        },
        "FINISH_START" : {
          "!doc" : "Connector type from finish to start.",
          "!url" : "8.3.0/anychart.enums.ConnectorType",
          "!type" : "anychart.enums.ConnectorType"
        },
        "START_FINISH" : {
          "!doc" : "Connector type from start to finish.",
          "!url" : "8.3.0/anychart.enums.ConnectorType",
          "!type" : "anychart.enums.ConnectorType"
        },
        "START_START" : {
          "!doc" : "Connector type from start to start.",
          "!url" : "8.3.0/anychart.enums.ConnectorType",
          "!type" : "anychart.enums.ConnectorType"
        }
      },
      "Cursor" : {
        "EW_RESIZE" : {
          "!doc" : "EW-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "!doc" : "Cursor enum. Defines 19 items. @enum {string}",
        "NS_RESIZE" : {
          "!doc" : "NS-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "HELP" : {
          "!doc" : "Help type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "NWSE_RESIZE" : {
          "!doc" : "NWSE-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "S_RESIZE" : {
          "!doc" : "S-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "!url" : "8.3.0/anychart.enums.Cursor",
        "NESW_RESIZE" : {
          "!doc" : "NESW-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "NW_RESIZE" : {
          "!doc" : "NW-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "TEXT" : {
          "!doc" : "Text type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "E_RESIZE" : {
          "!doc" : "E-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "SW_RESIZE" : {
          "!doc" : "SW-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "DEFAULT" : {
          "!doc" : "Default type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "NE_RESIZE" : {
          "!doc" : "NE-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "POINTER" : {
          "!doc" : "Pointer type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "WAIT" : {
          "!doc" : "Wait type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "N_RESIZE" : {
          "!doc" : "N-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "CROSSHAIR" : {
          "!doc" : "Crosshair type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "SE_RESIZE" : {
          "!doc" : "SE-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "W_RESIZE" : {
          "!doc" : "W-resize type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        },
        "MOVE" : {
          "!doc" : "Move type",
          "!url" : "8.3.0/anychart.enums.Cursor",
          "!type" : "anychart.enums.Cursor"
        }
      },
      "DataField" : {
        "FROM" : {
          "!doc" : "Default field name for \"from\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "!doc" : "Pert reserved names of field in data. @enum {string}",
        "MOST_LIKELY" : {
          "!doc" : "Default field name for \"mostLikely\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "NAME" : {
          "!doc" : "Default field name for \"name\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "OPTIMISTIC" : {
          "!doc" : "Default field name for \"optimistic\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "!url" : "8.3.0/anychart.enums.DataField",
        "EXPECTED" : {
          "!doc" : "Default field name for \"expected\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "ID" : {
          "!doc" : "Default field name for \"ID\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "DEPENDS_ON" : {
          "!doc" : "Default field name for \"dependencyOn\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "TO" : {
          "!doc" : "Default field name for \"TO\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "DURATION" : {
          "!doc" : "Default field name for \"duration\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        },
        "PESSIMISTIC" : {
          "!doc" : "Default field name for \"pessimistic\" value.",
          "!url" : "8.3.0/anychart.enums.DataField",
          "!type" : "anychart.enums.DataField"
        }
      },
      "SparklineSeriesType" : {
        "!doc" : "List of all series types. See method at: {@link anychart.charts.Sparkline#type} @enum {string}",
        "!url" : "8.3.0/anychart.enums.SparklineSeriesType",
        "AREA" : {
          "!doc" : "Series type is area.",
          "!url" : "8.3.0/anychart.enums.SparklineSeriesType",
          "!type" : "anychart.enums.SparklineSeriesType"
        },
        "COLUMN" : {
          "!doc" : "Series type is column.",
          "!url" : "8.3.0/anychart.enums.SparklineSeriesType",
          "!type" : "anychart.enums.SparklineSeriesType"
        },
        "LINE" : {
          "!doc" : "Series type is line.",
          "!url" : "8.3.0/anychart.enums.SparklineSeriesType",
          "!type" : "anychart.enums.SparklineSeriesType"
        },
        "WIN_LOSS" : {
          "!doc" : "Series type is winloss.",
          "!url" : "8.3.0/anychart.enums.SparklineSeriesType",
          "!type" : "anychart.enums.SparklineSeriesType"
        }
      },
      "Statistics" : {
        "X_SCALES_MAX" : {
          "!doc" : "Maximum value of X scales.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_SUM" : {
          "!doc" : "Series sum.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_MEDIAN" : {
          "!doc" : "The median X value of all the points within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "PERT_CHART_PROJECT_DURATION" : {
          "!doc" : "Duration of project.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_SUM" : {
          "!doc" : "The sum of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "VALUE" : {
          "!doc" : "The Y value of this point.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_MIN" : {
          "!doc" : "The minimal X value of all the elements within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_MAX" : {
          "!doc" : "Series maximum.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_BUBBLE_SIZE_AVERAGE" : {
          "!doc" : "The average bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_MEDIAN" : {
          "!doc" : "The median Y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MAX_X_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal sum of the points X values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "INDEX" : {
          "!doc" : "The index of this point in the series this point represents (zero-based).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "!doc" : "Statistics enumeration. @enum {string}",
        "SUM" : {
          "!doc" : "The sum of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "OPEN" : {
          "!doc" : "The open value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_MIN" : {
          "!doc" : "The minimal range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "BUBBLE_SIZE_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_NAME" : {
          "!doc" : "The name of this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_MIN" : {
          "!doc" : "The minimal range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_SUM" : {
          "!doc" : "The sum of all the points X values (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_X_MIN" : {
          "!doc" : "The minimal of all the points X values (Scatter plot chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_BUBBLE_SIZE_MODE" : {
          "!doc" : "The mode bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "COUNT" : {
          "!doc" : "Number of points from the data.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_MIN" : {
          "!doc" : "The minimal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_MEDIAN" : {
          "!doc" : "The median range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_MEDIAN" : {
          "!doc" : "The median range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_MODE" : {
          "!doc" : "The mode X value of all the points within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "NAME" : {
          "!doc" : "The name of this point.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_NAME" : {
          "!doc" : "The name of the category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_RANGE_MIN" : {
          "!doc" : "The minimal of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "RANGE_END" : {
          "!doc" : "The ending value of this point (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "RANGE" : {
          "!doc" : "The range of this point (RangeEnd - RangeStart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_SUM" : {
          "!doc" : "The sum of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_VALUE" : {
          "!doc" : "The Y value of this point.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_MODE" : {
          "!doc" : "The mode range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MIN_X_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal of all the points X values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_LAST_X_VALUE" : {
          "!doc" : "The X value of the last point in this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MIN_X_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal sum of the points X values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CLOSE" : {
          "!doc" : "The close value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_AVERAGE" : {
          "!doc" : "The average Y value of all the points.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MAX_Y_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_MAX" : {
          "!doc" : "The maximal Y value of all the elements within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_SUM" : {
          "!doc" : "The sum of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "LEVELS" : {
          "!doc" : "Statistics by data tree levels for the Sunburst chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_RANGE_SUM" : {
          "!doc" : "The sum of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "BUBBLE_SIZE_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_MODE" : {
          "!doc" : "The mode of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "PERT_CHART_CRITICAL_PATH_STANDARD_DEVIATION" : {
          "!doc" : "Standard deviation for critical path.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_AVERAGE" : {
          "!doc" : "The average range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "MIN" : {
          "!doc" : "The minimum value from the data.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_MAX" : {
          "!doc" : "The max of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_MIN" : {
          "!doc" : "The min of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_BUBBLE_MIN_SIZE" : {
          "!doc" : "The minimal of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "LOW" : {
          "!doc" : "The low value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_MAX" : {
          "!doc" : "The maximal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_FIRST_Y_VALUE" : {
          "!doc" : "The Y value of the first point in this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_MODE" : {
          "!doc" : "The mode range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_POINT_COUNT" : {
          "!doc" : "The number of points in this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CHART_ELEMENTS" : {
          "!doc" : "Object with the number of axes, grids and series (chart elements).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "MAX" : {
          "!doc" : "The maximum value from the data.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_SUM" : {
          "!doc" : "The sum of all ranges in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "!url" : "8.3.0/anychart.enums.Statistics",
        "SERIES_BUBBLE_SIZE_MEDIAN" : {
          "!doc" : "The median bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "X_SCALES_MIN" : {
          "!doc" : "Minimum value of X scales.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_PERCENT_OF_TOTAL" : {
          "!doc" : "The minimal range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_BUBBLE_MAX_SIZE" : {
          "!doc" : "The maximal bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_POINTS_COUNT" : {
          "!doc" : "The number of points in this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_X_AVERAGE" : {
          "!doc" : "The average X value of all the points (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_SCALES_MIN" : {
          "!doc" : "Minimum value of Y scales.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "RANGE_START" : {
          "!doc" : "The starting value of this point (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "X_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_X_SUM" : {
          "!doc" : "The sum of all the points X values (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_MODE" : {
          "!doc" : "The mode Y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_PERCENT_OF_TOTAL" : {
          "!doc" : "The percent of all the data on the chart this category represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "X_VALUE" : {
          "!doc" : "The X value of this point (Scatter Plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MAX_Y_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal sum of the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_AVERAGE" : {
          "!doc" : "The average X value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_BUBBLE_MAX_SIZE" : {
          "!doc" : "The maximal of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "AVERAGE" : {
          "!doc" : "The average value from the data.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_Y_RANGE_MAX" : {
          "!doc" : "The maximal of the ranges of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_PERCENT_OF_CATEGORY" : {
          "!doc" : "The percentage of all the points with the same name this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "POINTS_COUNT" : {
          "!doc" : "Points count.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "BUBBLE_SIZE" : {
          "!doc" : "The bubble size value of this point (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_BUBBLE_SIZE_SUM" : {
          "!doc" : "The sum of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_BUBBLE_MIN_SIZE" : {
          "!doc" : "The minimal bubble size value of all the points within this series (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_AVERAGE" : {
          "!doc" : "The average of all ranges in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "HIGH" : {
          "!doc" : "The high value of this point (OHLC, Candlestick).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_MIN" : {
          "!doc" : "Series minimum.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_SERIES_COUNT" : {
          "!doc" : "The number of the series within the chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_RANGE_MAX" : {
          "!doc" : "The maximal range in this category (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "X_PERCENT_OF_SERIES" : {
          "!doc" : "The percentage of the series this point represents (Scatter Plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_MEDIAN" : {
          "!doc" : "The median of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MIN_Y_SUM_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal sum of the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "CATEGORY_Y_AVERAGE" : {
          "!doc" : "The average of all the points within this category.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_MAX" : {
          "!doc" : "The maximal range in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_BUBBLE_SIZE_AVERAGE" : {
          "!doc" : "The average bubble size of all the points (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_X_MAX" : {
          "!doc" : "The maximal X value of all the elements within this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_MIN" : {
          "!doc" : "The minimal Y value of all the elements within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MIN_Y_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a minimal of all the points y values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_POINT_COUNT" : {
          "!doc" : "The number of the points within the chart.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_X_MAX" : {
          "!doc" : "The maximal of all the points X values (Scatter plot chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_RANGE_SUM" : {
          "!doc" : "The sum of all ranges in this series (Range charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_BUBBLE_SIZE_SUM" : {
          "!doc" : "The sum of all the points bubble sizes (Bubble chart).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "DATA_PLOT_MAX_X_VALUE_POINT_SERIES_NAME" : {
          "!doc" : "The name of the series with a maximal of all the points X values.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_LAST_Y_VALUE" : {
          "!doc" : "The Y value of the first point in this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_AVERAGE" : {
          "!doc" : "Series average.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_SCALES_MAX" : {
          "!doc" : "Maximum value of Y scales.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_FIRST_X_VALUE" : {
          "!doc" : "The X value of the first point in this series (Scatter plot charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "Y_PERCENT_OF_TOTAL" : {
          "!doc" : "The percentage of all the series on the chart this point represents.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "SERIES_Y_AVERAGE" : {
          "!doc" : "The average Y value of all the points within this series.",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        },
        "BUBBLE_SIZE_PERCENT_OF_CATEGORY" : {
          "!doc" : "The percentage of all the points with the same name this point represents (Categorized charts).",
          "!url" : "8.3.0/anychart.enums.Statistics",
          "!type" : "anychart.enums.Statistics"
        }
      },
      "PointState" : {
        "!doc" : "The list of point states. @enum {number}",
        "!url" : "8.3.0/anychart.enums.PointState",
        "HOVER" : {
          "!doc" : "Hover point state.",
          "!url" : "8.3.0/anychart.enums.PointState",
          "!type" : "anychart.enums.PointState"
        },
        "NORMAL" : {
          "!doc" : "Normal point state.",
          "!url" : "8.3.0/anychart.enums.PointState",
          "!type" : "anychart.enums.PointState"
        },
        "SELECT" : {
          "!doc" : "Select point state.",
          "!url" : "8.3.0/anychart.enums.PointState",
          "!type" : "anychart.enums.PointState"
        }
      },
      "LocaleDateTimeFormat" : {
        "HOUR_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a hour",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK" : {
          "!doc" : "Week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "DAY_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a day",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "DAY_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a day",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_MILLISECOND" : {
          "!doc" : "Year to milliseconds. Contains full datetime info.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR" : {
          "!doc" : "Year",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_WEEK" : {
          "!doc" : "Represents a timestamp with a precision up to a week, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH" : {
          "!doc" : "Month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_THIRD_OF_MONTH" : {
          "!doc" : "Represents a timestamp with a precision up to a decade (third of month), but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "!doc" : "Locale date time interval format names. @enum {string}",
        "YEAR_DAY" : {
          "!doc" : "Year to day. Contains year; month and day.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_DAY" : {
          "!doc" : "Represents a timestamp with a precision up to a day, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MINUTE_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a minute",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_HOUR" : {
          "!doc" : "Year to hour. Contains year, month, day and hours.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_MINUTE" : {
          "!doc" : "Year to minute. Contains year, month, day, hours and minutes.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_SEMESTER" : {
          "!doc" : "Year to semester.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "DAY_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a day",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_WEEK" : {
          "!doc" : "Represents a timestamp with a precision up to a week, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_THIRD_OF_MONTH" : {
          "!doc" : "Represents a timestamp with a precision up to a decade (third of month), but without units larger than a semester.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "DAY_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a day",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "HOUR_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a hour",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_THIRD_OF_MONTH" : {
          "!doc" : "Year to decade (third of month).",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MINUTE_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a minute",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_QUARTER" : {
          "!doc" : "Represents a timestamp with a precision up to a quarter; but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "HOUR_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a hour",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER" : {
          "!doc" : "Quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_DAY" : {
          "!doc" : "Represents a timestamp with a precision up to a day, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
        "QUARTER_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_DAY" : {
          "!doc" : "Represents a timestamp with a precision up to a day, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_WEEK" : {
          "!doc" : "Represents a timestamp with a precision up to a week, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_WEEK" : {
          "!doc" : "Represents a timestamp with a precision up to a week, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_QUARTER" : {
          "!doc" : "Year to quarter of year.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER" : {
          "!doc" : "Semester.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_SECOND" : {
          "!doc" : "Year to second. Contains year, month, day, hours, seconds.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SECOND_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a second",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_MONTH" : {
          "!doc" : "Represents a timestamp with a precision up to a month, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_WEEK" : {
          "!doc" : "Year to week. For number of week in year.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "DAY" : {
          "!doc" : "Day",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MINUTE" : {
          "!doc" : "Minute",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK_DAY" : {
          "!doc" : "Represents a timestamp with a precision up to a day, but without units larger than a week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MILLISECOND" : {
          "!doc" : "Millisecond",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_SECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a second, but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_HOUR" : {
          "!doc" : "Represents a timestamp with a precision up to a hour, but without units larger than a semester",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "MONTH_THIRD_OF_MONTH" : {
          "!doc" : "Represents a timestamp with a precision up to a decade (third of month), but without units larger than a month",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH" : {
          "!doc" : "Decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "HOUR" : {
          "!doc" : "Hour",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "WEEK_MILLISECOND" : {
          "!doc" : "Represents a timestamp with a precision up to a millisecond, but without units larger than a week",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "QUARTER_DAY" : {
          "!doc" : "Represents a timestamp with a precision up to a day, but without units larger than a quarter",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SEMESTER_MONTH" : {
          "!doc" : "Represents a timestamp with a precision up to a month, but without units larger than a semester.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "THIRD_OF_MONTH_MINUTE" : {
          "!doc" : "Represents a timestamp with a precision up to a minute, but without units larger than a decade (third of month)",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "SECOND" : {
          "!doc" : "Second",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        },
        "YEAR_MONTH" : {
          "!doc" : "Year to month.",
          "!url" : "8.3.0/anychart.enums.LocaleDateTimeFormat",
          "!type" : "anychart.enums.LocaleDateTimeFormat"
        }
      },
      "TextParsingMode" : {
        "!doc" : "Text parsing mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TextParsingMode",
        "BY_CHAR" : {
          "!doc" : "ByChar mode.",
          "!url" : "8.3.0/anychart.enums.TextParsingMode",
          "!type" : "anychart.enums.TextParsingMode"
        },
        "BY_WORD" : {
          "!doc" : "ByWord mode.",
          "!url" : "8.3.0/anychart.enums.TextParsingMode",
          "!type" : "anychart.enums.TextParsingMode"
        },
        "CSV" : {
          "!doc" : "CSV mode.",
          "!url" : "8.3.0/anychart.enums.TextParsingMode",
          "!type" : "anychart.enums.TextParsingMode"
        }
      },
      "BackgroundCornersType" : {
        "!doc" : "Types of the corner. @enum {string}",
        "!url" : "8.3.0/anychart.enums.BackgroundCornersType",
        "CUT" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.BackgroundCornersType",
          "!type" : "anychart.enums.BackgroundCornersType"
        },
        "NONE" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.BackgroundCornersType",
          "!type" : "anychart.enums.BackgroundCornersType"
        },
        "ROUND" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.BackgroundCornersType",
          "!type" : "anychart.enums.BackgroundCornersType"
        },
        "ROUND_INNER" : {
          "!doc" : "",
          "!url" : "8.3.0/anychart.enums.BackgroundCornersType",
          "!type" : "anychart.enums.BackgroundCornersType"
        }
      },
      "TooltipPositionMode" : {
        "!doc" : "Tooltip position mode. @enum {string}",
        "!url" : "8.3.0/anychart.enums.TooltipPositionMode",
        "CHART" : {
          "!doc" : "Tooltip\"s position defines by chart.",
          "!url" : "8.3.0/anychart.enums.TooltipPositionMode",
          "!type" : "anychart.enums.TooltipPositionMode"
        },
        "FLOAT" : {
          "!doc" : "Tooltip follows the cursor.",
          "!url" : "8.3.0/anychart.enums.TooltipPositionMode",
          "!type" : "anychart.enums.TooltipPositionMode"
        },
        "POINT" : {
          "!doc" : "Tooltip is displayed in fixed position near the point.",
          "!url" : "8.3.0/anychart.enums.TooltipPositionMode",
          "!type" : "anychart.enums.TooltipPositionMode"
        }
      },
      "MapSeriesType" : {
        "!doc" : "Map series types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.MapSeriesType",
        "BUBBLE" : {
          "!doc" : "Bubble series type.",
          "!url" : "8.3.0/anychart.enums.MapSeriesType",
          "!type" : "anychart.enums.MapSeriesType"
        },
        "CHOROPLETH" : {
          "!doc" : "Choropleth series type.",
          "!url" : "8.3.0/anychart.enums.MapSeriesType",
          "!type" : "anychart.enums.MapSeriesType"
        },
        "CONNECTOR" : {
          "!doc" : "Connector series type.",
          "!url" : "8.3.0/anychart.enums.MapSeriesType",
          "!type" : "anychart.enums.MapSeriesType"
        },
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.MapSeriesType",
          "!type" : "anychart.enums.MapSeriesType"
        }
      },
      "GanttRangeAnchor" : {
        "!doc" : "Gantt range anchor. @enum {string}",
        "!url" : "8.3.0/anychart.enums.GanttRangeAnchor",
        "FIRST_DATE" : {
          "!doc" : "Range anchor for the first date.",
          "!url" : "8.3.0/anychart.enums.GanttRangeAnchor",
          "!type" : "anychart.enums.GanttRangeAnchor"
        },
        "FIRST_VISIBLE_DATE" : {
          "!doc" : "Range anchor for the first visibly date.",
          "!url" : "8.3.0/anychart.enums.GanttRangeAnchor",
          "!type" : "anychart.enums.GanttRangeAnchor"
        },
        "LAST_DATE" : {
          "!doc" : "Range anchor for the last date.",
          "!url" : "8.3.0/anychart.enums.GanttRangeAnchor",
          "!type" : "anychart.enums.GanttRangeAnchor"
        },
        "LAST_VISIBLE_DATE" : {
          "!doc" : "Range anchor for the last visibly date.",
          "!url" : "8.3.0/anychart.enums.GanttRangeAnchor",
          "!type" : "anychart.enums.GanttRangeAnchor"
        }
      },
      "ScaleTypes" : {
        "!doc" : "List of all scale types. @enum {string}",
        "DATE_TIME" : {
          "!doc" : "Datetime scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "STOCK_SCATTER_DATE_TIME" : {
          "!doc" : "Scatter date time scale for the Stock.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "DATE_TIME_WITH_CALENDAR" : {
          "!doc" : "Datetime with calendar scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "GANTT" : {
          "!doc" : "Gantt scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "ORDINAL" : {
          "!doc" : "Ordinal scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "LINEAR_COLOR" : {
          "!doc" : "Linear color scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "!url" : "8.3.0/anychart.enums.ScaleTypes",
        "STOCK_ORDINAL_DATE_TIME" : {
          "!doc" : "Ordinal date time scale for the Stock.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "LINEAR" : {
          "!doc" : "Linear scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "ORDINAL_COLOR" : {
          "!doc" : "Ordinal color scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        },
        "LOG" : {
          "!doc" : "Logarithmic scale.",
          "!url" : "8.3.0/anychart.enums.ScaleTypes",
          "!type" : "anychart.enums.ScaleTypes"
        }
      },
      "SidePosition" : {
        "!doc" : "{api:anychart.core.axes.Ticks#position}Ticks{api} and {api:anychart.core.ui.LabelsFactory#position}labels{api} position. @enum {string}",
        "!url" : "8.3.0/anychart.enums.SidePosition",
        "CENTER" : {
          "!doc" : "Half of tick or label will be inside a chart, other part - outside, no matter where an axis is.",
          "!url" : "8.3.0/anychart.enums.SidePosition",
          "!type" : "anychart.enums.SidePosition"
        },
        "INSIDE" : {
          "!doc" : "Inside a chart, no matter where an axis is.",
          "!url" : "8.3.0/anychart.enums.SidePosition",
          "!type" : "anychart.enums.SidePosition"
        },
        "OUTSIDE" : {
          "!doc" : "Outside of a chart, no matter where an axis is.",
          "!url" : "8.3.0/anychart.enums.SidePosition",
          "!type" : "anychart.enums.SidePosition"
        }
      },
      "Layout" : {
        "!doc" : "Layout enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.Layout",
        "HORIZONTAL" : {
          "!doc" : "Horizontal layout.",
          "!url" : "8.3.0/anychart.enums.Layout",
          "!type" : "anychart.enums.Layout"
        },
        "VERTICAL" : {
          "!doc" : "Vertical layout.",
          "!url" : "8.3.0/anychart.enums.Layout",
          "!type" : "anychart.enums.Layout"
        }
      },
      "LinearGaugePointerType" : {
        "!doc" : "List of all linear gauge pointers types. @enum {string}",
        "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
        "BAR" : {
          "!doc" : "Bar pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        },
        "LED" : {
          "!doc" : "Led pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        },
        "MARKER" : {
          "!doc" : "Marker pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        },
        "RANGE_BAR" : {
          "!doc" : "Range bar pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        },
        "TANK" : {
          "!doc" : "Tank pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        },
        "THERMOMETER" : {
          "!doc" : "Thermometer pointer.",
          "!url" : "8.3.0/anychart.enums.LinearGaugePointerType",
          "!type" : "anychart.enums.LinearGaugePointerType"
        }
      },
      "ScaleStackMode" : {
        "!doc" : "Scale stack mode enumeration. @enum {string}",
        "!url" : "8.3.0/anychart.enums.ScaleStackMode",
        "NONE" : {
          "!doc" : "No scale stack mode.",
          "!url" : "8.3.0/anychart.enums.ScaleStackMode",
          "!type" : "anychart.enums.ScaleStackMode"
        },
        "PERCENT" : {
          "!doc" : "Scale stack mode for percent.",
          "!url" : "8.3.0/anychart.enums.ScaleStackMode",
          "!type" : "anychart.enums.ScaleStackMode"
        },
        "VALUE" : {
          "!doc" : "Scale stack mode for value.",
          "!url" : "8.3.0/anychart.enums.ScaleStackMode",
          "!type" : "anychart.enums.ScaleStackMode"
        }
      },
      "ColumnFormats" : {
        "PERCENT" : {
          "!doc" : "Column formatting for percent.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "!doc" : "Column formatting presets. @enum {string}",
        "DATE_US_SHORT" : {
          "!doc" : "Column formatting for date.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "DATE_COMMON_LOG" : {
          "!doc" : "Column formatting for date.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "DATE_DMY_DOTS" : {
          "!doc" : "Column formatting for date.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "DATE_ISO_8601" : {
          "!doc" : "Column formatting for date.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "SHORT_TEXT" : {
          "!doc" : "Column formatting for short text.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "!url" : "8.3.0/anychart.enums.ColumnFormats",
        "TEXT" : {
          "!doc" : "Column formatting for text.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "FINANCIAL" : {
          "!doc" : "Column formatting for financial.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        },
        "DIRECT_NUMBERING" : {
          "!doc" : "Column formatting for direct numbering.",
          "!url" : "8.3.0/anychart.enums.ColumnFormats",
          "!type" : "anychart.enums.ColumnFormats"
        }
      },
      "StockSeriesType" : {
        "STEP_LINE" : {
          "!doc" : "Step Line series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "STICK" : {
          "!doc" : "Stick series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "CANDLESTICK" : {
          "!doc" : "Candlestick series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "!doc" : "Stock series types. @enum {string}",
        "OHLC" : {
          "!doc" : "OHLC series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "RANGE_SPLINE_AREA" : {
          "!doc" : "Range Spline Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "SPLINE_AREA" : {
          "!doc" : "Range Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "RANGE_COLUMN" : {
          "!doc" : "Range Column series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "!url" : "8.3.0/anychart.enums.StockSeriesType",
        "MARKER" : {
          "!doc" : "Marker series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "LINE" : {
          "!doc" : "Line series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "RANGE_STEP_AREA" : {
          "!doc" : "Range Step Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "STEP_AREA" : {
          "!doc" : "Step Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "JUMP_LINE" : {
          "!doc" : "Jump Line series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "AREA" : {
          "!doc" : "Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "SPLINE" : {
          "!doc" : "Range Spline series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "RANGE_AREA" : {
          "!doc" : "Range Area series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        },
        "COLUMN" : {
          "!doc" : "Column series type.",
          "!url" : "8.3.0/anychart.enums.StockSeriesType",
          "!type" : "anychart.enums.StockSeriesType"
        }
      }
    },
    "fromJson" : {
      "!type" : "fn(jsonConfig: Object|string) -> +Object",
      "!url" : "8.3.0/anychart#fromJson",
      "!doc" : "Creates an element by JSON config."
    },
    "mosaic" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Mekko",
      "!url" : "8.3.0/anychart#mosaic",
      "!doc" : "Creates and returns a Mosaic Chart."
    },
    "pie" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string) -> +anychart.charts.Pie",
      "!url" : "8.3.0/anychart#pie",
      "!doc" : "Creates and returns a Pie Chart."
    },
    "cartesian3d" : {
      "!type" : "fn() -> +anychart.charts.Cartesian3d",
      "!url" : "8.3.0/anychart#cartesian3d",
      "!doc" : "Creates and returns a Cartesian 3D chart."
    },
    "financial" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#financial",
      "!doc" : "Creates and returns a Financial Chart."
    },
    "seatMap" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#seatMap",
      "!doc" : "Creates and returns a Seat map."
    },
    "polar" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Polar",
      "!url" : "8.3.0/anychart#polar",
      "!doc" : "Creates and returns a Polar Chart."
    },
    "line" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#line",
      "!doc" : "Creates and returns a Line Chart."
    },
    "column" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#column",
      "!doc" : "Creates and returns a Column Chart."
    },
    "ganttProject" : {
      "!type" : "fn() -> +anychart.charts.Gantt",
      "!url" : "8.3.0/anychart#ganttProject",
      "!doc" : "Creates and returns a Gantt Project Chart."
    },
    "verticalArea" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#verticalArea",
      "!doc" : "Creates and returns a Vertical Area Chart."
    },
    "venn" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +Object) -> +anychart.charts.Venn",
      "!url" : "8.3.0/anychart#venn",
      "!doc" : "Creates and returns a Venn Chart."
    },
    "pyramid" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.charts.Pyramid",
      "!url" : "8.3.0/anychart#pyramid",
      "!doc" : "Creates and returns a Pyramid Chart."
    },
    "appendTheme" : {
      "!type" : "fn(value: string|Object)",
      "!url" : "8.3.0/anychart#appendTheme",
      "!doc" : "Append theme for anychart globally."
    },
    "waterfall" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Waterfall",
      "!url" : "8.3.0/anychart#waterfall",
      "!doc" : "Creates and returns a Waterfall chart."
    },
    "area3d" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian3d",
      "!url" : "8.3.0/anychart#area3d",
      "!doc" : "Creates and returns an Area 3D Chart."
    },
    "bullet" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string) -> +anychart.charts.Bullet",
      "!url" : "8.3.0/anychart#bullet",
      "!doc" : "Creates and returns a Bullet Chart."
    },
    "ganttToolbar" : {
      "!type" : "fn() -> +anychart.ui.GanttToolbar",
      "!url" : "8.3.0/anychart#ganttToolbar",
      "!doc" : "Constructor function for Gantt chart toolbar."
    },
    "ganttResource" : {
      "!type" : "fn() -> +anychart.charts.Gantt",
      "!url" : "8.3.0/anychart#ganttResource",
      "!doc" : "Creates and returns a Gantt Resource Chart."
    },
    "cartesian" : {
      "!type" : "fn() -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#cartesian",
      "!doc" : "Creates and returns a Cartesian chart."
    },
    "fromJsonFile" : {
      "!type" : "fn(url: string, opt_onSuccessOrContainer?: string|fn(), opt_onError?: fn(), opt_method?: string, opt_content?: ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string, opt_headers?: Object, opt_timeoutInterval?: number, opt_withCredentials?: bool, opt_context?: +Object)",
      "!url" : "8.3.0/anychart#fromJsonFile",
      "!doc" : "Creates a chart from JSON configuration."
    },
    "gauges" : {
      "circular" : {
        "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.CircularGauge",
        "!url" : "8.3.0/anychart.gauges#circular",
        "!doc" : "Creates and returns a Circular Gauge."
      },
      "led" : {
        "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.LinearGauge",
        "!url" : "8.3.0/anychart.gauges#led",
        "!doc" : "Creates and returns a Led gauge."
      },
      "linear" : {
        "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.LinearGauge",
        "!url" : "8.3.0/anychart.gauges#linear",
        "!doc" : "Creates and returns a Linear Gauge."
      },
      "tank" : {
        "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.LinearGauge",
        "!url" : "8.3.0/anychart.gauges#tank",
        "!doc" : "Creates and returns a Tank gauge."
      },
      "thermometer" : {
        "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.LinearGauge",
        "!url" : "8.3.0/anychart.gauges#thermometer",
        "!doc" : "Creates and returns a Thermometer gauge."
      },
      "!doc" : "",
      "!url" : "8.3.0/anychart.gauges"
    },
    "bar3d" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian3d",
      "!url" : "8.3.0/anychart#bar3d",
      "!doc" : "Creates and returns a Bar 3D Chart."
    },
    "theme" : {
      "!type" : "fn(opt_value?: string|Object|[string|Object]) -> string|Object|[string|Object]",
      "!url" : "8.3.0/anychart#theme",
      "!doc" : "Sets the theme for or gets the current theme."
    },
    "marker" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Scatter",
      "!url" : "8.3.0/anychart#marker",
      "!doc" : "Creates and returns a Marker Chart."
    },
    "sparkline" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.charts.Sparkline",
      "!url" : "8.3.0/anychart#sparkline",
      "!doc" : "Creates and returns a Sparkline Chart."
    },
    "treeMap" : {
      "!type" : "fn(opt_data?: +anychart.data.Tree|+anychart.data.TreeView|[Object], opt_fillMethod?: +anychart.enums.TreeFillingMethod|string) -> +anychart.charts.TreeMap",
      "!url" : "8.3.0/anychart#treeMap",
      "!doc" : "Creates and returns a Tree Map."
    },
    "standalones" : {
      "table" : {
        "!type" : "fn(opt_rowsCount?: number, opt_colsCount?: number) -> +anychart.standalones.Table",
        "!url" : "8.3.0/anychart.standalones#table",
        "!doc" : "Constructor function for table."
      },
      "colorRange" : {
        "!type" : "fn() -> +anychart.standalones.ColorRange",
        "!url" : "8.3.0/anychart.standalones#colorRange",
        "!doc" : "Constructor function."
      },
      "!doc" : "The anychart.standalones namespace contains classes for using in a standalone format.",
      "dataGrid" : {
        "!type" : "fn() -> +anychart.standalones.DataGrid",
        "!url" : "8.3.0/anychart.standalones#dataGrid",
        "!doc" : "Constructor function for data grid."
      },
      "axisMarkers" : {
        "line" : {
          "!type" : "fn() -> +anychart.standalones.axisMarkers.Line",
          "!url" : "8.3.0/anychart.standalones.axisMarkers#line",
          "!doc" : "Returns line marker instance."
        },
        "range" : {
          "!type" : "fn() -> +anychart.standalones.axisMarkers.Range",
          "!url" : "8.3.0/anychart.standalones.axisMarkers#range",
          "!doc" : "Returns range marker instance."
        },
        "text" : {
          "!type" : "fn() -> +anychart.standalones.axisMarkers.Text",
          "!url" : "8.3.0/anychart.standalones.axisMarkers#text",
          "!doc" : "Returns text marker instance."
        },
        "Line" : {
          "!doc" : "The Line class contains methods for configuring standalones line markers.",
          "!url" : "8.3.0/anychart.standalones.axisMarkers.Line",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Line#axis",
              "!doc" : "Axis settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Line#parentBounds",
              "!doc" : "Parent bounds for the line marker."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_stroke?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#stroke",
              "!doc" : "Stroke settings."
            },
            "value" : {
              "!type" : "fn(opt_newValue?: number) -> number|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#value",
              "!doc" : "Value settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#layout",
              "!doc" : "Line marker layout."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Line#draw",
              "!doc" : "Drawing of the line marker."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#isHorizontal",
              "!doc" : "Whether a line marker has horizontal layout."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axisMarkers.Line",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Line#container",
              "!doc" : "Container for the line marker."
            }
          }
        },
        "Range" : {
          "!doc" : "The Range class contains methods for configuring standalones range markers.",
          "!url" : "8.3.0/anychart.standalones.axisMarkers.Range",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Range#axis",
              "!doc" : "Axis settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Range#parentBounds",
              "!doc" : "Parent bounds for the range marker."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#layout",
              "!doc" : "Layout settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Range#draw",
              "!doc" : "Drawing of the range marker."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "from" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#from",
              "!doc" : "Starting range marker value."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "to" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#to",
              "!doc" : "Ending range marker value."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#isHorizontal",
              "!doc" : "Whether a range marker has horizontal layout."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axisMarkers.Range",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Range#container",
              "!doc" : "Container for the range marker."
            }
          }
        },
        "Text" : {
          "!doc" : "The Text class contains methods for configuring standalones text markers.",
          "!url" : "8.3.0/anychart.standalones.axisMarkers.Text",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#width",
              "!doc" : "Text marker width."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#align",
              "!doc" : "Align settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#height",
              "!doc" : "Text marker height."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_right?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#padding",
              "!doc" : "Padding settings."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Text#axis",
              "!doc" : "Axis settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Text#parentBounds",
              "!doc" : "Parent bounds for text marker."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#anchor",
              "!doc" : "Anchor settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "value" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#value",
              "!doc" : "Text marker value."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#text",
              "!doc" : "Text settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#layout",
              "!doc" : "Layout settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#rotation",
              "!doc" : "Rotation settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Text#draw",
              "!doc" : "Drawing of the text marker."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#offsetX",
              "!doc" : "Text marker offset by x."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_settings?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#offsetY",
              "!doc" : "Text marker offset by y."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#isHorizontal",
              "!doc" : "Whether a text marker has horizontal layout."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.standalones.axisMarkers.Text#container",
              "!doc" : "Container for the text marker."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "!doc" : "The anychart.standalones.axisMarkers namespace contains fundamental standalones axis markers classes.",
        "!url" : "8.3.0/anychart.standalones.axisMarkers"
      },
      "resourceList" : {
        "!type" : "fn(opt_data?: [Object]) -> +anychart.standalones.ResourceList",
        "!url" : "8.3.0/anychart.standalones#resourceList",
        "!doc" : "Constructor function for resource list."
      },
      "DataGrid" : {
        "!doc" : "The DataGrid class contains methods for configuring standalones data grid.",
        "!url" : "8.3.0/anychart.standalones.DataGrid",
        "prototype" : {
          "startIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#startIndex",
            "!doc" : "Start index."
          },
          "onEditEnd" : {
            "!type" : "fn(opt_onEditEndFunction?: fn()) -> fn()|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#onEditEnd",
            "!doc" : "onEditStart function."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "columnStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#columnStroke",
            "!doc" : "Column stroke settings."
          },
          "rowStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#rowStroke",
            "!doc" : "Row stroke settings."
          },
          "verticalScrollBar" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ScrollBar|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#verticalScrollBar",
            "!doc" : "Vertical scroll bar settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "rowOddFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#rowOddFill",
            "!doc" : "Row odd fill settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#tooltip",
            "!doc" : "Tooltip settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "backgroundFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#backgroundFill",
            "!doc" : "Background fill settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "buttons" : {
            "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.DataGridButton|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#buttons",
            "!doc" : "DataGrid button settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "horizontalOffset" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#horizontalOffset",
            "!doc" : "Horizontal offset."
          },
          "edit" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#edit",
            "!doc" : "Live edit settings."
          },
          "headerHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#headerHeight",
            "!doc" : "Header height."
          },
          "endIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#endIndex",
            "!doc" : "End index."
          },
          "rowHoverFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#rowHoverFill",
            "!doc" : "Row fill settings in hover mode."
          },
          "column" : {
            "!type" : "fn(opt_value?: number|+anychart.core.ui.DataGrid.Column|Object, opt_settings?: +anychart.core.ui.DataGrid.Column|Object) -> +anychart.core.ui.DataGrid.Column|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#column",
            "!doc" : "Column settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#draw",
            "!doc" : "Draws data grid."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "rowFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#rowFill",
            "!doc" : "Row fill settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "rowEvenFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#rowEvenFill",
            "!doc" : "Row even fill settings."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "onEditStart" : {
            "!type" : "fn(opt_onEditStartFunction?: fn()) -> fn()|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#onEditStart",
            "!doc" : "onEditStart function."
          },
          "rowSelectedFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_mode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#rowSelectedFill",
            "!doc" : "Row fill settings in selected mode."
          },
          "verticalOffset" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#verticalOffset",
            "!doc" : "Vertical offset"
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.Tree) -> +anychart.data.Tree|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.ui.DataGrid#data",
            "!doc" : "Data settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#container",
            "!doc" : "Getter for the data grid container."
          },
          "defaultRowHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.DataGrid",
            "!url" : "8.3.0/anychart.standalones.DataGrid#defaultRowHeight",
            "!doc" : "Default row height settings."
          }
        }
      },
      "markersFactory" : {
        "!type" : "fn() -> +anychart.standalones.MarkersFactory",
        "!url" : "8.3.0/anychart.standalones#markersFactory",
        "!doc" : "Constructor function for markers factory."
      },
      "Title" : {
        "!doc" : "The Title class contains methods for configuring standalones title.",
        "!url" : "8.3.0/anychart.standalones.Title",
        "prototype" : {
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#width",
            "!doc" : "Width settings."
          },
          "align" : {
            "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#align",
            "!doc" : "Align settings."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#margin",
            "!doc" : "Margin settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#vAlign",
            "!doc" : "Text vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#lineHeight",
            "!doc" : "Text line height settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#padding",
            "!doc" : "Padding settings."
          },
          "textSettings" : {
            "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#textSettings",
            "!doc" : "Text settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#letterSpacing",
            "!doc" : "Text letter spacing settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "getRemainingBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.ui.Title#getRemainingBounds",
            "!doc" : "Returns the remaining (after title placement) part of the container."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.standalones.Title#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontVariant",
            "!doc" : "Font variant settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#hAlign",
            "!doc" : "Text horizontal align settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "text" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#text",
            "!doc" : "Title text."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
            "!doc" : "Pointer events settings."
          },
          "rotation" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#rotation",
            "!doc" : "Rotation settings."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Title",
            "!url" : "8.3.0/anychart.standalones.Title#draw",
            "!doc" : "Draws title."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#wordBreak",
            "!doc" : "Word break mode."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#textDirection",
            "!doc" : "Text direction settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#background",
            "!doc" : "Background settings."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#textIndent",
            "!doc" : "Text indent settings."
          },
          "orientation" : {
            "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.ui.Title#orientation",
            "!doc" : "Orientation settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|Element) -> string|+anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.standalones.Title#container",
            "!doc" : "Getter for the title container."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Title",
            "!url" : "8.3.0/anychart.core.Text#fontColor",
            "!doc" : "Font color settings."
          }
        }
      },
      "label" : {
        "!type" : "fn() -> +anychart.standalones.Label",
        "!url" : "8.3.0/anychart.standalones#label",
        "!doc" : "Constructor function for the labal."
      },
      "scroller" : {
        "!type" : "fn() -> +anychart.standalones.Scroller",
        "!url" : "8.3.0/anychart.standalones#scroller",
        "!doc" : "Constructor function for scroller."
      },
      "MarkersFactory" : {
        "!doc" : "The MarkersFactory class contains methods for configuring standalones markers factory.",
        "!url" : "8.3.0/anychart.standalones.MarkersFactory",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "anchor" : {
            "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#anchor",
            "!doc" : "Anchor settings."
          },
          "position" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#position",
            "!doc" : "Position settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string|+anychart.graphics.vector.ColoredFill, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#stroke",
            "!doc" : "Stroke settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "fill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#fill",
            "!doc" : "Fill settings."
          },
          "rotation" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#rotation",
            "!doc" : "Rotation settings."
          },
          "positionFormatter" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#positionFormatter",
            "!doc" : "Position formatter function."
          },
          "type" : {
            "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#type",
            "!doc" : "Type settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "offsetX" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#offsetX",
            "!doc" : "Offset by X."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "size" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#size",
            "!doc" : "Markers size"
          },
          "offsetY" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.MarkersFactory",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory#offsetY",
            "!doc" : "Offset by Y."
          }
        },
        "Marker" : {
          "!doc" : "The Marker class contains methods for configuring marker.",
          "!url" : "8.3.0/anychart.standalones.MarkersFactory.Marker",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#anchor",
              "!doc" : "Anchor for custom marker."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.Position|string) -> +anychart.enums.Position|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#position",
              "!doc" : "Position for custom marker."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string|+anychart.graphics.vector.ColoredFill, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#stroke",
              "!doc" : "Stroke settings for custom marker."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#fill",
              "!doc" : "Fill settings for custom marker."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#rotation",
              "!doc" : "Rotation settings for custom marker."
            },
            "positionFormatter" : {
              "!type" : "fn(opt_value?: +Object) -> +Object",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#positionFormatter",
              "!doc" : "Position formatter for custom marker."
            },
            "type" : {
              "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#type",
              "!doc" : "Type for custom marker."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#offsetX",
              "!doc" : "Offset by X for custom marker."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "size" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#size",
              "!doc" : "Size for custom marker."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.MarkersFactory.Marker",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#offsetY",
              "!doc" : "Offset by Y for custom marker."
            }
          }
        }
      },
      "legend" : {
        "!type" : "fn() -> +anychart.standalones.Legend",
        "!url" : "8.3.0/anychart.standalones#legend",
        "!doc" : "Constructor function for legend."
      },
      "Legend" : {
        "!doc" : "The Legend class contains methods for configuring standalones legend.",
        "!url" : "8.3.0/anychart.standalones.Legend",
        "prototype" : {
          "iconSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#iconSize",
            "!doc" : "Icon size."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#width",
            "!doc" : "Width settings."
          },
          "align" : {
            "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#align",
            "!doc" : "Align settings."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "hoverCursor" : {
            "!type" : "fn(opt_value?: +anychart.enums.Cursor|string) -> +anychart.enums.Cursor|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#hoverCursor",
            "!doc" : "Cursor settings in hover mode."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#margin",
            "!doc" : "Margin settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#vAlign",
            "!doc" : "Text vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontStyle",
            "!doc" : "Font style settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#tooltip",
            "!doc" : "Tooltip settings"
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#lineHeight",
            "!doc" : "Text line height settings."
          },
          "itemsSourceMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LegendItemsSourceMode|string) -> +anychart.enums.LegendItemsSourceMode|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#itemsSourceMode",
            "!doc" : "Items source mode."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#padding",
            "!doc" : "Padding settings."
          },
          "titleFormat" : {
            "!type" : "fn(opt_value?: string|fn()) -> string|fn()|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#titleFormat",
            "!doc" : "Title format function."
          },
          "textSettings" : {
            "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#textSettings",
            "!doc" : "Text settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#letterSpacing",
            "!doc" : "Text letter spacing settings."
          },
          "inverted" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#inverted",
            "!doc" : "Inverted settings."
          },
          "paginator" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Paginator|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#paginator",
            "!doc" : "Paginator settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "getRemainingBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.ui.Legend#getRemainingBounds",
            "!doc" : "Getter for remain bounds after legend."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.standalones.Legend#parentBounds",
            "!doc" : "Bounds settings."
          },
          "position" : {
            "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#position",
            "!doc" : "Position settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "itemsLayout" : {
            "!type" : "fn(opt_value?: +anychart.enums.LegendLayout|string) -> +anychart.enums.LegendLayout|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#itemsLayout",
            "!doc" : "Items layout settings."
          },
          "itemsFormat" : {
            "!type" : "fn(opt_value?: fn()|string) -> fn()|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#itemsFormat",
            "!doc" : "Items text formatter."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontVariant",
            "!doc" : "Font variant settings."
          },
          "items" : {
            "!type" : "fn(opt_value?: [+anychart.core.ui.Legend.LegendItemProvider]) -> [+anychart.core.ui.Legend.LegendItemProvider]|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#items",
            "!doc" : "Custom items."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#hAlign",
            "!doc" : "Text horizontal align settings."
          },
          "titleSeparator" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Separator|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#titleSeparator",
            "!doc" : "Title separator settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "iconTextSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#iconTextSpacing",
            "!doc" : "Spacing between icon and text."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
            "!doc" : "Pointer events settings."
          },
          "itemsSource" : {
            "!type" : "fn(opt_value?: +anychart.core.SeparateChart|[+anychart.core.SeparateChart]) -> +anychart.core.SeparateChart|[+anychart.core.SeparateChart]|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.standalones.Legend#itemsSource",
            "!doc" : "Items source."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#title",
            "!doc" : "Title settings."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.standalones.Legend#draw",
            "!doc" : "Draws legend."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#wordBreak",
            "!doc" : "Word break mode."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "itemsSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#itemsSpacing",
            "!doc" : "Items spacing settings."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#selectable",
            "!doc" : "Text selectable option."
          },
          "itemsFormatter" : {
            "!type" : "fn(opt_formatterFunction?: function(items:[+anychart.core.ui.Legend.LegendItemProvider])) -> fn()|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#itemsFormatter",
            "!doc" : "Items formatter."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#textDirection",
            "!doc" : "Text direction settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.ui.Legend#background",
            "!doc" : "Background settings."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#textIndent",
            "!doc" : "Text indent settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.standalones.Legend#container",
            "!doc" : "Legend container."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Legend",
            "!url" : "8.3.0/anychart.core.Text#fontColor",
            "!doc" : "Font color settings."
          }
        }
      },
      "resourceTimeline" : {
        "!type" : "fn() -> +anychart.standalones.ResourceTimeline",
        "!url" : "8.3.0/anychart.standalones#resourceTimeline",
        "!doc" : "Constructor function for resource timeline."
      },
      "Scroller" : {
        "!doc" : "The Scroller class contains methods for configuring standalones scroller.",
        "!url" : "8.3.0/anychart.standalones.Scroller",
        "prototype" : {
          "allowRangeChange" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#allowRangeChange",
            "!doc" : "Mode of the range changing."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#minHeight",
            "!doc" : "Scroller minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#height",
            "!doc" : "Scroller height."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "startRatio" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#startRatio",
            "!doc" : "Starting ratio."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "selectedFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#selectedFill",
            "!doc" : "Select fill settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#maxHeight",
            "!doc" : "Scroller maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "getRemainingBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.standalones.Scroller#getRemainingBounds",
            "!doc" : "Returns the remaining (after scroller placement) part of the container."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "setRange" : {
            "!type" : "fn(startRatio: number, endRatio: number) -> +anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#setRange",
            "!doc" : "Sets range."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "outlineStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#outlineStroke",
            "!doc" : "Stroke settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "fill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#fill",
            "!doc" : "Fill settings."
          },
          "autoHide" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#autoHide",
            "!doc" : "Auto hide setting."
          },
          "thumbs" : {
            "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Scroller.Thumbs|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#thumbs",
            "!doc" : "Thumbs settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#draw",
            "!doc" : "Draws scroller."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "endRatio" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#endRatio",
            "!doc" : "Ending ratio."
          },
          "orientation" : {
            "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.core.ui.Scroller#orientation",
            "!doc" : "Scroller orientation."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.Scroller",
            "!url" : "8.3.0/anychart.standalones.Scroller#container",
            "!doc" : "Getter for the scroller container."
          }
        }
      },
      "!url" : "8.3.0/anychart.standalones",
      "axes" : {
        "Radar" : {
          "!doc" : "The Radar class contains methods for configuring standalones Radar axes.",
          "!url" : "8.3.0/anychart.standalones.axes.Radar",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.Base|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "startAngle" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.standalones.axes.Radar#startAngle",
              "!doc" : "Start angle for the radar axis."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Radar#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.standalones.axes.Radar#parentBounds",
              "!doc" : "Parent bounds for the radar axis."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#ticks",
              "!doc" : "Ticks settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.standalones.axes.Radar#draw",
              "!doc" : "Drawing of the radar axis."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axes.Radar",
              "!url" : "8.3.0/anychart.standalones.axes.Radar#container",
              "!doc" : "Container for the the radar axis."
            }
          }
        },
        "Polar" : {
          "!doc" : "The Polar class contains methods for configuring standalones Polar axes.",
          "!url" : "8.3.0/anychart.standalones.axes.Polar",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.ScatterBase|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "startAngle" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.standalones.axes.Polar#startAngle",
              "!doc" : "Start angle for the polar axis."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Polar#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.standalones.axes.Polar#parentBounds",
              "!doc" : "Parent bounds for the polar axis."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#fill",
              "!doc" : "Fill settings for the polar axis."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#ticks",
              "!doc" : "Ticks settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.standalones.axes.Polar#draw",
              "!doc" : "Drawing of the polar axis."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axes.Polar",
              "!url" : "8.3.0/anychart.standalones.axes.Polar#container",
              "!doc" : "Container for the polar axis."
            }
          }
        },
        "!doc" : "The anychart.standalones.axes namespace contains fundamental standalones axes classes.",
        "radial" : {
          "!type" : "fn() -> +anychart.standalones.axes.Radial",
          "!url" : "8.3.0/anychart.standalones.axes#radial",
          "!doc" : "Returns radial axis instance."
        },
        "!url" : "8.3.0/anychart.standalones.axes",
        "Linear" : {
          "!doc" : "The Linear class contains methods for configuring standalones Linear axes.",
          "!url" : "8.3.0/anychart.standalones.axes.Linear",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#width",
              "!doc" : "Axis width."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.standalones.axes.Linear#padding",
              "!doc" : "Padding settings for the linear axis."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.standalones.axes.Linear#parentBounds",
              "!doc" : "Parent bounds for the linear axis."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "staggerMaxLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMaxLines",
              "!doc" : "Maximum stagger lines."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "staggerMode" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMode",
              "!doc" : "Stagger mode state."
            },
            "staggerLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerLines",
              "!doc" : "Stagger lines."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#title",
              "!doc" : "Title settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.standalones.axes.Linear#draw",
              "!doc" : "Drawing of the linear axis."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getPixelBounds",
              "!doc" : "Returns pixel bounds of the axis."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axes.Linear#isHorizontal",
              "!doc" : "Whether an axis is horizontal."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#orientation",
              "!doc" : "Axis orientation."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axes.Linear",
              "!url" : "8.3.0/anychart.standalones.axes.Linear#container",
              "!doc" : "Container for the linear axis."
            }
          }
        },
        "linear" : {
          "!type" : "fn() -> +anychart.standalones.axes.Linear",
          "!url" : "8.3.0/anychart.standalones.axes#linear",
          "!doc" : "Returns linear axis instance."
        },
        "polar" : {
          "!type" : "fn() -> +anychart.standalones.axes.Polar",
          "!url" : "8.3.0/anychart.standalones.axes#polar",
          "!doc" : "Returns polar axis instance."
        },
        "Radial" : {
          "!doc" : "The Radial class contains methods for configuring standalones Radial axes.",
          "!url" : "8.3.0/anychart.standalones.axes.Radial",
          "prototype" : {
            "innerRadius" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.standalones.axes.Radial#innerRadius",
              "!doc" : "Inner radius for the radial axis."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "startAngle" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.standalones.axes.Radial#startAngle",
              "!doc" : "Start angle for the radial axis."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "parentBounds" : {
              "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.standalones.axes.Radial#parentBounds",
              "!doc" : "Parent bounds for the radial axis."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#ticks",
              "!doc" : "Ticks settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.standalones.axes.Radial#draw",
              "!doc" : "Drawing of the radial axis."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "container" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.axes.Radial",
              "!url" : "8.3.0/anychart.standalones.axes.Radial#container",
              "!doc" : "Container for the radial axis."
            }
          }
        },
        "radar" : {
          "!type" : "fn() -> +anychart.standalones.axes.Radar",
          "!url" : "8.3.0/anychart.standalones.axes#radar",
          "!doc" : "Returns radar axis instance."
        }
      },
      "LabelsFactory" : {
        "!doc" : "The LabelsFactory class contains methods for configuring standalones labels factory.",
        "!url" : "8.3.0/anychart.standalones.LabelsFactory",
        "prototype" : {
          "maxFontSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#maxFontSize",
            "!doc" : "Maximum font size setting."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#width",
            "!doc" : "Width settings."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#height",
            "!doc" : "Height settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#vAlign",
            "!doc" : "Text vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#lineHeight",
            "!doc" : "Text line height settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#padding",
            "!doc" : "Padding settings."
          },
          "textSettings" : {
            "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#textSettings",
            "!doc" : "Text settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#letterSpacing",
            "!doc" : "Text letter spacing settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "anchor" : {
            "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#anchor",
            "!doc" : "Anchor settings."
          },
          "position" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#position",
            "!doc" : "Position settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontVariant",
            "!doc" : "Font variant settings."
          },
          "minFontSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#minFontSize",
            "!doc" : "Minimum font size setting."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#hAlign",
            "!doc" : "Text horizontal align settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
            "!doc" : "Pointer events settings."
          },
          "rotation" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#rotation",
            "!doc" : "Rotation settings."
          },
          "positionFormatter" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#positionFormatter",
            "!doc" : "Position formatter function."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "offsetX" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetX",
            "!doc" : "Offset by X."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#wordBreak",
            "!doc" : "Word break mode."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#textDirection",
            "!doc" : "Text direction settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#background",
            "!doc" : "Background settings."
          },
          "offsetY" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetY",
            "!doc" : "Offset by Y."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#textIndent",
            "!doc" : "Text indent settings."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.Text#fontColor",
            "!doc" : "Font color settings."
          },
          "adjustFontSize" : {
            "!type" : "fn(opt_value?: bool|Object|[bool], opt_adjustByHeight?: bool) -> Object|+anychart.standalones.LabelsFactory",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory#adjustFontSize",
            "!doc" : "Adjusting settings."
          }
        }
      },
      "grids" : {
        "linear" : {
          "!type" : "fn() -> +anychart.core.grids.Linear",
          "!url" : "8.3.0/anychart.standalones.grids#linear",
          "!doc" : "Returns linear grid instance."
        },
        "polar" : {
          "!type" : "fn() -> +anychart.standalones.grids.Polar",
          "!url" : "8.3.0/anychart.standalones.grids#polar",
          "!doc" : "Returns polar grid instance."
        },
        "radar" : {
          "!type" : "fn() -> +anychart.standalones.grids.Radar",
          "!url" : "8.3.0/anychart.standalones.grids#radar",
          "!doc" : "Returns radar grid instance"
        },
        "Linear" : {
          "!doc" : "The Linear class contains methods for configuring standalones Linear grids.",
          "!url" : "8.3.0/anychart.standalones.grids.Linear",
          "prototype" : {
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#isMinor",
              "!doc" : "Minor grid or not."
            },
            "scale" : {
              "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: +anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.standalones.grids.Linear#layout",
              "!doc" : "Layout settings for the linear grid."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#palette",
              "!doc" : "Palette settings."
            },
            "drawFirstLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#drawFirstLine",
              "!doc" : "Drawing first line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Linear#isHorizontal",
              "!doc" : "Whether an grid has horizontal layout."
            }
          }
        },
        "Radar" : {
          "!doc" : "The Radar class contains methods for configuring standalones Radar grids.",
          "!url" : "8.3.0/anychart.standalones.grids.Radar",
          "prototype" : {
            "isRadial" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Radar#isRadial",
              "!doc" : "Whether a grid has the radial layout."
            },
            "innerRadius" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.standalones.grids.Radar#innerRadius",
              "!doc" : "Inner radius for the radar grid."
            },
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#isMinor",
              "!doc" : "Minor grid or not."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Radar|+anychart.core.axes.Radial) -> +anychart.core.axes.Radar|+anychart.core.axes.Radial|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#stroke",
              "!doc" : "Stroke fill settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.standalones.grids.Radar|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Radar#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.standalones.grids.Radar#layout",
              "!doc" : "Layout settings for the radar grid."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.grids.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Radar#palette",
              "!doc" : "Palette settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Polar" : {
          "!doc" : "The Polar class contains methods for configuring standalones Polar grids.",
          "!url" : "8.3.0/anychart.standalones.grids.Polar",
          "prototype" : {
            "isRadial" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Polar#isRadial",
              "!doc" : "Whether a grid has the radial layout."
            },
            "innerRadius" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.standalones.grids.Polar#innerRadius",
              "!doc" : "Inner radius for the polar grid."
            },
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#isMinor",
              "!doc" : "Minor grid or not."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Polar|+anychart.core.axes.Radial) -> +anychart.core.axes.Polar|+anychart.core.axes.Radial|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.Linear|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#xScale",
              "!doc" : "X-scale settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.standalones.grids.Polar|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Polar#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.standalones.grids.Polar#layout",
              "!doc" : "Layout settings for the polar grid."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.grids.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Polar#palette",
              "!doc" : "Palette settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "!doc" : "The anychart.standalones.grids namespace contains fundamental standalones grids classes.",
        "!url" : "8.3.0/anychart.standalones.grids"
      },
      "projectTimeline" : {
        "!type" : "fn() -> +anychart.standalones.ProjectTimeline",
        "!url" : "8.3.0/anychart.standalones#projectTimeline",
        "!doc" : "Constructor function for project timeline."
      },
      "title" : {
        "!type" : "fn() -> +anychart.standalones.Title",
        "!url" : "8.3.0/anychart.standalones#title",
        "!doc" : "Constructor function for title."
      },
      "ResourceList" : {
        "!doc" : "The ResourceList class contains methods for configuring standalones resource list.",
        "!url" : "8.3.0/anychart.standalones.ResourceList",
        "prototype" : {
          "descriptions" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#descriptions",
            "!doc" : "Descriptions settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "tags" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TagsSettings|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#tags",
            "!doc" : "Tags settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "types" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#types",
            "!doc" : "Types settings."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.standalones.ResourceList#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "drawLeftLine" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#drawLeftLine",
            "!doc" : "Drawing of the left line."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#stroke",
            "!doc" : "Stroke settings."
          },
          "drawRightLine" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#drawRightLine",
            "!doc" : "Drawing of the right line."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "names" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#names",
            "!doc" : "Names settings."
          },
          "images" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.ImageSettings|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#images",
            "!doc" : "Images settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.standalones.ResourceList#draw",
            "!doc" : "Draws resource list."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "drawTopLine" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#drawTopLine",
            "!doc" : "Drawing of the top line."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "drawBottomLine" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#drawBottomLine",
            "!doc" : "Drawing of the bottom line."
          },
          "oddFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#oddFill",
            "!doc" : "Odd fill settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#background",
            "!doc" : "Background settings."
          },
          "overlay" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.gantt.Overlay|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#overlay",
            "!doc" : "Overlay element."
          },
          "evenFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.resource.ResourceList#evenFill",
            "!doc" : "Even fill settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.ResourceList",
            "!url" : "8.3.0/anychart.standalones.ResourceList#container",
            "!doc" : "Container settings."
          }
        }
      },
      "Label" : {
        "!doc" : "The Label class contains methods for configuring standalones label.",
        "!url" : "8.3.0/anychart.standalones.Label",
        "prototype" : {
          "maxFontSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#maxFontSize",
            "!doc" : "Maximum font size settings."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#width",
            "!doc" : "Width settings."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#height",
            "!doc" : "Height settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#vAlign",
            "!doc" : "Text vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#lineHeight",
            "!doc" : "Text line height settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#padding",
            "!doc" : "Padding settings."
          },
          "textSettings" : {
            "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#textSettings",
            "!doc" : "Text settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#letterSpacing",
            "!doc" : "Text letter spacing settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.standalones.Label#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "anchor" : {
            "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#anchor",
            "!doc" : "Anchor settings."
          },
          "position" : {
            "!type" : "fn(opt_value?: +anychart.enums.Position|string) -> +anychart.enums.Position|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#position",
            "!doc" : "Position settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontVariant",
            "!doc" : "Font variant settings."
          },
          "minFontSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#minFontSize",
            "!doc" : "Minimum font size settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#hAlign",
            "!doc" : "Text horizontal align settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "text" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#text",
            "!doc" : "Label text."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
            "!doc" : "Pointer events settings."
          },
          "rotation" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#rotation",
            "!doc" : "Rotation settings."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Label",
            "!url" : "8.3.0/anychart.standalones.Label#draw",
            "!doc" : "Draws label."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "offsetX" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#offsetX",
            "!doc" : "Offset by X."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#wordBreak",
            "!doc" : "Word break mode."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#textDirection",
            "!doc" : "Text direction settings."
          },
          "background" : {
            "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#background",
            "!doc" : "Background settings"
          },
          "offsetY" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#offsetY",
            "!doc" : "Offset by Y."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#textIndent",
            "!doc" : "Text indent settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.standalones.Label#container",
            "!doc" : "Getter for the label container."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.Text#fontColor",
            "!doc" : "Font color settings."
          },
          "adjustFontSize" : {
            "!type" : "fn(opt_bothOrByWidth?: Object|[bool]|bool, opt_byHeight?: bool) -> Object|+anychart.standalones.Label",
            "!url" : "8.3.0/anychart.core.ui.Label#adjustFontSize",
            "!doc" : "Adjusting settings."
          }
        }
      },
      "ResourceTimeline" : {
        "!doc" : "The ResourceTimeline class contains methods for configuring standalones resource timeline.",
        "!url" : "8.3.0/anychart.standalones.ResourceTimeline",
        "prototype" : {
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttRange|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "columnStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#columnStroke",
            "!doc" : "Column stroke settings."
          },
          "rowOddFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowOddFill",
            "!doc" : "Row odd fill settings."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttLine|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#tooltip",
            "!doc" : "Tooltip settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttText|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#textMarker",
            "!doc" : "Text marker settings."
          },
          "connectors" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.ConnectorElement|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#connectors",
            "!doc" : "Connectors settings."
          },
          "backgroundFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#backgroundFill",
            "!doc" : "Background fill settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#labels",
            "!doc" : "Labels settings."
          },
          "edit" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#edit",
            "!doc" : "Live edit settings."
          },
          "rowHoverFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowHoverFill",
            "!doc" : "Row settings on hover fill."
          },
          "periods" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.PeriodsElement|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#periods",
            "!doc" : "Periods settings."
          },
          "palette" : {
            "!type" : "fn(opt_paletteSettings?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.standalones.ResourceTimeline#palette",
            "!doc" : "Palette settings."
          },
          "rowFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowFill",
            "!doc" : "Row fill settings."
          },
          "rowEvenFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowEvenFill",
            "!doc" : "Row even settings."
          },
          "rowSelectedFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_mode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowSelectedFill",
            "!doc" : "Row settings in selected mode."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.MarkersFactory|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#markers",
            "!doc" : "Markers settings."
          },
          "elements" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.TimelineElement|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#elements",
            "!doc" : "Elements settings."
          },
          "defaultRowHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ResourceTimeline",
            "!url" : "8.3.0/anychart.standalones.ResourceTimeline#defaultRowHeight",
            "!doc" : "Default row height settings."
          }
        }
      },
      "ProjectTimeline" : {
        "!doc" : "The ProjectTimeline class contains methods for configuring standalones project timeline.",
        "!url" : "8.3.0/anychart.standalones.ProjectTimeline",
        "prototype" : {
          "rangeMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttRange|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rangeMarker",
            "!doc" : "Range marker settings."
          },
          "columnStroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#columnStroke",
            "!doc" : "Column stroke settings."
          },
          "tasks" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.TasksElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#tasks",
            "!doc" : "Tasks settings."
          },
          "rowOddFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowOddFill",
            "!doc" : "Row odd fill settings."
          },
          "lineMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttLine|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#lineMarker",
            "!doc" : "Line marker settings."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#tooltip",
            "!doc" : "Tooltip settings."
          },
          "milestones" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.MilestonesElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#milestones",
            "!doc" : "Milestones settings."
          },
          "textMarker" : {
            "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttText|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#textMarker",
            "!doc" : "Text marker settings."
          },
          "connectors" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.ConnectorElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#connectors",
            "!doc" : "Connectors settings."
          },
          "backgroundFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#backgroundFill",
            "!doc" : "Background fill settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#labels",
            "!doc" : "Labels settings."
          },
          "edit" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#edit",
            "!doc" : "Live edit settings."
          },
          "rowHoverFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowHoverFill",
            "!doc" : "Row settings on hover fill."
          },
          "groupingTasks" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.GroupingTasksElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#groupingTasks",
            "!doc" : "Grouping tasks settings."
          },
          "palette" : {
            "!type" : "fn(opt_paletteSettings?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.standalones.ProjectTimeline#palette",
            "!doc" : "Palette settings."
          },
          "rowFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowFill",
            "!doc" : "Row fill settings."
          },
          "rowEvenFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowEvenFill",
            "!doc" : "Row even settings."
          },
          "rowSelectedFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_mode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#rowSelectedFill",
            "!doc" : "Row settings in selected mode."
          },
          "baselines" : {
            "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.elements.BaselinesElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#baselines",
            "!doc" : "Baselines settings."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.MarkersFactory|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#markers",
            "!doc" : "Markers settings."
          },
          "elements" : {
            "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.TimelineElement|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.core.ui.Timeline#elements",
            "!doc" : "Elements settings."
          },
          "defaultRowHeight" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ProjectTimeline",
            "!url" : "8.3.0/anychart.standalones.ProjectTimeline#defaultRowHeight",
            "!doc" : "Default row height settings."
          }
        }
      },
      "ColorRange" : {
        "!doc" : "The ColorRange class contains methods for configuring standalones color range.",
        "!url" : "8.3.0/anychart.standalones.ColorRange",
        "prototype" : {
          "colorLineSize" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.standalones.ColorRange#colorLineSize",
            "!doc" : "Color line size."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#width",
            "!doc" : "Axis width."
          },
          "align" : {
            "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.ui.ColorRange#align",
            "!doc" : "Align setting."
          },
          "scale" : {
            "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#scale",
            "!doc" : "Scale settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.standalones.ColorRange#padding",
            "!doc" : "Padding settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "overlapMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#overlapMode",
            "!doc" : "Overlap mode for labels."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "getRemainingBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.axes.Linear#getRemainingBounds",
            "!doc" : "Returns remaining parent bounds to use elsewhere."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.standalones.ColorRange#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "staggerMaxLines" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#staggerMaxLines",
            "!doc" : "Maximum stagger lines."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#stroke",
            "!doc" : "Stroke settings."
          },
          "drawLastLabel" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#drawLastLabel",
            "!doc" : "Drawing of the last label."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "minorLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#minorLabels",
            "!doc" : "Minor labels settings."
          },
          "length" : {
            "!type" : "fn(opt_value?: string|number) -> number|string|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.ui.ColorRange#length",
            "!doc" : "Length setting."
          },
          "staggerMode" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#staggerMode",
            "!doc" : "Stagger mode state."
          },
          "staggerLines" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#staggerLines",
            "!doc" : "Stagger lines."
          },
          "ticks" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#ticks",
            "!doc" : "Ticks settings."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#title",
            "!doc" : "Title settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.standalones.ColorRange#draw",
            "!doc" : "Draw color range."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "minorTicks" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#minorTicks",
            "!doc" : "Minor ticks settings."
          },
          "marker" : {
            "!type" : "fn(opt_value?: +anychart.core.ui.MarkersFactory.Marker|Object) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.ui.ColorRange#marker",
            "!doc" : "Marker settings."
          },
          "drawFirstLabel" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#drawFirstLabel",
            "!doc" : "Drawing of the first label."
          },
          "isHorizontal" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.axes.Linear#isHorizontal",
            "!doc" : "Whether an axis is horizontal."
          },
          "orientation" : {
            "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.core.axes.Linear#orientation",
            "!doc" : "Axis orientation."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.ColorRange",
            "!url" : "8.3.0/anychart.standalones.ColorRange#container",
            "!doc" : "Getter for the color range container."
          }
        }
      },
      "Table" : {
        "!doc" : "The Table class contains methods for configuring standalones table.",
        "!url" : "8.3.0/anychart.standalones.Table",
        "prototype" : {
          "getCell" : {
            "!type" : "fn(row: number, col: number) -> +anychart.core.ui.table.Cell",
            "!url" : "8.3.0/anychart.core.ui.Table#getCell",
            "!doc" : "Returns cell by its row and column number."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "colsCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#colsCount",
            "!doc" : "Columns count."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.standalones.Table#saveAsCsv",
            "!doc" : "Saves table data as CSV."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "colsMaxWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#colsMaxWidth",
            "!doc" : "Column maximum width."
          },
          "rowOddFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowOddFill",
            "!doc" : "Row odd fill settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#vAlign",
            "!doc" : "Vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#lineHeight",
            "!doc" : "Line height settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number)",
            "!url" : "8.3.0/anychart.core.ui.Table#saveAsPng",
            "!doc" : "Saves into PNG file."
          },
          "border" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#border",
            "!doc" : "Border settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.standalones.Table#saveAsXlsx",
            "!doc" : "Saves table data as an Excel document."
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSize?: string, opt_landscape?: bool, opt_x?: number, opt_y?: number)",
            "!url" : "8.3.0/anychart.core.ui.Table#saveAsPdf",
            "!doc" : "Saves into PDF file."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#letterSpacing",
            "!doc" : "Letter spacing settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "cellPadding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#cellPadding",
            "!doc" : "Cell padding settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|number, opt_value?: bool|number)",
            "!url" : "8.3.0/anychart.core.ui.Table#saveAsSvg",
            "!doc" : "Saves into SVG file."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontVariant",
            "!doc" : "Font variant settings."
          },
          "rowsMaxHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowsMaxHeight",
            "!doc" : "Rows maximum height."
          },
          "cellBorder" : {
            "!type" : "fn(opt_strokeOrFill?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#cellBorder",
            "!doc" : "Cell border settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "rowsMinHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowsMinHeight",
            "!doc" : "Rows minimum height."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#hAlign",
            "!doc" : "Horizontal align settings."
          },
          "contents" : {
            "!type" : "fn(opt_tableValues?: [[+anychart.core.VisualBase|string|number]], opt_demergeCells?: bool) -> [[+anychart.core.VisualBase]]|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#contents",
            "!doc" : "Table content."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
            "!url" : "8.3.0/anychart.core.ui.Table#saveAsJpg",
            "!doc" : "Saves into JPEG file."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#disablePointerEvents",
            "!doc" : "Disable pointer events settings."
          },
          "rowsHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowsHeight",
            "!doc" : "Row height."
          },
          "getRow" : {
            "!type" : "fn(row: number) -> +anychart.core.ui.table.Row",
            "!url" : "8.3.0/anychart.core.ui.Table#getRow",
            "!doc" : "Returns row instance by its number."
          },
          "getCol" : {
            "!type" : "fn(col: number) -> +anychart.core.ui.table.Column",
            "!url" : "8.3.0/anychart.core.ui.Table#getCol",
            "!doc" : "Returns column instance by its number."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "cellFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#cellFill",
            "!doc" : "Cell fill settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#draw",
            "!doc" : "Draws the table."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#wordBreak",
            "!doc" : "Word break mode."
          },
          "rowsCount" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowsCount",
            "!doc" : "Rows count."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "rowEvenFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#rowEvenFill",
            "!doc" : "Row even fill settings."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#textDirection",
            "!doc" : "Letter direction settings."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.ui.Table#toSvg",
            "!doc" : "Returns SVG string."
          },
          "colsMinWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#colsMinWidth",
            "!doc" : "Column minimum width."
          },
          "colsWidth" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#colsWidth",
            "!doc" : "Column width."
          },
          "toCsv" : {
            "!type" : "fn(opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.standalones.Table#toCsv",
            "!doc" : "Returns CSV string with series data."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#textIndent",
            "!doc" : "Text indent settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.standalones.Table#container",
            "!doc" : "Getter for the element's container."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.standalones.Table",
            "!url" : "8.3.0/anychart.core.ui.Table#fontColor",
            "!doc" : "Font color settings."
          }
        }
      },
      "Background" : {
        "!doc" : "The Background class contains methods for configuring standalones background.",
        "!url" : "8.3.0/anychart.standalones.Background",
        "prototype" : {
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "cornerType" : {
            "!type" : "fn(opt_value?: +anychart.enums.BackgroundCornersType|string) -> +anychart.enums.BackgroundCornersType|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.ui.Background#cornerType",
            "!doc" : "Corner type."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "parentBounds" : {
            "!type" : "fn(opt_value?: +anychart.math.Rect|Object|number, opt_top?: number, opt_width?: number, opt_height?: number) -> +anychart.math.Rect|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.standalones.Background#parentBounds",
            "!doc" : "Parent bounds settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "stroke" : {
            "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.ui.Background#stroke",
            "!doc" : "Stroke settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "corners" : {
            "!type" : "fn(opt_value?: number|string|[number], opt_topRight?: number|string, opt_bottomRight?: number|string, opt_bottomLeft?: number|string) -> [number]|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.ui.Background#corners",
            "!doc" : "Corner radius."
          },
          "fill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.ui.Background#fill",
            "!doc" : "Fill settings."
          },
          "draw" : {
            "!type" : "fn() -> +anychart.standalones.Background",
            "!url" : "8.3.0/anychart.standalones.Background#draw",
            "!doc" : "Draw background."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: string|Element) -> string|Element|+anychart.standalones.Background",
            "!url" : "8.3.0/anychart.standalones.Background#container",
            "!doc" : "Getter for the background container."
          }
        }
      },
      "background" : {
        "!type" : "fn() -> +anychart.standalones.Background",
        "!url" : "8.3.0/anychart.standalones#background",
        "!doc" : "Constructor function."
      },
      "labelsFactory" : {
        "!type" : "fn() -> +anychart.standalones.LabelsFactory",
        "!url" : "8.3.0/anychart.standalones#labelsFactory",
        "!doc" : "Constructor function for labels factory."
      }
    },
    "hilo" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian",
      "!url" : "8.3.0/anychart#hilo",
      "!doc" : "Creates and returns a HiLo Chart"
    },
    "barmekko" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Mekko",
      "!url" : "8.3.0/anychart#barmekko",
      "!doc" : "Creates and returns a Barmekko Chart."
    },
    "connector" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#connector",
      "!doc" : "Creates and returns a Connector Map."
    },
    "funnel" : {
      "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.charts.Funnel",
      "!url" : "8.3.0/anychart#funnel",
      "!doc" : "Creates and returns a Funnel Chart."
    },
    "data" : {
      "table" : {
        "!type" : "fn(opt_keyColumnIndex?: number|string, opt_dateTimePattern?: string, opt_timeOffset?: number, opt_baseDate?: number|Date, opt_locale?: string|+anychart.format.Locale) -> +anychart.data.Table",
        "!url" : "8.3.0/anychart.data#table",
        "!doc" : "Creates and returns a new instance of a data table."
      },
      "View" : {
        "!doc" : "View is a representation of raw data.",
        "!url" : "8.3.0/anychart.data.View",
        "prototype" : {
          "find" : {
            "!type" : "fn(fieldName: string, fieldValue: +Object) -> number",
            "!url" : "8.3.0/anychart.data.View#find",
            "!doc" : "Searches fieldName by fieldValue and returns its index (or the first match)."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "getIterator" : {
            "!type" : "fn() -> +anychart.data.Iterator",
            "!url" : "8.3.0/anychart.data.View#getIterator",
            "!doc" : "Returns a new iterator for the current view."
          },
          "getRowsCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.View#getRowsCount",
            "!doc" : "Returns the number of the rows in the current view."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "getDataSets" : {
            "!type" : "fn() -> [+anychart.data.Set]",
            "!url" : "8.3.0/anychart.data.View#getDataSets",
            "!doc" : "Returns parent data set."
          },
          "derive" : {
            "!type" : "fn() -> +anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#derive",
            "!doc" : "Creates a derived view, containing just the same data set and order as this view does."
          },
          "sort" : {
            "!type" : "fn(fieldName: string, opt_value?: fn()|+anychart.enums.Sort|string) -> +anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#sort",
            "!doc" : "Data sorting."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "concat" : {
            "!type" : "fn(otherView: +anychart.data.View|+Array) -> +anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#concat",
            "!doc" : "Concatenates two views to make a derived view that contains rows from both views."
          },
          "filter" : {
            "!type" : "fn(fieldName: string, func: function(val:+Object)) -> +anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#filter",
            "!doc" : "Creates a derived view, containing only the rows that pass the filter."
          },
          "row" : {
            "!type" : "fn(rowIndex: number, opt_value?: +Object) -> +Object",
            "!url" : "8.3.0/anychart.data.View#row",
            "!doc" : "Row of the set by an index"
          },
          "meta" : {
            "!type" : "fn(index: number, name: string, opt_value?: +Object) -> +Object|+anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#meta",
            "!doc" : "Metadata settings."
          },
          "set" : {
            "!type" : "fn(rowIndex: number, fieldName: string, value: +Object) -> +anychart.data.View",
            "!url" : "8.3.0/anychart.data.View#set",
            "!doc" : "Sets the value to the row field by row index and field name."
          },
          "get" : {
            "!type" : "fn(rowIndex: number, fieldName: string) -> +Object",
            "!url" : "8.3.0/anychart.data.View#get",
            "!doc" : "Gets the value from the row by row index and field name."
          }
        }
      },
      "!doc" : "Classes for handling data structures/sources",
      "TableIterator" : {
        "!doc" : "Table iterator class. Assumes iterator (if any) to return not fewer keys than the table has.",
        "!url" : "8.3.0/anychart.data.TableIterator",
        "prototype" : {
          "advance" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.data.TableIterator#advance",
            "!doc" : "Advances the iterator to the next position."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.data.TableIterator#get",
            "!doc" : "Returns current field values."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.TableIterator#getIndex",
            "!doc" : "Returns item index."
          },
          "getKey" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.TableIterator#getKey",
            "!doc" : "Returns item key."
          },
          "reset" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.data.TableIterator#reset",
            "!doc" : "Resets the iterator to a pre-first position."
          }
        }
      },
      "Iterator" : {
        "!doc" : "anychart.data.Iterator class is used to work with data in a View.",
        "!url" : "8.3.0/anychart.data.Iterator",
        "prototype" : {
          "advance" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.data.Iterator#advance",
            "!doc" : "Advances the iterator to the next item."
          },
          "get" : {
            "!type" : "fn(fieldName: string) -> +Object",
            "!url" : "8.3.0/anychart.data.Iterator#get",
            "!doc" : "Gets the value from the current row by the field name."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Iterator#getIndex",
            "!doc" : "Returns the index of the item to which iterator points to."
          },
          "getRowsCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Iterator#getRowsCount",
            "!doc" : "Returns the number of rows in the view."
          },
          "meta" : {
            "!type" : "fn(name: string, opt_value?: +Object) -> +Object|+anychart.data.Iterator",
            "!url" : "8.3.0/anychart.data.Iterator#meta",
            "!doc" : "Metadata settings."
          },
          "reset" : {
            "!type" : "fn() -> +anychart.data.Iterator",
            "!url" : "8.3.0/anychart.data.Iterator#reset",
            "!doc" : "Resets the data iterator to its zero state (before the first item of the view)."
          },
          "select" : {
            "!type" : "fn(index: number) -> bool",
            "!url" : "8.3.0/anychart.data.Iterator#select",
            "!doc" : "Sets a passed index as the current index and returns it in case of success."
          }
        }
      },
      "TableMapping" : {
        "!doc" : "Table mapping constructor.",
        "!url" : "8.3.0/anychart.data.TableMapping",
        "prototype" : {
          "addField" : {
            "!type" : "fn(name: string, column: number, opt_type?: +anychart.enums.AggregationType|string, opt_weightsColumn?: number) -> +anychart.data.TableMapping",
            "!url" : "8.3.0/anychart.data.TableMapping#addField",
            "!doc" : "Adds a field to the mapping."
          },
          "createSelectable" : {
            "!type" : "fn() -> +anychart.data.TableSelectable",
            "!url" : "8.3.0/anychart.data.TableMapping#createSelectable",
            "!doc" : "Returns new selectable object for the mapping."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "parseHtmlTable" : {
        "!type" : "fn(opt_tableSelector?: string, opt_rowsSelector?: string, opt_cellsSelector?: string, opt_headersSelector?: string, opt_captionSelector?: string, opt_valueProcessor?: fn()) -> +anychart.data.DataSettings",
        "!url" : "8.3.0/anychart.data#parseHtmlTable",
        "!doc" : "Parses HTML table to table data."
      },
      "!url" : "8.3.0/anychart.data",
      "mapAsTable" : {
        "!type" : "fn(data: [[+Object]], opt_mode?: +anychart.enums.MapAsTableMode|string, opt_seriesCount?: number) -> [+anychart.data.Mapping]",
        "!url" : "8.3.0/anychart.data#mapAsTable",
        "!doc" : "Maps passed data as an array of mappings."
      },
      "parseText" : {
        "!type" : "fn(text: string, opt_settings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> [[string|number]]",
        "!url" : "8.3.0/anychart.data#parseText",
        "!doc" : "Text parsing."
      },
      "buildMapping" : {
        "!type" : "fn(dataSet: +anychart.data.Set, fromIndex: number, toIndex: number, names: [string], opt_keys?: [string]) -> +anychart.data.Mapping",
        "!url" : "8.3.0/anychart.data#buildMapping",
        "!doc" : "Creates data mapping."
      },
      "tree" : {
        "!type" : "fn(opt_data?: [Object]|string, opt_fillMethodOrCsvMapping?: +anychart.enums.TreeFillingMethod|Object, opt_csvSettings?: Object, opt_fieldsMapping?: Object) -> +anychart.data.Tree",
        "!url" : "8.3.0/anychart.data#tree",
        "!doc" : "Creates and returns a new instance of the data tree."
      },
      "Traverser" : {
        "!doc" : "Tree data traverser.",
        "!url" : "8.3.0/anychart.data.Traverser",
        "prototype" : {
          "advance" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.data.Traverser#advance",
            "!doc" : "Advances traverser to the next item."
          },
          "traverseChildrenCondition" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.Traverser#traverseChildrenCondition",
            "!doc" : "Decider function."
          },
          "reset" : {
            "!type" : "fn() -> +anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.Traverser#reset",
            "!doc" : "Resets traverser to its zero state (before the first child)."
          },
          "current" : {
            "!type" : "fn() -> +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.Traverser#current",
            "!doc" : "Gets current tree data item."
          },
          "nodeYieldCondition" : {
            "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.Traverser#nodeYieldCondition",
            "!doc" : "Decider function."
          },
          "meta" : {
            "!type" : "fn(key: string, opt_value?: +Object) -> +Object",
            "!url" : "8.3.0/anychart.data.Traverser#meta",
            "!doc" : "Meta value."
          },
          "set" : {
            "!type" : "fn(key: string, value: +Object) -> +anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.Traverser#set",
            "!doc" : "Sets current item's value by key specified."
          },
          "toArray" : {
            "!type" : "fn() -> [+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem]",
            "!url" : "8.3.0/anychart.data.Traverser#toArray",
            "!doc" : "Turns current traverser to an array of tree data items."
          },
          "get" : {
            "!type" : "fn(key: string) -> +Object",
            "!url" : "8.3.0/anychart.data.Traverser#get",
            "!doc" : "Gets current data item's data value by field specified."
          },
          "getDepth" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Traverser#getDepth",
            "!doc" : "Gets depth of current data item."
          }
        }
      },
      "TableComputer" : {
        "!doc" : "Stock table computer constructor.",
        "!url" : "8.3.0/anychart.data.TableComputer",
        "prototype" : {
          "addOutputField" : {
            "!type" : "fn(name: string, opt_uid?: string) -> number",
            "!url" : "8.3.0/anychart.data.TableComputer#addOutputField",
            "!doc" : "Adds output field to the computer with the given name."
          },
          "getFieldIndex" : {
            "!type" : "fn(name: string) -> number",
            "!url" : "8.3.0/anychart.data.TableComputer#getFieldIndex",
            "!doc" : "Returns field index by the field name."
          },
          "setCalculationFunction" : {
            "!type" : "fn(value: fn())",
            "!url" : "8.3.0/anychart.data.TableComputer#setCalculationFunction",
            "!doc" : "Sets function that is executed for each row of the table storage."
          },
          "setContext" : {
            "!type" : "fn(value: Object)",
            "!url" : "8.3.0/anychart.data.TableComputer#setContext",
            "!doc" : "Sets computer context. If not set - defaults to Window."
          },
          "setStartFunction" : {
            "!type" : "fn(function: fn())",
            "!url" : "8.3.0/anychart.data.TableComputer#setStartFunction",
            "!doc" : "Sets function that will be executed on each calculation start."
          }
        },
        "RowProxy" : {
          "!doc" : "Row proxy for computational functions.",
          "!url" : "8.3.0/anychart.data.TableComputer.RowProxy",
          "prototype" : {
            "get" : {
              "!type" : "fn(field: string) -> +Object",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#get",
              "!doc" : "Returns current field values."
            },
            "getColumn" : {
              "!type" : "fn(column: number) -> +Object",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getColumn",
              "!doc" : "Returns current column value."
            },
            "getIndex" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getIndex",
              "!doc" : "Returns index of the item in the selection that has created this item."
            },
            "getKey" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getKey",
              "!doc" : "Returns item key."
            },
            "set" : {
              "!type" : "fn(name: string, value: +Object) -> bool",
              "!url" : "8.3.0/anychart.data.TableComputer.RowProxy#set",
              "!doc" : "Sets field value by field name."
            },
            "setColumn" : {
              "!type" : "fn(index: number, value: +Object) -> bool",
              "!url" : "8.3.0/anychart.data.TableComputer.RowProxy#setColumn",
              "!doc" : "Sets value by column."
            }
          }
        }
      },
      "Mapping" : {
        "!doc" : "The special view which allows mapping anychart.data.Set storages.",
        "!url" : "8.3.0/anychart.data.Mapping",
        "prototype" : {
          "find" : {
            "!type" : "fn(fieldName: string, fieldValue: +Object) -> number",
            "!url" : "8.3.0/anychart.data.View#find",
            "!doc" : "Searches fieldName by fieldValue and returns its index (or the first match)."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "getIterator" : {
            "!type" : "fn() -> +anychart.data.Iterator",
            "!url" : "8.3.0/anychart.data.Mapping#getIterator",
            "!doc" : "Returns a new iterator for the current view."
          },
          "getRowsCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Mapping#getRowsCount",
            "!doc" : "Returns the number of the rows in the current view."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "derive" : {
            "!type" : "fn() -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#derive",
            "!doc" : "Creates a derived view, containing just the same data set and order as this view does."
          },
          "sort" : {
            "!type" : "fn(fieldName: string, opt_value?: fn()|+anychart.enums.Sort|string) -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#sort",
            "!doc" : "Data sorting."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "concat" : {
            "!type" : "fn(otherView: +anychart.data.View|+Array) -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#concat",
            "!doc" : "Concatenates two views to make a derived view that contains rows from both views."
          },
          "filter" : {
            "!type" : "fn(fieldName: string, func: function(val:+Object)) -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#filter",
            "!doc" : "Creates a derived view, containing only the rows that pass the filter."
          },
          "row" : {
            "!type" : "fn(rowIndex: number, opt_value?: +Object) -> +Object",
            "!url" : "8.3.0/anychart.data.Mapping#row",
            "!doc" : "Row of the set by an index"
          },
          "meta" : {
            "!type" : "fn(index: number, name: string, opt_value?: +Object) -> +Object|+anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#meta",
            "!doc" : "Metadata settings."
          },
          "set" : {
            "!type" : "fn(rowIndex: number, fieldName: string, value: +Object) -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.View#set",
            "!doc" : "Sets the value to the row field by row index and field name."
          },
          "getMapping" : {
            "!type" : "fn() -> +Object",
            "!url" : "8.3.0/anychart.data.Mapping#getMapping",
            "!doc" : "Returns mapping."
          },
          "get" : {
            "!type" : "fn(rowIndex: number, fieldName: string) -> +Object",
            "!url" : "8.3.0/anychart.data.View#get",
            "!doc" : "Gets the value from the row by row index and field name."
          }
        }
      },
      "TreeView" : {
        "!doc" : "TreeView. Class of mapped tree.",
        "!url" : "8.3.0/anychart.data.TreeView",
        "prototype" : {
          "getChildren" : {
            "!type" : "fn() -> [+anychart.data.TreeView.DataItem]",
            "!url" : "8.3.0/anychart.data.TreeView#getChildren",
            "!doc" : "Returns a roots array."
          },
          "removeChildAt" : {
            "!type" : "fn(index: number) -> +anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.TreeView#removeChildAt",
            "!doc" : "Removes child at the specified position."
          },
          "searchItems" : {
            "!type" : "fn(field: string, value: +Object, opt_comparisonFn?: function(value1:+Object, value2:+Object)) -> [+anychart.data.Tree.DataItem]",
            "!url" : "8.3.0/anychart.data.TreeView#searchItems",
            "!doc" : "Performs an items search and returns an array of data items."
          },
          "numChildren" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.TreeView#numChildren",
            "!doc" : "Returns a length of roots array."
          },
          "addChild" : {
            "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> +anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.TreeView#addChild",
            "!doc" : "Adds a child."
          },
          "addChildAt" : {
            "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem, index: number) -> +anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.TreeView#addChildAt",
            "!doc" : "Inserts a child into a specified position."
          },
          "filter" : {
            "!type" : "fn(filterFunction: function(item:+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem)) -> [+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem]",
            "!url" : "8.3.0/anychart.data.TreeView#filter",
            "!doc" : "Filters the tree data items using the filter-function."
          },
          "getChildAt" : {
            "!type" : "fn(index: number) -> +anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.TreeView#getChildAt",
            "!doc" : "Gets the child by index."
          },
          "indexOfChild" : {
            "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> number",
            "!url" : "8.3.0/anychart.data.TreeView#indexOfChild",
            "!doc" : "Gets the index of child in a children array."
          },
          "getTraverser" : {
            "!type" : "fn() -> +anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.TreeView#getTraverser",
            "!doc" : "Creates tree view data traverser."
          },
          "removeChild" : {
            "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> +anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.data.TreeView#removeChild",
            "!doc" : "Removes data item's child."
          },
          "removeChildren" : {
            "!type" : "fn() -> +anychart.data.TreeView",
            "!url" : "8.3.0/anychart.data.TreeView#removeChildren",
            "!doc" : "Removes children."
          },
          "search" : {
            "!type" : "fn(field: string, value: +Object, opt_comparisonFn?: function(value1:+Object, value2:+Object)) -> +anychart.data.Tree.DataItem|[+anychart.data.Tree.DataItem]",
            "!url" : "8.3.0/anychart.data.TreeView#search",
            "!doc" : "Performs a data search."
          },
          "addData" : {
            "!type" : "fn(data: [Object]|string, opt_fillMethodOrCsvMapping?: +anychart.enums.TreeFillingMethod|string|Object, opt_csvSettingsOrDeps?: Object|[+anychart.data.Tree.Dependency]) -> +anychart.data.TreeView",
            "!url" : "8.3.0/anychart.data.TreeView#addData",
            "!doc" : "Adds a data."
          }
        },
        "DataItem" : {
          "!doc" : "Mapped data item class.",
          "!url" : "8.3.0/anychart.data.TreeView.DataItem",
          "prototype" : {
            "getChildren" : {
              "!type" : "fn() -> [+anychart.data.TreeView.DataItem]",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#getChildren",
              "!doc" : "Returns a copy of children array of the current data item."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#removeChildAt",
              "!doc" : "Removes child at the specified position."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#numChildren",
              "!doc" : "Returns a length of children array."
            },
            "del" : {
              "!type" : "fn(var_args: +Object) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#del",
              "!doc" : "Removes from data by path specified using mapping."
            },
            "addChild" : {
              "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#addChild",
              "!doc" : "Adds a child."
            },
            "getParent" : {
              "!type" : "fn() -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#getParent",
              "!doc" : "Gets a data item's parent."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#remove",
              "!doc" : "Removes data item."
            },
            "addChildAt" : {
              "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem, index: number) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#addChildAt",
              "!doc" : "Inserts a child into a specified position."
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#getChildAt",
              "!doc" : "Gets the child by index."
            },
            "meta" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#meta",
              "!doc" : "Getter for a meta data."
            },
            "indexOfChild" : {
              "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> number",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#indexOfChild",
              "!doc" : "Gets the index of child in a children array."
            },
            "set" : {
              "!type" : "fn(var_args: +Object) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#set",
              "!doc" : "Sets value to the data by path."
            },
            "removeChild" : {
              "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#removeChild",
              "!doc" : "Removes data item's child."
            },
            "removeChildren" : {
              "!type" : "fn() -> +anychart.data.TreeView.DataItem",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#removeChildren",
              "!doc" : "Removes children."
            },
            "get" : {
              "!type" : "fn(var_args: +Object) -> +Object",
              "!url" : "8.3.0/anychart.data.TreeView.DataItem#get",
              "!doc" : "Gets value from data by path specified using mapping."
            }
          }
        }
      },
      "loadXmlFile" : {
        "!type" : "fn(url: string, onSuccess: fn(), opt_onError?: fn(), opt_method?: string, opt_content?: ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string, opt_headers?: Object, opt_timeoutInterval?: number, opt_withCredentials?: bool, opt_context?: +Object)",
        "!url" : "8.3.0/anychart.data#loadXmlFile",
        "!doc" : "Loads the XML file."
      },
      "TextParsingSettings" : {
        "!doc" : "Settings for parsing text.",
        "!url" : "8.3.0/anychart.data.TextParsingSettings",
        "prototype" : {
          "ignoreItems" : {
            "!type" : "[string]",
            "!doc" : "Array of ignore items."
          },
          "columnsSeparator" : {
            "!type" : "string",
            "!doc" : "Columns separator. Defaults to ',' for CSV mode."
          },
          "minLength" : {
            "!type" : "number",
            "!doc" : "Minimum length. Defaults to 0, inclusive min length for the byWord mode. If the check fails - drops the word from parsing."
          },
          "maxItems" : {
            "!type" : "number",
            "!doc" : "Number of top frequent words to put to result."
          },
          "mode" : {
            "!type" : "+anychart.enums.TextParsingMode|string",
            "!doc" : "Mode selector."
          },
          "maxLength" : {
            "!type" : "number",
            "!doc" : "Maximum length. Defaults to NaN, inclusive max length for the byWord mode. If the check fails - drops the word from parsing."
          },
          "ignoreTrailingSpaces" : {
            "!type" : "bool",
            "!doc" : "Whether to ignore trailing spaces. Defaults to false for CSV mode."
          },
          "rowsSeparator" : {
            "!type" : "string",
            "!doc" : "Rows separator. Defaults to '\\n' for CSV mode."
          },
          "ignoreFirstRow" : {
            "!type" : "bool",
            "!doc" : "Whether to ignore first row. Defaults to false for CSV mode."
          },
          "cutLength" : {
            "!type" : "number",
            "!doc" : "Cut length. Defaults to NaN. If not NaN - cuts all words by this length and then applies frequency check."
          }
        }
      },
      "TableSelectable" : {
        "!doc" : "Table mapping proxy that supports selection",
        "!url" : "8.3.0/anychart.data.TableSelectable",
        "prototype" : {
          "getIterator" : {
            "!type" : "fn() -> +anychart.data.TableIterator",
            "!url" : "8.3.0/anychart.data.TableSelectable#getIterator",
            "!doc" : "Returns a new iterator for current selection."
          },
          "search" : {
            "!type" : "fn(key: number|string|Date, opt_mode?: +anychart.enums.TableSearchMode|string) -> +anychart.data.TableSelectable.RowProxy",
            "!url" : "8.3.0/anychart.data.TableSelectable#search",
            "!doc" : "Searches asked key with asked mode and return an object that allows values fetching."
          },
          "select" : {
            "!type" : "fn(startDate: number|string|Date, endDate: number|string|Date, opt_intervalUnit?: +anychart.enums.Interval|string, opt_intervalCount?: number) -> +anychart.data.TableSelectable",
            "!url" : "8.3.0/anychart.data.TableSelectable#select",
            "!doc" : "Selects asked range."
          },
          "selectAll" : {
            "!type" : "fn(opt_intervalUnit?: +anychart.enums.Interval|string, opt_intervalCount?: number) -> +anychart.data.TableSelectable",
            "!url" : "8.3.0/anychart.data.TableSelectable#selectAll",
            "!doc" : "Selects the full range of the storage."
          }
        },
        "RowProxy" : {
          "!doc" : "Represents table row with associated mapping. Allows fetching rows values.",
          "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy",
          "prototype" : {
            "get" : {
              "!type" : "fn(field: string) -> +Object",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#get",
              "!doc" : "Returns current field values."
            },
            "getColumn" : {
              "!type" : "fn(column: number) -> +Object",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getColumn",
              "!doc" : "Returns current column value."
            },
            "getIndex" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getIndex",
              "!doc" : "Returns index of the item in the selection that has created this item."
            },
            "getKey" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.TableSelectable.RowProxy#getKey",
              "!doc" : "Returns item key."
            }
          }
        }
      },
      "loadJsonFile" : {
        "!type" : "fn(url: string, onSuccess: function(data:[Object|string|number|bool]), opt_onError?: fn(), opt_method?: string, opt_content?: ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string, opt_headers?: Object, opt_timeoutInterval?: number, opt_withCredentials?: bool, opt_context?: +Object)",
        "!url" : "8.3.0/anychart.data#loadJsonFile",
        "!doc" : "Loads the JSON file."
      },
      "loadGoogleSpreadsheet" : {
        "!type" : "fn(key: string|Object, onSuccess: fn(), opt_onError?: fn(), opt_timeoutInterval?: number, opt_context?: +Object)",
        "!url" : "8.3.0/anychart.data#loadGoogleSpreadsheet",
        "!doc" : "Loads the Google Spreadsheets."
      },
      "DataSettings" : {
        "!doc" : "Type definition for table data.",
        "!url" : "8.3.0/anychart.data.DataSettings",
        "prototype" : {
          "caption" : {
            "!type" : "string",
            "!doc" : "Table caption."
          },
          "header" : {
            "!type" : "[string]",
            "!doc" : "Table header."
          },
          "rows" : {
            "!type" : "+Array",
            "!doc" : "Table rows."
          },
          "text" : {
            "!type" : "string",
            "!doc" : "Defines data as string to be parsed. Has less priority than rows."
          },
          "textSettings" : {
            "!type" : "+anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings",
            "!doc" : "Defines text parsing settings. Defaults to \"csv\"."
          }
        }
      },
      "set" : {
        "!type" : "fn(opt_data?: +Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.Set",
        "!url" : "8.3.0/anychart.data#set",
        "!doc" : "Return instance of class {@link anychart.data.Set}."
      },
      "Tree" : {
        "!doc" : "Tree data model.",
        "!url" : "8.3.0/anychart.data.Tree",
        "prototype" : {
          "getChildren" : {
            "!type" : "fn() -> [+anychart.data.Tree.DataItem]",
            "!url" : "8.3.0/anychart.data.Tree#getChildren",
            "!doc" : "Returns a copy of roots array."
          },
          "removeChildAt" : {
            "!type" : "fn(index: number) -> +anychart.data.Tree.DataItem",
            "!url" : "8.3.0/anychart.data.Tree#removeChildAt",
            "!doc" : "Removes the child at specified position."
          },
          "searchItems" : {
            "!type" : "fn(field: string, value: +Object, opt_comparisonFn?: function(value1:+Object, value2:+Object)) -> [+anychart.data.Tree.DataItem]",
            "!url" : "8.3.0/anychart.data.Tree#searchItems",
            "!doc" : "Performs search of an array of the items."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "numChildren" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Tree#numChildren",
            "!doc" : "Returns a length of roots array."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "addChild" : {
            "!type" : "fn(child: Object) -> +anychart.data.Tree.DataItem",
            "!url" : "8.3.0/anychart.data.Tree#addChild",
            "!doc" : "Adds a new root element and returns it."
          },
          "addChildAt" : {
            "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem, index: number) -> +anychart.data.Tree.DataItem",
            "!url" : "8.3.0/anychart.data.Tree#addChildAt",
            "!doc" : "Inserts a new root element into a specified position by index and returns it."
          },
          "filter" : {
            "!type" : "fn(filterFunction: function(item:+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem)) -> [+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem]",
            "!url" : "8.3.0/anychart.data.Tree#filter",
            "!doc" : "Filters the tree data items using the filter-function."
          },
          "mapAs" : {
            "!type" : "fn(opt_mapping?: Object) -> +anychart.data.TreeView",
            "!url" : "8.3.0/anychart.data.Tree#mapAs",
            "!doc" : "Returns a new mapping for the tree."
          },
          "createIndexOn" : {
            "!type" : "fn(field: string, opt_asString?: bool, opt_comparisonFn?: function(value1:+Object, value2:+Object)) -> +anychart.data.Tree",
            "!url" : "8.3.0/anychart.data.Tree#createIndexOn",
            "!doc" : "Creates an index on a specified field."
          },
          "getChildAt" : {
            "!type" : "fn(index: number) -> +anychart.data.Tree.DataItem",
            "!url" : "8.3.0/anychart.data.Tree#getChildAt",
            "!doc" : "Gets the child by index."
          },
          "dispatchEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.data.Tree",
            "!url" : "8.3.0/anychart.data.Tree#dispatchEvents",
            "!doc" : "Tree CRUD events dispatching"
          },
          "indexOfChild" : {
            "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> number",
            "!url" : "8.3.0/anychart.data.Tree#indexOfChild",
            "!doc" : "Gets the index of child in a roots array."
          },
          "getTraverser" : {
            "!type" : "fn() -> +anychart.data.Traverser",
            "!url" : "8.3.0/anychart.data.Tree#getTraverser",
            "!doc" : "Creates tree data traverser."
          },
          "removeChild" : {
            "!type" : "fn(child: +anychart.data.Tree.DataItem) -> +anychart.data.Tree.DataItem",
            "!url" : "8.3.0/anychart.data.Tree#removeChild",
            "!doc" : "Removes tree's root data item."
          },
          "removeChildren" : {
            "!type" : "fn() -> +anychart.data.Tree",
            "!url" : "8.3.0/anychart.data.Tree#removeChildren",
            "!doc" : "Removes children of the tree."
          },
          "search" : {
            "!type" : "fn(field: string, value: +Object, opt_comparisonFn?: function(value1:+Object, value2:+Object)) -> +anychart.data.Tree.DataItem|[+anychart.data.Tree.DataItem]",
            "!url" : "8.3.0/anychart.data.Tree#search",
            "!doc" : "Performs a data search."
          },
          "addData" : {
            "!type" : "fn(data: [Object]|string, opt_fillingMethod?: +anychart.enums.TreeFillingMethod|string, opt_csvSettingsOrDeps?: Object|[+anychart.data.Tree.Dependency]) -> +anychart.data.Tree",
            "!url" : "8.3.0/anychart.data.Tree#addData",
            "!doc" : "Adds a data."
          },
          "removeIndexOn" : {
            "!type" : "fn(field: string) -> +anychart.data.Tree",
            "!url" : "8.3.0/anychart.data.Tree#removeIndexOn",
            "!doc" : "Removes index on a specified field."
          }
        },
        "Dependency" : {
          "!doc" : "Type definition for dependency.",
          "!url" : "8.3.0/anychart.data.Tree.Dependency",
          "prototype" : {
            "from" : {
              "!type" : "string|number",
              "!doc" : "Id"
            },
            "to" : {
              "!type" : "string|number",
              "!doc" : "Id"
            }
          }
        },
        "DataItem" : {
          "!doc" : "Tree data item.",
          "!url" : "8.3.0/anychart.data.Tree.DataItem",
          "prototype" : {
            "getChildren" : {
              "!type" : "fn() -> [+anychart.data.Tree.DataItem]",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#getChildren",
              "!doc" : "Returns a copy of children array of the current data item."
            },
            "removeChildAt" : {
              "!type" : "fn(index: number) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#removeChildAt",
              "!doc" : "Removes child at specified position."
            },
            "numChildren" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#numChildren",
              "!doc" : "Returns a length of children array."
            },
            "del" : {
              "!type" : "fn(var_args: +Object) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#del",
              "!doc" : "Removes from data by specified path."
            },
            "addChild" : {
              "!type" : "fn(child: Object|+anychart.data.Tree.DataItem) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#addChild",
              "!doc" : "Adds a child."
            },
            "getParent" : {
              "!type" : "fn() -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#getParent",
              "!doc" : "Gets a data item's parent."
            },
            "remove" : {
              "!type" : "fn() -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#remove",
              "!doc" : "Removes data item."
            },
            "addChildAt" : {
              "!type" : "fn(child: Object|+anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem, index: number) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#addChildAt",
              "!doc" : "Inserts a child into a specified position."
            },
            "getChildAt" : {
              "!type" : "fn(index: number) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#getChildAt",
              "!doc" : "Gets the child by index."
            },
            "meta" : {
              "!type" : "fn(key: string, opt_value?: +Object) -> +Object",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#meta",
              "!doc" : "Metadata settings."
            },
            "indexOfChild" : {
              "!type" : "fn(child: +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem) -> number",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#indexOfChild",
              "!doc" : "Gets the index of child in a children array."
            },
            "set" : {
              "!type" : "fn(var_args: +Object) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#set",
              "!doc" : "Sets a value to the data by path."
            },
            "removeChild" : {
              "!type" : "fn(child: +anychart.data.Tree.DataItem) -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#removeChild",
              "!doc" : "Removes data item's child."
            },
            "removeChildren" : {
              "!type" : "fn() -> +anychart.data.Tree.DataItem",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#removeChildren",
              "!doc" : "Removes children."
            },
            "get" : {
              "!type" : "fn(key: string) -> +Object",
              "!url" : "8.3.0/anychart.data.Tree.DataItem#get",
              "!doc" : "Gets a value from data by key."
            }
          }
        }
      },
      "loadCsvFile" : {
        "!type" : "fn(url: string, onSuccess: function(data:[string]), opt_onError?: fn(), opt_method?: string, opt_content?: ArrayBuffer|ArrayBufferView|Blob|Document|FormData|string, opt_headers?: Object, opt_timeoutInterval?: number, opt_withCredentials?: bool, opt_context?: +Object)",
        "!url" : "8.3.0/anychart.data#loadCsvFile",
        "!doc" : "Loads the CSV file."
      },
      "Table" : {
        "!doc" : "Stock data table constructor.",
        "!url" : "8.3.0/anychart.data.Table",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "removeFirst" : {
            "!type" : "fn(opt_count?: number) -> +anychart.data.Table",
            "!url" : "8.3.0/anychart.data.Table#removeFirst",
            "!doc" : "Removes first opt_count rows from the storage also considering appended but not yet committed rows."
          },
          "remove" : {
            "!type" : "fn(opt_startKey?: number|string|Date, opt_endKey?: number|string|Date) -> +anychart.data.Table",
            "!url" : "8.3.0/anychart.data.Table#remove",
            "!doc" : "Removes all items between a start and end keys."
          },
          "mapAs" : {
            "!type" : "fn(opt_fields?: +Object) -> +anychart.data.TableMapping",
            "!url" : "8.3.0/anychart.data.Table#mapAs",
            "!doc" : "Returns a new mapping for the table."
          },
          "createComputer" : {
            "!type" : "fn(opt_mappingSettingsOrMapping?: +anychart.data.TableMapping|+Object) -> +anychart.data.TableComputer",
            "!url" : "8.3.0/anychart.data.Table#createComputer",
            "!doc" : "Creates new computer with given input fields."
          },
          "addData" : {
            "!type" : "fn(rawData: +Array|string, opt_removeFromStart?: bool|number, opt_csvSettings?: Object) -> +anychart.data.Table",
            "!url" : "8.3.0/anychart.data.Table#addData",
            "!doc" : "Adds data to the table. Replaces all rows with duplicating keys by the last seen row with that key."
          }
        }
      },
      "Set" : {
        "!doc" : "Linear data storage.",
        "!url" : "8.3.0/anychart.data.Set",
        "prototype" : {
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "getRowsCount" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.data.Set#getRowsCount",
            "!doc" : "Returns the number of the rows in the current data set."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "remove" : {
            "!type" : "fn(index: number) -> +anychart.data.Set",
            "!url" : "8.3.0/anychart.data.Set#remove",
            "!doc" : "Removes the row by index."
          },
          "mapAs" : {
            "!type" : "fn(opt_mapping?: Object) -> +anychart.data.Mapping",
            "!url" : "8.3.0/anychart.data.Set#mapAs",
            "!doc" : "Defines mapping for the chart data."
          },
          "row" : {
            "!type" : "fn(rowIndex: number, opt_value?: +Object) -> +Object",
            "!url" : "8.3.0/anychart.data.Set#row",
            "!doc" : "Row of the set by the index"
          },
          "append" : {
            "!type" : "fn(var_args: +Object) -> +anychart.data.Set",
            "!url" : "8.3.0/anychart.data.Set#append",
            "!doc" : "Appends new rows to the set. Each argument is a row that is appended to the Set."
          },
          "insert" : {
            "!type" : "fn(row: +Object, opt_index?: number) -> +anychart.data.Set",
            "!url" : "8.3.0/anychart.data.Set#insert",
            "!doc" : "Inserts the row to the set at the specified position."
          },
          "data" : {
            "!type" : "fn(opt_value?: +Array|string, opt_settings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +Array|+anychart.data.Set",
            "!url" : "8.3.0/anychart#data.Set#data",
            "!doc" : "Data settings."
          }
        }
      }
    },
    "column3d" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Cartesian3d",
      "!url" : "8.3.0/anychart#column3d",
      "!doc" : "Creates and returns an Column 3D Chart."
    },
    "color" : {
      "bipolarHueProgression" : {
        "!type" : "fn(opt_color1?: string, opt_color2?: string, opt_count?: number) -> [string]",
        "!url" : "8.3.0/anychart.color#bipolarHueProgression",
        "!doc" : "Multiple bipolar hue progression."
      },
      "blend" : {
        "!type" : "fn(rgb1: [number], rgb2: [number], factor: number) -> +anychart.graphics.vector.SolidFill",
        "!url" : "8.3.0/anychart.color#blend",
        "!doc" : "Blend two colors together, using the specified factor to indicate the weight given to the first color."
      },
      "blendedHueProgression" : {
        "!type" : "fn(opt_color1?: string, opt_color2?: string, opt_count?: number) -> [string]",
        "!url" : "8.3.0/anychart.color#blendedHueProgression",
        "!doc" : "Multiple blended hue progression."
      },
      "darken" : {
        "!type" : "fn(fillOrStroke: +anychart.graphics.vector.Fill|+anychart.graphics.vector.Stroke, opt_factor?: number) -> string|+anychart.graphics.vector.Fill|+anychart.graphics.vector.Stroke",
        "!url" : "8.3.0/anychart.color#darken",
        "!doc" : "Makes color darker by a factor."
      },
      "lighten" : {
        "!type" : "fn(fillOrStroke: +anychart.graphics.vector.Fill|+anychart.graphics.vector.Stroke, opt_factor?: number) -> string|+anychart.graphics.vector.Fill|+anychart.graphics.vector.Stroke",
        "!url" : "8.3.0/anychart.color#lighten",
        "!doc" : "Makes color lighter by a factor."
      },
      "setThickness" : {
        "!type" : "fn(stroke: +anychart.graphics.vector.Stroke, thickness: number, opt_opacity?: number) -> +anychart.graphics.vector.Stroke",
        "!url" : "8.3.0/anychart.color#setThickness",
        "!doc" : "Sets opacity to stroke."
      },
      "singleHueProgression" : {
        "!type" : "fn(opt_color?: string, opt_count?: number, opt_startOrTargetLightness?: number, opt_endLightness?: number) -> [string]",
        "!url" : "8.3.0/anychart.color#singleHueProgression",
        "!doc" : "Single-hue progression."
      },
      "!doc" : "Color utility namespace.",
      "!url" : "8.3.0/anychart.color"
    },
    "core" : {
      "NoDataSettings" : {
        "!doc" : "Class with settings for \"No data\" feature.",
        "!url" : "8.3.0/anychart.core.NoDataSettings",
        "prototype" : {
          "label" : {
            "!type" : "fn(opt_value?: Object|string|bool) -> +anychart.core.ui.Label|+anychart.core.NoDataSettings",
            "!url" : "8.3.0/anychart.core.NoDataSettings#label",
            "!doc" : "No data label."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "map" : {
        "series" : {
          "Marker" : {
            "!doc" : "Marker series.",
            "!url" : "8.3.0/anychart.core.map.series.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.map.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "overlapMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#overlapMode",
                "!doc" : "Overlap mode for series labels"
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.map.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "colorScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Marker#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Marker#size",
                "!doc" : "Marker size settings."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Bubble" : {
            "!doc" : "Bubble series.",
            "!url" : "8.3.0/anychart.core.map.series.Bubble",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "negativeFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#negativeFill",
                "!doc" : "Fill settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "displayNegative" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#displayNegative",
                "!doc" : "Negative option."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.map.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "overlapMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#overlapMode",
                "!doc" : "Overlap mode for series labels"
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "negativeHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#negativeHatchFill",
                "!doc" : "Negative hatch fill settings."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.map.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "colorScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#colorScale",
                "!doc" : "Color scale settings."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "negativeStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Bubble#negativeStroke",
                "!doc" : "Negative stroke settings."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.map.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Choropleth" : {
            "!doc" : "Choropleth series. Read more about choropleth here.",
            "!url" : "8.3.0/anychart.core.map.series.Choropleth",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.map.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "overlapMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#overlapMode",
                "!doc" : "Overlap mode for series labels"
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.map.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "colorScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Choropleth#colorScale",
                "!doc" : "Color scale settings."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.map.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Choropleth",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Connector" : {
            "!doc" : "Connector series.",
            "!url" : "8.3.0/anychart.core.map.series.Connector",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "endSize" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Connector#endSize",
                "!doc" : "The end size of the connector point."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "startSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Connector#startSize",
                "!doc" : "The starting size of the connector point."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.map.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "overlapMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#overlapMode",
                "!doc" : "Overlap mode for series labels"
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.map.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "colorScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor) -> +anychart.scales.OrdinalColor|+anychart.scales.LinearColor|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Connector#colorScale",
                "!doc" : "Color scale settings."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "curvature" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.Connector#curvature",
                "!doc" : "Curvature setting."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.map.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Connector",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Choropleth series. Read more about choropleth here.",
            "!url" : "8.3.0/anychart.core.map.series.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.map.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "overlapMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#overlapMode",
                "!doc" : "Overlap mode for series labels"
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.map.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.map.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "BaseWithMarkers" : {
            "!doc" : "A base for all series except marker series.",
            "!url" : "8.3.0/anychart.core.map.series.BaseWithMarkers",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#fill",
                "!doc" : "Fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "geoIdField" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#geoIdField",
                "!doc" : "Geo id field settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|bool|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
                "!url" : "8.3.0/anychart.core.map.series.Base#transformXY",
                "!doc" : "Transforms geo coordinates to pixel values."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.map.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.map.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.map.series.",
          "!url" : "8.3.0/anychart.core.map.series"
        },
        "!doc" : "Namespace anychart.core.map.",
        "!url" : "8.3.0/anychart.core.map"
      },
      "sunburst" : {
        "Level" : {
          "!doc" : "Sunburst level settings.",
          "!url" : "8.3.0/anychart.core.sunburst.Level",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#selected",
              "!doc" : "Selected state settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#enabled",
              "!doc" : "Disable or enable level."
            },
            "hovered" : {
              "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#hovered",
              "!doc" : "Hovered state settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "normal" : {
              "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#normal",
              "!doc" : "Normal state settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "labels" : {
              "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "thickness" : {
              "!type" : "fn(opt_thickness?: string|number) -> string|number|+anychart.core.sunburst.Level",
              "!url" : "8.3.0/anychart.core.sunburst.Level#thickness",
              "!doc" : "Thickness settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.sunburst.",
        "!url" : "8.3.0/anychart.core.sunburst"
      },
      "resource" : {
        "resourceList" : {
          "TagsSettings" : {
            "!doc" : "Tags settings class.",
            "!url" : "8.3.0/anychart.core.resource.resourceList.TagsSettings",
            "prototype" : {
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontDecoration",
                "!doc" : "Font decoration settings."
              },
              "margin" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.SettingsWithMargin#margin",
                "!doc" : "Margin settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#vAlign",
                "!doc" : "Font vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontStyle",
                "!doc" : "Font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#lineHeight",
                "!doc" : "Line height settings."
              },
              "padding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TagsSettings#padding",
                "!doc" : "Padding settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#letterSpacing",
                "!doc" : "Letter spacing settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontVariant",
                "!doc" : "Font variant settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#hAlign",
                "!doc" : "Font horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontSize",
                "!doc" : "Font size settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#wordBreak",
                "!doc" : "Word break mode."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#selectable",
                "!doc" : "Text selectable settings."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textDirection",
                "!doc" : "Text direction settings."
              },
              "background" : {
                "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TagsSettings#background",
                "!doc" : "Background settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textIndent",
                "!doc" : "Text indent settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.resource.resourceList.TagsSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontColor",
                "!doc" : "Font color settings."
              }
            }
          },
          "SettingsWithMargin" : {
            "!doc" : "Settings with margin.",
            "!url" : "8.3.0/anychart.core.resource.resourceList.SettingsWithMargin",
            "prototype" : {
              "margin" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.resource.resourceList.SettingsWithMargin",
                "!url" : "8.3.0/anychart.core.resource.resourceList.SettingsWithMargin#margin",
                "!doc" : "Margin settings."
              }
            }
          },
          "TextSettings" : {
            "!doc" : "Class representing text settings for resource list items.",
            "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings",
            "prototype" : {
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontDecoration",
                "!doc" : "Font decoration settings."
              },
              "margin" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.SettingsWithMargin#margin",
                "!doc" : "Margin settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#vAlign",
                "!doc" : "Font vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontStyle",
                "!doc" : "Font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#lineHeight",
                "!doc" : "Line height settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#letterSpacing",
                "!doc" : "Letter spacing settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontVariant",
                "!doc" : "Font variant settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#hAlign",
                "!doc" : "Font horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontSize",
                "!doc" : "Font size settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#wordBreak",
                "!doc" : "Word break mode."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#selectable",
                "!doc" : "Text selectable settings."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#textIndent",
                "!doc" : "Text indent settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.resource.resourceList.TextSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.TextSettings#fontColor",
                "!doc" : "Font color settings."
              }
            }
          },
          "ImageSettings" : {
            "!doc" : "Class representing text settings for resource list items.",
            "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings",
            "prototype" : {
              "align" : {
                "!type" : "fn(value: string|+anychart.graphics.vector.Image.Align) -> string|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings#align",
                "!doc" : "Image align."
              },
              "borderRadius" : {
                "!type" : "fn(opt_value?: number|[number]) -> [number]|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings#borderRadius",
                "!doc" : "Border radius settings."
              },
              "fittingMode" : {
                "!type" : "fn(value: string|+anychart.graphics.vector.Image.Fitting) -> string|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings#fittingMode",
                "!doc" : "Fitting mode."
              },
              "margin" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.SettingsWithMargin#margin",
                "!doc" : "Margin settings."
              },
              "opacity" : {
                "!type" : "fn(opt_value?: number) -> string|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings#opacity",
                "!doc" : "Image opacity."
              },
              "size" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.resource.resourceList.ImageSettings",
                "!url" : "8.3.0/anychart.core.resource.resourceList.ImageSettings#size",
                "!doc" : "Image size settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.resource.resourceList.",
          "!url" : "8.3.0/anychart.core.resource.resourceList"
        },
        "Logo" : {
          "!doc" : "Resource Chart Logo element.",
          "!url" : "8.3.0/anychart.core.resource.Logo",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "cornerType" : {
              "!type" : "fn(opt_value?: +anychart.enums.BackgroundCornersType|string) -> +anychart.enums.BackgroundCornersType|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.ui.Background#cornerType",
              "!doc" : "Corner type."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.ui.Background#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "corners" : {
              "!type" : "fn(opt_value?: number|string|[number], opt_topRight?: number|string, opt_bottomRight?: number|string, opt_bottomLeft?: number|string) -> [number]|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.ui.Background#corners",
              "!doc" : "Corner radius."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.ui.Background#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "overlay" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gantt.Overlay|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.resource.Logo#overlay",
              "!doc" : "Overlay element."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Logo",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          }
        },
        "ResourceList" : {
          "!doc" : "Resource list constructor.",
          "!url" : "8.3.0/anychart.core.resource.ResourceList",
          "prototype" : {
            "descriptions" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#descriptions",
              "!doc" : "Descriptions settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "tags" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TagsSettings|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#tags",
              "!doc" : "Tags settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "types" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#types",
              "!doc" : "Types settings."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "drawLeftLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#drawLeftLine",
              "!doc" : "Drawing of the left line."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#stroke",
              "!doc" : "Stroke settings."
            },
            "drawRightLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#drawRightLine",
              "!doc" : "Drawing of the right line."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "names" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.TextSettings|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#names",
              "!doc" : "Names settings."
            },
            "images" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.resource.resourceList.ImageSettings|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#images",
              "!doc" : "Images settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "drawTopLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#drawTopLine",
              "!doc" : "Drawing of the top line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "drawBottomLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#drawBottomLine",
              "!doc" : "Drawing of the bottom line."
            },
            "oddFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#oddFill",
              "!doc" : "Odd fill settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#background",
              "!doc" : "Background settings."
            },
            "overlay" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.gantt.Overlay|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#overlay",
              "!doc" : "Overlay element."
            },
            "evenFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.resource.ResourceList#evenFill",
              "!doc" : "Even fill settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.ResourceList",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          }
        },
        "Conflicts" : {
          "!doc" : "Conflicts settings and drawing class",
          "!url" : "8.3.0/anychart.core.resource.Conflicts",
          "prototype" : {
            "height" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.resource.Conflicts#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.resource.Conflicts#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.resource.Conflicts#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.resource.Conflicts#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Conflicts",
              "!url" : "8.3.0/anychart.core.resource.Conflicts#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Grid" : {
          "!doc" : "Resource Chart grid.",
          "!url" : "8.3.0/anychart.core.resource.Grid",
          "prototype" : {
            "oddHolidayFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#oddHolidayFill",
              "!doc" : "Odd holiday fill settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "evenHolidayFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#evenHolidayFill",
              "!doc" : "Even holiday fill settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "verticalStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#verticalStroke",
              "!doc" : "Vertical stroke settings."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "drawLeftLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#drawLeftLine",
              "!doc" : "Drawing of the left line."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "oddHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#oddHatchFill",
              "!doc" : "Odd hatch fill settings."
            },
            "drawRightLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#drawRightLine",
              "!doc" : "Drawing of the right line."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "horizontalStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#horizontalStroke",
              "!doc" : "Horizontal stroke settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "drawTopLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#drawTopLine",
              "!doc" : "Drawing of the top line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "evenHolidayHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#evenHolidayHatchFill",
              "!doc" : "Even holiday hatch fill settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "drawBottomLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#drawBottomLine",
              "!doc" : "Drawing of the bottom line."
            },
            "oddHolidayHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#oddHolidayHatchFill",
              "!doc" : "Odd holiday hatch fill settings."
            },
            "evenHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#evenHatchFill",
              "!doc" : "Even hatch fill settings."
            },
            "oddFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#oddFill",
              "!doc" : "Odd fill settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#background",
              "!doc" : "Background settings."
            },
            "overlay" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gantt.Overlay|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#overlay",
              "!doc" : "Overlay element."
            },
            "evenFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.resource.Grid#evenFill",
              "!doc" : "Even fill settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          }
        },
        "Activities" : {
          "!doc" : "Activity settings representation class.",
          "!url" : "8.3.0/anychart.core.resource.Activities",
          "prototype" : {
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#color",
              "!doc" : "Color settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#fill",
              "!doc" : "Fill settings."
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#hovered",
              "!doc" : "Hovered state settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#labels",
              "!doc" : "Labels settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#normal",
              "!doc" : "Normal state settings."
            },
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#selected",
              "!doc" : "Selected state settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.resource.Activities",
              "!url" : "8.3.0/anychart.core.resource.Activities#stroke",
              "!doc" : "Stroke settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.resource.",
        "!url" : "8.3.0/anychart.core.resource"
      },
      "VisualBaseWithBounds" : {
        "!doc" : "An extended base element that understands bounds settings and can handle percent values in it.",
        "!url" : "8.3.0/anychart.core.VisualBaseWithBounds",
        "prototype" : {
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.VisualBaseWithBounds",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          }
        }
      },
      "ui" : {
        "table" : {
          "Padding" : {
            "!doc" : "Padding settings proxy. Doesn't store anything - just passes settings to and from the parent object.",
            "!url" : "8.3.0/anychart.core.ui.table.Padding",
            "prototype" : {
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.table.Padding",
                "!url" : "8.3.0/anychart.core.ui.table.Padding#bottom",
                "!doc" : "Bottom padding settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.table.Padding",
                "!url" : "8.3.0/anychart.core.ui.table.Padding#left",
                "!doc" : "Left padding settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.table.Padding",
                "!url" : "8.3.0/anychart.core.ui.table.Padding#right",
                "!doc" : "Right  padding settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.table.Padding",
                "!url" : "8.3.0/anychart.core.ui.table.Padding#top",
                "!doc" : "Top padding settings."
              }
            }
          },
          "Row" : {
            "!doc" : "Table row settings container.",
            "!url" : "8.3.0/anychart.core.ui.table.Row",
            "prototype" : {
              "getCell" : {
                "!type" : "fn(col: number) -> +anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Row#getCell",
                "!doc" : "Returns cell of current row by column index."
              },
              "getRowNum" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.table.Row#getRowNum",
                "!doc" : "Returns row index."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontDecoration",
                "!doc" : "Text font decoration settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#minHeight",
                "!doc" : "Row minimum height settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#height",
                "!doc" : "Row height settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontFamily",
                "!doc" : "Text font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontStyle",
                "!doc" : "Text font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontWeight",
                "!doc" : "Text font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#lineHeight",
                "!doc" : "Text line height settings."
              },
              "border" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#border",
                "!doc" : "Border settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#maxHeight",
                "!doc" : "Row maximum height settings."
              },
              "cellPadding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#cellPadding",
                "!doc" : "Padding settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontVariant",
                "!doc" : "Text font variant settings."
              },
              "cellBorder" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#cellBorder",
                "!doc" : "Cell border settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontOpacity",
                "!doc" : "Text font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontSize",
                "!doc" : "Text font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#disablePointerEvents",
                "!doc" : "Disable pointer events settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "cellFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Row#cellFill",
                "!doc" : "Cell fill settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordBreak",
                "!doc" : "Word break mode."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textIndent",
                "!doc" : "Text line height settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontColor",
                "!doc" : "Text font color settings."
              }
            }
          },
          "Border" : {
            "!doc" : "Border settings proxy. Doesn't store anything - just passes settings to and from the parent object.",
            "!url" : "8.3.0/anychart.core.ui.table.Border",
            "prototype" : {
              "bottom" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Border#bottom",
                "!doc" : "Bottom border settings."
              },
              "left" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Border#left",
                "!doc" : "Left border settings."
              },
              "right" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Border#right",
                "!doc" : "Right border settings."
              },
              "top" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Border#top",
                "!doc" : "Top border settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for Row, Column and Cell. Contains text settings and lazy settings object initialization.",
            "!url" : "8.3.0/anychart.core.ui.table.Base",
            "prototype" : {
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontDecoration",
                "!doc" : "Text font decoration settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontFamily",
                "!doc" : "Text font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontStyle",
                "!doc" : "Text font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontWeight",
                "!doc" : "Text font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#lineHeight",
                "!doc" : "Text line height settings."
              },
              "border" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#border",
                "!doc" : "Border settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontVariant",
                "!doc" : "Text font variant settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontOpacity",
                "!doc" : "Text font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontSize",
                "!doc" : "Text font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#disablePointerEvents",
                "!doc" : "Disable pointer events settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordBreak",
                "!doc" : "Word break mode."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textIndent",
                "!doc" : "Text line height settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Base",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontColor",
                "!doc" : "Text font color settings."
              }
            }
          },
          "Cell" : {
            "!doc" : "Table cell.",
            "!url" : "8.3.0/anychart.core.ui.table.Cell",
            "prototype" : {
              "getRowNum" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#getRowNum",
                "!doc" : "Returns current cell row number."
              },
              "colSpan" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#colSpan",
                "!doc" : "Cell columns span settings."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontDecoration",
                "!doc" : "Text font decoration settings."
              },
              "getColNum" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#getColNum",
                "!doc" : "Returns current cell column number."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontFamily",
                "!doc" : "Text font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontStyle",
                "!doc" : "Text font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontWeight",
                "!doc" : "Text font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#lineHeight",
                "!doc" : "Text line height settings."
              },
              "border" : {
                "!type" : "fn(opt_strokeOrFill?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#border",
                "!doc" : "Cell border settings."
              },
              "padding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#padding",
                "!doc" : "Padding settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "rowSpan" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#rowSpan",
                "!doc" : "Rows columns span settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontVariant",
                "!doc" : "Text font variant settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontOpacity",
                "!doc" : "Text font opacity settings."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#fill",
                "!doc" : "Fill settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontSize",
                "!doc" : "Text font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#disablePointerEvents",
                "!doc" : "Disable pointer events settings."
              },
              "content" : {
                "!type" : "fn(opt_settings?: +anychart.graphics.vector.Element|+anychart.core.VisualBase|string|number) -> +anychart.graphics.vector.Element|+anychart.core.VisualBase|string|number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#content",
                "!doc" : "Cell content settings."
              },
              "getRow" : {
                "!type" : "fn() -> +anychart.core.ui.table.Row",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#getRow",
                "!doc" : "Returns current cell row instance."
              },
              "getCol" : {
                "!type" : "fn() -> +anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#getCol",
                "!doc" : "Returns current cell column instance."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordBreak",
                "!doc" : "Word break mode."
              },
              "getBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.ui.table.Cell#getBounds",
                "!doc" : "Returns cell bounds without padding counted (bounds which are used for borders drawing)."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textIndent",
                "!doc" : "Text line height settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontColor",
                "!doc" : "Text font color settings."
              }
            }
          },
          "Column" : {
            "!doc" : "Table column settings container.",
            "!url" : "8.3.0/anychart.core.ui.table.Column",
            "prototype" : {
              "getCell" : {
                "!type" : "fn(row: number) -> +anychart.core.ui.table.Cell",
                "!url" : "8.3.0/anychart.core.ui.table.Column#getCell",
                "!doc" : "Returns cell of current column by row index."
              },
              "width" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#width",
                "!doc" : "Column width settings."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontDecoration",
                "!doc" : "Text font decoration settings."
              },
              "getColNum" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.table.Column#getColNum",
                "!doc" : "Returns column index."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontFamily",
                "!doc" : "Text font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontStyle",
                "!doc" : "Text font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontWeight",
                "!doc" : "Text font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#lineHeight",
                "!doc" : "Text line height settings."
              },
              "border" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#border",
                "!doc" : "Border settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "cellPadding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#cellPadding",
                "!doc" : "Cell padding settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#minWidth",
                "!doc" : "Column minimum width settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontVariant",
                "!doc" : "Text font variant settings."
              },
              "cellBorder" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#cellBorder",
                "!doc" : "Cell border settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontOpacity",
                "!doc" : "Text font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontSize",
                "!doc" : "Text font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#disablePointerEvents",
                "!doc" : "Disable pointer events settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "cellFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#cellFill",
                "!doc" : "Cell fill settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#wordBreak",
                "!doc" : "Word break mode."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Column#maxWidth",
                "!doc" : "Column maximum width settings."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#textIndent",
                "!doc" : "Text line height settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.table.Column",
                "!url" : "8.3.0/anychart.core.ui.table.Base#fontColor",
                "!doc" : "Text font color settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.ui.table.",
          "!url" : "8.3.0/anychart.core.ui.table"
        },
        "DataArea" : {
          "!doc" : "DataArea class.",
          "!url" : "8.3.0/anychart.core.ui.DataArea",
          "prototype" : {
            "background" : {
              "!type" : "fn(opt_settings?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.DataArea",
              "!url" : "8.3.0/anychart.core.ui.DataArea#background",
              "!doc" : "Background settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.DataArea",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataArea",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            }
          }
        },
        "Tooltip" : {
          "!doc" : "Class for the tooltip.",
          "!url" : "8.3.0/anychart.core.ui.Tooltip",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#maxFontSize",
              "!doc" : "Maximum font size settings."
            },
            "displayMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.TooltipDisplayMode|string) -> +anychart.enums.TooltipDisplayMode|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#displayMode",
              "!doc" : "Display mode settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#width",
              "!doc" : "Tooltip width."
            },
            "hide" : {
              "!type" : "fn(opt_force?: bool, opt_event?: +anychart.core.MouseEvent) -> bool",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#hide",
              "!doc" : "Hides tooltips with delay."
            },
            "hideDelay" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#hideDelay",
              "!doc" : "Hide delay settings."
            },
            "allowLeaveStage" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#allowLeaveStage",
              "!doc" : "Tooltip allowLeaveStage settings."
            },
            "allowLeaveChart" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#allowLeaveChart",
              "!doc" : "Tooltip allowLeaveChart settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontDecoration",
              "!doc" : "Font decoration setting."
            },
            "height" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#height",
              "!doc" : "Tooltip height."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.VAlign) -> +anychart.graphics.vector.Text.VAlign|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#useHtml",
              "!doc" : "Enable/Disable HTML tooltip."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#lineHeight",
              "!doc" : "Text line height setting."
            },
            "positionMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.TooltipPositionMode|string) -> string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#positionMode",
              "!doc" : "Position mode settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#padding",
              "!doc" : "Padding settings."
            },
            "titleFormat" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#titleFormat",
              "!doc" : "Function to format title text."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: Object|string, opt_value?: string|number|bool) -> Object|string|number|bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#textSettings",
              "!doc" : "Font opacity setting."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "onDomReady" : {
              "!type" : "fn(handler: fn()) -> fn()|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#onDomReady",
              "!doc" : "onDomReady handler."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#anchor",
              "!doc" : "Anchor settings."
            },
            "valuePrefix" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#valuePrefix",
              "!doc" : "Prefix settings."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.Position|string) -> +anychart.enums.Position|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#minFontSize",
              "!doc" : "Minimum font size settings."
            },
            "onBeforeTitleChange" : {
              "!type" : "fn(handler: fn()) -> fn()|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#onBeforeTitleChange",
              "!doc" : "onBeforeTitleChange handler."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontSize",
              "!doc" : "Font size settings."
            },
            "onContentChanged" : {
              "!type" : "fn(handler: fn()) -> fn()|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#onContentChanged",
              "!doc" : "onContentChanged handler."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "allowLeaveScreen" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#allowLeaveScreen",
              "!doc" : "Tooltip allowLeaveScreen settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Title|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#title",
              "!doc" : "Title settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#offsetX",
              "!doc" : "X offset settings."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "onBeforeContentChange" : {
              "!type" : "fn(handler: fn()) -> fn()|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#onBeforeContentChange",
              "!doc" : "onBeforeContentChange handler."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.Direction) -> +anychart.graphics.vector.Text.Direction|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#textDirection",
              "!doc" : "Text direction settings."
            },
            "separator" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Separator|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#separator",
              "!doc" : "Separator settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Background|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#offsetY",
              "!doc" : "Y offset settings."
            },
            "valuePostfix" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#valuePostfix",
              "!doc" : "Postfix settings."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#textIndent",
              "!doc" : "Text indent settings."
            },
            "format" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#format",
              "!doc" : "Function to format content text."
            },
            "unionFormat" : {
              "!type" : "fn(opt_unionFormat?: fn()|string) -> fn()|string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#unionFormat",
              "!doc" : "Function to format content text."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_adjustOrAdjustByWidth?: bool|[bool]|Object, opt_adjustByHeight?: bool) -> number|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#adjustFontSize",
              "!doc" : "Adjusting settings."
            },
            "onTitleChanged" : {
              "!type" : "fn(handler: fn()) -> fn()|+anychart.core.ui.Tooltip",
              "!url" : "8.3.0/anychart.core.ui.Tooltip#onTitleChanged",
              "!doc" : "onTitleChanged handler."
            }
          }
        },
        "!doc" : "Namespace anychart.core.ui.",
        "Outline" : {
          "!doc" : "Outline class.",
          "!url" : "8.3.0/anychart.core.ui.Outline",
          "prototype" : {
            "enabled" : {
              "!type" : "fn(value: bool) -> bool|+anychart.core.ui.Outline",
              "!url" : "8.3.0/anychart.core.ui.Outline#enabled",
              "!doc" : "Outline state (enabled or disabled)."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.ui.Outline",
              "!url" : "8.3.0/anychart.core.ui.Outline#fill",
              "!doc" : "Fill settings."
            },
            "offset" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Outline",
              "!url" : "8.3.0/anychart.core.ui.Outline#offset",
              "!doc" : "Offset settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base",
              "!url" : "8.3.0/anychart.core.ui.Outline#stroke",
              "!doc" : "Stroke settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Outline",
              "!url" : "8.3.0/anychart.core.ui.Outline#width",
              "!doc" : "Width settings."
            }
          }
        },
        "DataGrid" : {
          "!doc" : "Data grid element.",
          "!url" : "8.3.0/anychart.core.ui.DataGrid",
          "prototype" : {
            "startIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#startIndex",
              "!doc" : "Start index."
            },
            "onEditEnd" : {
              "!type" : "fn(opt_onEditEndFunction?: fn()) -> fn()|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#onEditEnd",
              "!doc" : "onEditStart function."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "columnStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#columnStroke",
              "!doc" : "Column stroke settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "rowOddFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#rowOddFill",
              "!doc" : "Row odd fill settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "horizontalScrollBar" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ScrollBar|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#horizontalScrollBar",
              "!doc" : "Horizontal scroll bar settings."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#tooltip",
              "!doc" : "Tooltip settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "backgroundFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#backgroundFill",
              "!doc" : "Background fill settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "buttons" : {
              "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.DataGridButton|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#buttons",
              "!doc" : "DataGrid button settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "horizontalOffset" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#horizontalOffset",
              "!doc" : "Horizontal offset."
            },
            "edit" : {
              "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#edit",
              "!doc" : "Live edit settings."
            },
            "endIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#endIndex",
              "!doc" : "End index."
            },
            "rowHoverFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#rowHoverFill",
              "!doc" : "Row fill settings in hover mode."
            },
            "column" : {
              "!type" : "fn(opt_value?: number|+anychart.core.ui.DataGrid.Column|Object, opt_settings?: +anychart.core.ui.DataGrid.Column|Object) -> +anychart.core.ui.DataGrid.Column|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#column",
              "!doc" : "Column settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#draw",
              "!doc" : "Draws data grid."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "rowFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#rowFill",
              "!doc" : "Row fill settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "rowEvenFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#rowEvenFill",
              "!doc" : "Row even fill settings."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "onEditStart" : {
              "!type" : "fn(opt_onEditStartFunction?: fn()) -> fn()|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#onEditStart",
              "!doc" : "onEditStart function."
            },
            "rowSelectedFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_mode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#rowSelectedFill",
              "!doc" : "Row fill settings in selected mode."
            },
            "verticalOffset" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#verticalOffset",
              "!doc" : "Vertical offset"
            },
            "data" : {
              "!type" : "fn(opt_value?: +anychart.data.Tree) -> +anychart.data.Tree|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.ui.DataGrid#data",
              "!doc" : "Data settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          },
          "Column" : {
            "!doc" : "Data grid column.",
            "!url" : "8.3.0/anychart.core.ui.DataGrid.Column",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#width",
                "!doc" : "Column width settings."
              },
              "defaultWidth" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#defaultWidth",
                "!doc" : "Column default width settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "setColumnFormat" : {
                "!type" : "fn(fieldName: string, value: +anychart.enums.ColumnFormats|string|Object) -> +anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#setColumnFormat",
                "!doc" : "Column format settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "depthPaddingMultiplier" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#depthPaddingMultiplier",
                "!doc" : "Multiplier to choose a left padding"
              },
              "labels" : {
                "!type" : "fn() -> +anychart.core.ui.LabelsFactory",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "labelsOverrider" : {
                "!type" : "fn(opt_overriderFunction?: function(label:+anychart.core.ui.LabelsFactory.Label, item:+anychart.data.Tree.DataItem)) -> fn()|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#labelsOverrider",
                "!doc" : "labels overrider."
              },
              "title" : {
                "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#title",
                "!doc" : "Column title settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "collapseExpandButtons" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.DataGrid.Column",
                "!url" : "8.3.0/anychart.core.ui.DataGrid.Column#collapseExpandButtons",
                "!doc" : "Expand or collapse buttons."
              }
            }
          }
        },
        "Center" : {
          "!doc" : "Center class.",
          "!url" : "8.3.0/anychart.core.ui.Center",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base",
              "!url" : "8.3.0/anychart.core.ui.Center#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Center",
              "!url" : "8.3.0/anychart.core.ui.Center#fill",
              "!doc" : "Fill settings."
            },
            "content" : {
              "!type" : "fn(opt_contentSettings?: +anychart.graphics.vector.Element|+anychart.core.VisualBase|Object) -> +anychart.graphics.vector.Element|+anychart.core.VisualBase|+anychart.core.ui.Center",
              "!url" : "8.3.0/anychart.core.ui.Center#content",
              "!doc" : "Center content settings."
            },
            "getPoint" : {
              "!type" : "fn() -> +anychart.math.Coordinate",
              "!url" : "8.3.0/anychart.core.ui.Center#getPoint",
              "!doc" : "Gets the pie chart center point."
            },
            "getBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.Center#getBounds",
              "!doc" : "Returns pie center content bounds."
            }
          }
        },
        "Title" : {
          "!doc" : "Title element class.",
          "!url" : "8.3.0/anychart.core.ui.Title",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#width",
              "!doc" : "Width settings."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#align",
              "!doc" : "Align settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#height",
              "!doc" : "Height settings."
            },
            "margin" : {
              "!type" : "fn(opt_value?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#margin",
              "!doc" : "Margin settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.Title#getRemainingBounds",
              "!doc" : "Returns the remaining (after title placement) part of the container."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#text",
              "!doc" : "Title text."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#rotation",
              "!doc" : "Rotation settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#background",
              "!doc" : "Background settings."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.ui.Title#orientation",
              "!doc" : "Orientation settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Title",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "ScrollBar" : {
          "!doc" : "Scroll bar.",
          "!url" : "8.3.0/anychart.core.ui.ScrollBar",
          "prototype" : {
            "barSize" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#barSize",
              "!doc" : "Bar size settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "sliderFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#sliderFill",
              "!doc" : "Slider fill settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "buttonsVisible" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#buttonsVisible",
              "!doc" : "Enable/disable scroll button"
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "cornersRadius" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#cornersRadius",
              "!doc" : "Corners radius"
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "backgroundFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#backgroundFill",
              "!doc" : "Background fill settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "backgroundStroke" : {
              "!type" : "fn(opt_stroke?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#backgroundStroke",
              "!doc" : "Background stroke settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "mouseOverOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#mouseOverOpacity",
              "!doc" : "The mouse over opacity"
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            },
            "sliderStroke" : {
              "!type" : "fn(opt_stroke?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#sliderStroke",
              "!doc" : "Slider stroke settings."
            },
            "mouseOutOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ScrollBar",
              "!url" : "8.3.0/anychart.core.ui.ScrollBar#mouseOutOpacity",
              "!doc" : "The mouse out opacity"
            }
          }
        },
        "MarkersFactory" : {
          "!doc" : "Multiple markers class.",
          "!url" : "8.3.0/anychart.core.ui.MarkersFactory",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#anchor",
              "!doc" : "Anchor settings."
            },
            "position" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string|+anychart.graphics.vector.ColoredFill, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#fill",
              "!doc" : "Fill settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#rotation",
              "!doc" : "Rotation settings."
            },
            "positionFormatter" : {
              "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#positionFormatter",
              "!doc" : "Position formatter function."
            },
            "type" : {
              "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#type",
              "!doc" : "Type settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#offsetX",
              "!doc" : "Offset by X."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "size" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#size",
              "!doc" : "Markers size"
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.MarkersFactory",
              "!url" : "8.3.0/anychart.core.ui.MarkersFactory#offsetY",
              "!doc" : "Offset by Y."
            }
          },
          "Marker" : {
            "!doc" : "Marker of the markers factory. Use data to set settings for the custom marker.",
            "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker",
            "prototype" : {
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "anchor" : {
                "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#anchor",
                "!doc" : "Anchor for custom marker."
              },
              "position" : {
                "!type" : "fn(opt_value?: +anychart.enums.Position|string) -> +anychart.enums.Position|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#position",
                "!doc" : "Position for custom marker."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string|+anychart.graphics.vector.ColoredFill, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#stroke",
                "!doc" : "Stroke settings for custom marker."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#fill",
                "!doc" : "Fill settings for custom marker."
              },
              "rotation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#rotation",
                "!doc" : "Rotation settings for custom marker."
              },
              "positionFormatter" : {
                "!type" : "fn(opt_value?: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#positionFormatter",
                "!doc" : "Position formatter for custom marker."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#type",
                "!doc" : "Type for custom marker."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "offsetX" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#offsetX",
                "!doc" : "Offset by X for custom marker."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#size",
                "!doc" : "Size for custom marker."
              },
              "offsetY" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.MarkersFactory.Marker",
                "!url" : "8.3.0/anychart.core.ui.MarkersFactory.Marker#offsetY",
                "!doc" : "Offset by Y for custom marker."
              }
            }
          }
        },
        "Timeline" : {
          "!doc" : "Class for the Gantt chart timeline.",
          "!url" : "8.3.0/anychart.core.ui.Timeline",
          "prototype" : {
            "rangeMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttRange|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rangeMarker",
              "!doc" : "Range marker settings."
            },
            "columnStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string) -> string|+anychart.graphics.vector.Stroke|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#columnStroke",
              "!doc" : "Column stroke settings."
            },
            "verticalScrollBar" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ScrollBar|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#verticalScrollBar",
              "!doc" : "Vertical scroll bar settings."
            },
            "tasks" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.TasksElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#tasks",
              "!doc" : "Tasks settings."
            },
            "scale" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.scales.GanttDateTime|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#scale",
              "!doc" : "Scale settings."
            },
            "rowOddFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rowOddFill",
              "!doc" : "Row odd fill settings."
            },
            "lineMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttLine|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#lineMarker",
              "!doc" : "Line marker settings."
            },
            "horizontalScrollBar" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.ScrollBar|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#horizontalScrollBar",
              "!doc" : "Horizontal scroll bar settings."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#tooltip",
              "!doc" : "Tooltip settings."
            },
            "milestones" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.MilestonesElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#milestones",
              "!doc" : "Milestones settings."
            },
            "textMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool|+anychart.enums.GanttDateTimeMarkers|string) -> +anychart.core.axisMarkers.GanttText|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#textMarker",
              "!doc" : "Text marker settings."
            },
            "baselineBarHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baselineBarHeight",
              "!doc" : "Baseline bar height."
            },
            "connectors" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.ConnectorElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#connectors",
              "!doc" : "Connectors settings."
            },
            "backgroundFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#backgroundFill",
              "!doc" : "Background fill settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.LabelsFactory|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#labels",
              "!doc" : "Labels settings."
            },
            "baselineBarPosition" : {
              "!type" : "fn(opt_value?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baselineBarPosition",
              "!doc" : "Baseline bar position."
            },
            "edit" : {
              "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.StructureEdit|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#edit",
              "!doc" : "Live edit settings."
            },
            "baselineBarOffset" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baselineBarOffset",
              "!doc" : "Baseline bar offset."
            },
            "rowHoverFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rowHoverFill",
              "!doc" : "Row settings on hover fill."
            },
            "baselineBarAnchor" : {
              "!type" : "fn(opt_value?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baselineBarAnchor",
              "!doc" : "Baseline bar anchor."
            },
            "baseBarOffset" : {
              "!type" : "fn(opt_value?: string|number) -> +anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baseBarOffset",
              "!doc" : "Setter for the base bar offset."
            },
            "periods" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.PeriodsElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#periods",
              "!doc" : "Periods settings."
            },
            "groupingTasks" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.GroupingTasksElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#groupingTasks",
              "!doc" : "Grouping tasks settings."
            },
            "rowFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rowFill",
              "!doc" : "Row fill settings."
            },
            "rowEvenFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rowEvenFill",
              "!doc" : "Row even settings."
            },
            "rowSelectedFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_mode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#rowSelectedFill",
              "!doc" : "Row settings in selected mode."
            },
            "baselines" : {
              "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.elements.BaselinesElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#baselines",
              "!doc" : "Baselines settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.MarkersFactory|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#markers",
              "!doc" : "Markers settings."
            },
            "header" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.gantt.TimeLineHeader|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#header",
              "!doc" : "Timeline header settings."
            },
            "elements" : {
              "!type" : "fn(opt_setting?: Object) -> +anychart.core.gantt.elements.TimelineElement|+anychart.core.ui.Timeline",
              "!url" : "8.3.0/anychart.core.ui.Timeline#elements",
              "!doc" : "Elements settings."
            }
          }
        },
        "Legend" : {
          "!doc" : "Legend element.",
          "!url" : "8.3.0/anychart.core.ui.Legend",
          "prototype" : {
            "iconSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#iconSize",
              "!doc" : "Icon size."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#width",
              "!doc" : "Width settings."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#align",
              "!doc" : "Align settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "hoverCursor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Cursor|string) -> +anychart.enums.Cursor|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#hoverCursor",
              "!doc" : "Cursor settings in hover mode."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#height",
              "!doc" : "Height settings."
            },
            "margin" : {
              "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#margin",
              "!doc" : "Margin settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#tooltip",
              "!doc" : "Tooltip settings"
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "itemsSourceMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LegendItemsSourceMode|string) -> +anychart.enums.LegendItemsSourceMode|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#itemsSourceMode",
              "!doc" : "Items source mode."
            },
            "positionMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LegendPositionMode|string) -> +anychart.enums.LegendPositionMode|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#positionMode",
              "!doc" : "Position mode settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#padding",
              "!doc" : "Padding settings."
            },
            "titleFormat" : {
              "!type" : "fn(opt_value?: string|fn()) -> string|fn()|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#titleFormat",
              "!doc" : "Title format function."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#maxHeight",
              "!doc" : "Maximum height."
            },
            "inverted" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#inverted",
              "!doc" : "Inverted settings."
            },
            "paginator" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Paginator|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#paginator",
              "!doc" : "Paginator settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.Legend#getRemainingBounds",
              "!doc" : "Getter for remain bounds after legend."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "itemsLayout" : {
              "!type" : "fn(opt_value?: +anychart.enums.LegendLayout|string) -> +anychart.enums.LegendLayout|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#itemsLayout",
              "!doc" : "Items layout settings."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#drag",
              "!doc" : "Enable/disable drag for a legend."
            },
            "itemsFormat" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#itemsFormat",
              "!doc" : "Items text formatter."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "items" : {
              "!type" : "fn(opt_value?: [+anychart.core.ui.Legend.LegendItemProvider]) -> [+anychart.core.ui.Legend.LegendItemProvider]|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#items",
              "!doc" : "Custom items."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "titleSeparator" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Separator|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#titleSeparator",
              "!doc" : "Title separator settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "iconTextSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#iconTextSpacing",
              "!doc" : "Spacing between icon and text."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#title",
              "!doc" : "Title settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "itemsSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#itemsSpacing",
              "!doc" : "Items spacing settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.Legend#getPixelBounds",
              "!doc" : "Returns pixel bounds of the legend."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#maxWidth",
              "!doc" : "Maximum width."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "itemsFormatter" : {
              "!type" : "fn(opt_formatterFunction?: function(items:[+anychart.core.ui.Legend.LegendItemProvider])) -> fn()|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#itemsFormatter",
              "!doc" : "Items formatter."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.ui.Legend#background",
              "!doc" : "Background settings."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Legend",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          },
          "LegendItemProvider" : {
            "!doc" : "Type definition for legend item provider.",
            "!url" : "8.3.0/anychart.core.ui.Legend.LegendItemProvider",
            "prototype" : {
              "iconMarkerType" : {
                "!type" : "string",
                "!doc" : "Marker of icon"
              },
              "index" : {
                "!type" : "number",
                "!doc" : "Index of item"
              },
              "iconStroke" : {
                "!type" : "+anychart.graphics.vector.Stroke",
                "!doc" : "Stroke for icon"
              },
              "iconMarkerStroke" : {
                "!type" : "+anychart.graphics.vector.Stroke",
                "!doc" : "Stroke for icon marker."
              },
              "text" : {
                "!type" : "string",
                "!doc" : "Text for item"
              },
              "iconEnabled" : {
                "!type" : "bool",
                "!doc" : "Enable/Disable icon."
              },
              "iconTextSpacing" : {
                "!type" : "number",
                "!doc" : "Text spacing for an icon."
              },
              "iconHatchFill" : {
                "!type" : "+anychart.graphics.vector.HatchFill.HatchFillType|+anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill",
                "!doc" : "Hatch fill for icon"
              },
              "meta" : {
                "!type" : "Object",
                "!doc" : "Meta for icon"
              },
              "iconMarkerFill" : {
                "!type" : "+anychart.graphics.vector.Fill",
                "!doc" : "Fill for icon marker."
              },
              "disabled" : {
                "!type" : "bool",
                "!doc" : "Disable/enable item."
              },
              "iconType" : {
                "!type" : "string",
                "!doc" : "Type for icon"
              },
              "iconFill" : {
                "!type" : "+anychart.graphics.vector.Fill",
                "!doc" : "Fill color"
              }
            }
          }
        },
        "Scroller" : {
          "!doc" : "Scroller ui element",
          "!url" : "8.3.0/anychart.core.ui.Scroller",
          "prototype" : {
            "allowRangeChange" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#allowRangeChange",
              "!doc" : "Mode of the range changing."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#minHeight",
              "!doc" : "Scroller minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#height",
              "!doc" : "Scroller height."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "selectedFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#selectedFill",
              "!doc" : "Select fill settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#maxHeight",
              "!doc" : "Scroller maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "outlineStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#outlineStroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#fill",
              "!doc" : "Fill settings."
            },
            "autoHide" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#autoHide",
              "!doc" : "Auto hide setting."
            },
            "thumbs" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Scroller.Thumbs|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#thumbs",
              "!doc" : "Thumbs settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#orientation",
              "!doc" : "Scroller orientation."
            }
          },
          "Thumbs" : {
            "!doc" : "Thumbs settings. Doesn't draw anything, just contains settings and notifies the scroller about their change.",
            "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs",
            "prototype" : {
              "autoHide" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#autoHide",
                "!doc" : "Auto hide"
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#enabled",
                "!doc" : "Thumbs state (enabled or disabled)."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#fill",
                "!doc" : "Fill settings."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#hovered",
                "!doc" : "Hovered state settings."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#normal",
                "!doc" : "Normal state settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Scroller.Thumbs",
                "!url" : "8.3.0/anychart.core.ui.Scroller.Thumbs#stroke",
                "!doc" : "Stroke settings."
              }
            }
          }
        },
        "!url" : "8.3.0/anychart.core.ui",
        "LabelsFactory" : {
          "!doc" : "Class for creation of sets of similar labels and management of such sets.",
          "!url" : "8.3.0/anychart.core.ui.LabelsFactory",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#maxFontSize",
              "!doc" : "Maximum font size setting."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#width",
              "!doc" : "Width settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "getLabelsCount" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#getLabelsCount",
              "!doc" : "Gets labels count."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#anchor",
              "!doc" : "Anchor settings."
            },
            "position" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#minFontSize",
              "!doc" : "Minimum font size setting."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#rotation",
              "!doc" : "Rotation settings."
            },
            "getLabel" : {
              "!type" : "fn(index: number) -> +anychart.core.ui.LabelsFactory.Label",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#getLabel",
              "!doc" : "Returns label by index."
            },
            "positionFormatter" : {
              "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#positionFormatter",
              "!doc" : "Position formatter function."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetX",
              "!doc" : "Offset by X."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetY",
              "!doc" : "Offset by Y."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "format" : {
              "!type" : "fn(opt_value?: string|fn()) -> fn()|string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#format",
              "!doc" : "Text formatter function."
            },
            "connectorStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: +anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#connectorStroke",
              "!doc" : "Stroke settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_value?: bool|Object|[bool], opt_adjustByHeight?: bool) -> Object|+anychart.core.ui.LabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#adjustFontSize",
              "!doc" : "Adjusting settings."
            }
          },
          "Label" : {
            "!doc" : "Class for a creation of sets of similar labels and management of such sets.",
            "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#maxFontSize",
                "!doc" : "Maximum font size settings."
              },
              "measureWithText" : {
                "!type" : "fn(text: string) -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#measureWithText",
                "!doc" : "Measures the text with the current labels settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#width",
                "!doc" : "Width settings."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontDecoration",
                "!doc" : "Font decoration settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#getIndex",
                "!doc" : "Returns label index."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontStyle",
                "!doc" : "Font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#lineHeight",
                "!doc" : "Text line height settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "padding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#padding",
                "!doc" : "Padding settings."
              },
              "textSettings" : {
                "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textSettings",
                "!doc" : "Text settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "anchor" : {
                "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#anchor",
                "!doc" : "Anchor settings."
              },
              "position" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#position",
                "!doc" : "Position settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontVariant",
                "!doc" : "Font variant settings."
              },
              "minFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#minFontSize",
                "!doc" : "Minimum font size settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontSize",
                "!doc" : "Font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
                "!doc" : "Pointer events settings."
              },
              "rotation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#rotation",
                "!doc" : "Rotation settings."
              },
              "positionFormatter" : {
                "!type" : "fn(opt_value?: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#positionFormatter",
                "!doc" : "Position formatter."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "offsetX" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#offsetX",
                "!doc" : "Offset by X."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#wordBreak",
                "!doc" : "Word break mode."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textDirection",
                "!doc" : "Text direction settings."
              },
              "background" : {
                "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#background",
                "!doc" : "Background settings."
              },
              "offsetY" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#offsetY",
                "!doc" : "Offset by Y."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textIndent",
                "!doc" : "Text indent settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontColor",
                "!doc" : "Font color settings."
              },
              "adjustFontSize" : {
                "!type" : "fn(opt_value?: bool|Object|[bool], opt_adjustByHeight?: bool) -> Object|+anychart.core.ui.LabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#adjustFontSize",
                "!doc" : "Adjusting settings."
              }
            }
          }
        },
        "Separator" : {
          "!doc" : "Class for a separator element.",
          "!url" : "8.3.0/anychart.core.ui.Separator",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.ui.Separator#width",
              "!doc" : "Width settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.ui.Separator#height",
              "!doc" : "Height settings."
            },
            "margin" : {
              "!type" : "fn(opt_spaceOrTopOrTopAndBottom?: string|number|[number|string]|Object, opt_rightOrRightAndLeft?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Margin|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.ui.Separator#margin",
              "!doc" : "Getter for the margin of the separator."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.Separator#getRemainingBounds",
              "!doc" : "Remaining bounds."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_strokeOrFill?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.Separator|+anychart.graphics.vector.Stroke",
              "!url" : "8.3.0/anychart.core.ui.Separator#stroke",
              "!doc" : "Separator stroke."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.ui.Separator#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.Separator",
              "!url" : "8.3.0/anychart.core.ui.Separator#orientation",
              "!doc" : "Getter fo the orientation of the separator."
            }
          }
        },
        "StageCredits" : {
          "!doc" : "Define class Credits.",
          "!url" : "8.3.0/anychart.core.ui.StageCredits",
          "prototype" : {
            "alt" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#alt",
              "!doc" : "Alternative text for credits."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#enabled",
              "!doc" : "Credits state (enabled or disabled)."
            },
            "imgAlt" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#imgAlt",
              "!doc" : "Image alternative text."
            },
            "logoSrc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#logoSrc",
              "!doc" : "Logo source for credits."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#text",
              "!doc" : "Text for credits."
            },
            "url" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.StageCredits",
              "!url" : "8.3.0/anychart.core.ui.StageCredits#url",
              "!doc" : "Url address for credits."
            }
          }
        },
        "ChartCredits" : {
          "!doc" : "Define class Credits.",
          "!url" : "8.3.0/anychart.core.ui.ChartCredits",
          "prototype" : {
            "url" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#url",
              "!doc" : "Url for credits."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#enabled",
              "!doc" : "Credits state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "alt" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#alt",
              "!doc" : "Alternative text for credits."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#text",
              "!doc" : "Text for credits."
            },
            "logoSrc" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#logoSrc",
              "!doc" : "Logo source for credits."
            },
            "imgAlt" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.ChartCredits",
              "!url" : "8.3.0/anychart.core.ui.ChartCredits#imgAlt",
              "!doc" : "Image alternative text."
            }
          }
        },
        "CircularLabelsFactory" : {
          "!doc" : "Class for creation of sets of similar labels and management of such sets.",
          "!url" : "8.3.0/anychart.core.ui.CircularLabelsFactory",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#maxFontSize",
              "!doc" : "Maximum font size setting."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#width",
              "!doc" : "Width settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "autoRotate" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.CircularLabelsFactory#autoRotate",
              "!doc" : "Labels rotation."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#anchor",
              "!doc" : "Anchor settings."
            },
            "position" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#minFontSize",
              "!doc" : "Minimum font size setting."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#rotation",
              "!doc" : "Rotation settings."
            },
            "positionFormatter" : {
              "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#positionFormatter",
              "!doc" : "Position formatter function."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetX",
              "!doc" : "Offset by X."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#offsetY",
              "!doc" : "Offset by Y."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_value?: bool|Object|[bool], opt_adjustByHeight?: bool) -> Object|+anychart.core.ui.CircularLabelsFactory",
              "!url" : "8.3.0/anychart.core.ui.LabelsFactory#adjustFontSize",
              "!doc" : "Adjusting settings."
            }
          },
          "Label" : {
            "!doc" : "Class for creation of sets of similar labels and management of such sets.",
            "!url" : "8.3.0/anychart.core.ui.CircularLabelsFactory.Label",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#maxFontSize",
                "!doc" : "Maximum font size settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#width",
                "!doc" : "Width settings."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontDecoration",
                "!doc" : "Font decoration settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#getIndex",
                "!doc" : "Returns label index."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontStyle",
                "!doc" : "Font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#lineHeight",
                "!doc" : "Text line height settings."
              },
              "autoRotate" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.CircularLabelsFactory.Label#autoRotate",
                "!doc" : "Label rotation."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "padding" : {
                "!type" : "fn(opt_value?: [number|string]|Object|number|string, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#padding",
                "!doc" : "Padding settings."
              },
              "textSettings" : {
                "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textSettings",
                "!doc" : "Text settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "anchor" : {
                "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#anchor",
                "!doc" : "Anchor settings."
              },
              "position" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#position",
                "!doc" : "Position settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontVariant",
                "!doc" : "Font variant settings."
              },
              "minFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#minFontSize",
                "!doc" : "Minimum font size settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontSize",
                "!doc" : "Font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
                "!doc" : "Pointer events settings."
              },
              "rotation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#rotation",
                "!doc" : "Rotation settings."
              },
              "positionFormatter" : {
                "!type" : "fn(opt_value?: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#positionFormatter",
                "!doc" : "Position formatter."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "offsetX" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#offsetX",
                "!doc" : "Offset by X."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#wordBreak",
                "!doc" : "Word break mode."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textDirection",
                "!doc" : "Text direction settings."
              },
              "background" : {
                "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#background",
                "!doc" : "Background settings."
              },
              "offsetY" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#offsetY",
                "!doc" : "Offset by Y."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#textIndent",
                "!doc" : "Text indent settings."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.Text#fontColor",
                "!doc" : "Font color settings."
              },
              "adjustFontSize" : {
                "!type" : "fn(opt_value?: bool|Object|[bool], opt_adjustByHeight?: bool) -> Object|+anychart.core.ui.CircularLabelsFactory.Label",
                "!url" : "8.3.0/anychart.core.ui.LabelsFactory.Label#adjustFontSize",
                "!doc" : "Adjusting settings."
              }
            }
          }
        },
        "CrosshairLabel" : {
          "!doc" : "The CrosshairLabel class contains methods for configuring the label of the crosshair.",
          "!url" : "8.3.0/anychart.core.ui.CrosshairLabel",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#maxFontSize",
              "!doc" : "Maximum font size setting."
            },
            "axisIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#axisIndex",
              "!doc" : "Axis index."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#width",
              "!doc" : "Width settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#anchor",
              "!doc" : "Anchor settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#minFontSize",
              "!doc" : "Minimum font size setting."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#offsetX",
              "!doc" : "Offset by X."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#offsetY",
              "!doc" : "Offset by Y."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "format" : {
              "!type" : "fn(opt_value?: string|fn()) -> fn()|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#format",
              "!doc" : "Text formatter function."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_bothOrByWidth?: Object|[bool]|bool, opt_byHeight?: bool) -> Object|+anychart.core.ui.CrosshairLabel",
              "!url" : "8.3.0/anychart.core.ui.CrosshairLabel#adjustFontSize",
              "!doc" : "Adjust font settings."
            }
          }
        },
        "Label" : {
          "!doc" : "Label element class.",
          "!url" : "8.3.0/anychart.core.ui.Label",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#maxFontSize",
              "!doc" : "Maximum font size settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#width",
              "!doc" : "Width settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#anchor",
              "!doc" : "Anchor settings."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.Position|string) -> +anychart.enums.Position|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#position",
              "!doc" : "Position settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#minFontSize",
              "!doc" : "Minimum font size settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#text",
              "!doc" : "Label text."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#rotation",
              "!doc" : "Rotation settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#offsetX",
              "!doc" : "Offset by X."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#background",
              "!doc" : "Background settings"
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#offsetY",
              "!doc" : "Offset by Y."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_bothOrByWidth?: Object|[bool]|bool, opt_byHeight?: bool) -> Object|+anychart.core.ui.Label",
              "!url" : "8.3.0/anychart.core.ui.Label#adjustFontSize",
              "!doc" : "Adjusting settings."
            }
          }
        },
        "ChartScroller" : {
          "!doc" : "Chart scroller class that also exposes position method that is used by chart.",
          "!url" : "8.3.0/anychart.core.ui.ChartScroller",
          "prototype" : {
            "allowRangeChange" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#allowRangeChange",
              "!doc" : "Mode of the range changing."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#minHeight",
              "!doc" : "Scroller minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#height",
              "!doc" : "Scroller height."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "selectedFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#selectedFill",
              "!doc" : "Select fill settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#maxHeight",
              "!doc" : "Scroller maximum height."
            },
            "inverted" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.ChartScroller#inverted",
              "!doc" : "Inverted settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.ChartScrollerPosition|string) -> +anychart.enums.ChartScrollerPosition|string|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.ChartScroller#position",
              "!doc" : "Scroller position."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "outlineStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#outlineStroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#fill",
              "!doc" : "Fill settings."
            },
            "autoHide" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#autoHide",
              "!doc" : "Auto hide setting."
            },
            "thumbs" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Scroller.Thumbs|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#thumbs",
              "!doc" : "Thumbs settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.ChartScroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#orientation",
              "!doc" : "Scroller orientation."
            }
          }
        },
        "LegendItem" : {
          "!doc" : "Inner class for representing legend item.",
          "!url" : "8.3.0/anychart.core.ui.LegendItem",
          "prototype" : {
            "getWidth" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#getWidth",
              "!doc" : "Calculating actual width of legend item independently of enabled state."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "iconStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#iconStroke",
              "!doc" : "Getter/setter for icon stroke setting."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "getTextElement" : {
              "!type" : "fn() -> +anychart.graphics.vector.Text",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#getTextElement",
              "!doc" : "Legend item text element."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "x" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#x",
              "!doc" : "Getter/setter for X coordinate of legend item."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#maxHeight",
              "!doc" : "Legend item maximum width."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#text",
              "!doc" : "Getter/setter for legend item text."
            },
            "iconTextSpacing" : {
              "!type" : "fn(opt_value?: number) -> +anychart.core.ui.LegendItem|number",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#iconTextSpacing",
              "!doc" : "Getter/setter for iconTextSpacing setting."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "iconHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#iconHatchFill",
              "!doc" : "Hatch fill settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "getHeight" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#getHeight",
              "!doc" : "Calculating actual height of legend item independently of enabled state."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "y" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/a#ychart.core.ui.LegendItem#y",
              "!doc" : "Getter/setter for Y coordinate of legend item."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#draw",
              "!doc" : "Draws legend item."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#maxWidth",
              "!doc" : "Legend item maximum width."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "iconType" : {
              "!type" : "fn(opt_value?: string|fn()) -> string|fn()|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#iconType",
              "!doc" : "Getter/setter for icon type."
            },
            "iconFill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill) -> +anychart.graphics.vector.Fill|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#iconFill",
              "!doc" : "Getter/setter for icon fill setting."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "getContentBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.ui.LegendItem#getContentBounds",
              "!doc" : "Return legend item content bounds."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.LegendItem",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "Paginator" : {
          "!doc" : "Paginator base class.",
          "!url" : "8.3.0/anychart.core.ui.Paginator",
          "prototype" : {
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "margin" : {
              "!type" : "fn(opt_spaceOrTopOrTopAndBottom?: string|number|[number|string]|Object, opt_rightOrRightAndLeft?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Margin|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.ui.Paginator#margin",
              "!doc" : "Getter for the paginator margin."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_spaceOrTopOrTopAndBottom?: string|number|[number|string]|Object, opt_rightOrRightAndLeft?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.ui.Paginator#padding",
              "!doc" : "Getter for the paginator padding."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.ui.Paginator#layout",
              "!doc" : "Layout settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "currentPage" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.ui.Paginator#currentPage",
              "!doc" : "Active page."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Paginator|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Paginator#background",
              "!doc" : "Paginator background."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.core.ui.Paginator|+anychart.enums.Orientation|string",
              "!url" : "8.3.0/anychart.core.ui.Paginator#orientation",
              "!doc" : "Orientation of the paginator."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Paginator",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "Callout" : {
          "!doc" : "Callout class.",
          "!url" : "8.3.0/anychart.core.ui.Callout",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#selected",
              "!doc" : "Selected state settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#width",
              "!doc" : "Width settings."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#align",
              "!doc" : "Align settings."
            },
            "margin" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#margin",
              "!doc" : "Margin settings."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#padding",
              "!doc" : "Padding settings."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#normal",
              "!doc" : "Normal state settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#labels",
              "!doc" : "Callout labels settings"
            },
            "items" : {
              "!type" : "fn(opt_value?: [string]) -> [string]|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#items",
              "!doc" : "Items settings."
            },
            "length" : {
              "!type" : "fn(opt_value?: string|number) -> number|string|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#length",
              "!doc" : "Length settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#title",
              "!doc" : "Title settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#background",
              "!doc" : "Background settings."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.Callout",
              "!url" : "8.3.0/anychart.core.ui.Callout#orientation",
              "!doc" : "Orientation settings."
            }
          }
        },
        "Crosshair" : {
          "!doc" : "Crosshair class.",
          "!url" : "8.3.0/anychart.core.ui.Crosshair",
          "prototype" : {
            "displayMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.CrosshairDisplayMode|string) -> +anychart.enums.CrosshairDisplayMode|string|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.ui.Crosshair#displayMode",
              "!doc" : "Display mode."
            },
            "yStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.ui.Crosshair#yStroke",
              "!doc" : "Y-line stroke settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "xLabel" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.ui.CrosshairLabel|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.ui.Crosshair#xLabel",
              "!doc" : "X-label settings"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "xStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.ui.Crosshair#xStroke",
              "!doc" : "X-line stroke settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "yLabel" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.ui.CrosshairLabel|+anychart.core.ui.Crosshair",
              "!url" : "8.3.0/anychart.core.ui.Crosshair#yLabel",
              "!doc" : "Y-label settings"
            }
          }
        },
        "ColorRange" : {
          "!doc" : "Color range.",
          "!url" : "8.3.0/anychart.core.ui.ColorRange",
          "prototype" : {
            "colorLineSize" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.ui.ColorRange#colorLineSize",
              "!doc" : "Color line size."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#width",
              "!doc" : "Axis width."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.ui.ColorRange#align",
              "!doc" : "Align setting."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.ui.ColorRange#padding",
              "!doc" : "Padding settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "staggerMaxLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMaxLines",
              "!doc" : "Maximum stagger lines."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "length" : {
              "!type" : "fn(opt_value?: string|number) -> number|string|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.ui.ColorRange#length",
              "!doc" : "Length setting."
            },
            "staggerMode" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMode",
              "!doc" : "Stagger mode state."
            },
            "staggerLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerLines",
              "!doc" : "Stagger lines."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#title",
              "!doc" : "Title settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "marker" : {
              "!type" : "fn(opt_value?: +anychart.core.ui.MarkersFactory.Marker|Object) -> +anychart.core.ui.MarkersFactory.Marker|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.ui.ColorRange#marker",
              "!doc" : "Marker settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axes.Linear#isHorizontal",
              "!doc" : "Whether an axis is horizontal."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.ui.ColorRange",
              "!url" : "8.3.0/anychart.core.axes.Linear#orientation",
              "!doc" : "Axis orientation."
            }
          }
        },
        "Table" : {
          "!doc" : "Declares table element.",
          "!url" : "8.3.0/anychart.core.ui.Table",
          "prototype" : {
            "getCell" : {
              "!type" : "fn(row: number, col: number) -> +anychart.core.ui.table.Cell",
              "!url" : "8.3.0/anychart.core.ui.Table#getCell",
              "!doc" : "Returns cell by its row and column number."
            },
            "getPngBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number)",
              "!url" : "8.3.0/anychart.core.ui.Table#getPngBase64String",
              "!doc" : "Returns PNG as base64 string."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "colsCount" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#colsCount",
              "!doc" : "Columns count."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "getJpgBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
              "!url" : "8.3.0/anychart.core.ui.Table#getJpgBase64String",
              "!doc" : "Returns JPG as base64 string."
            },
            "colsMaxWidth" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#colsMaxWidth",
              "!doc" : "Column maximum width."
            },
            "shareAsPng" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.core.ui.Table#shareAsPng",
              "!doc" : "Shares a table as a PNG file and returns a link to the shared image."
            },
            "rowOddFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowOddFill",
              "!doc" : "Row odd fill settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#vAlign",
              "!doc" : "Vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontFamily",
              "!doc" : "Font family settings."
            },
            "getPdfBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number)",
              "!url" : "8.3.0/anychart.core.ui.Table#getPdfBase64String",
              "!doc" : "Returns PDF as base64 string."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#lineHeight",
              "!doc" : "Line height settings."
            },
            "saveAsPng" : {
              "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number)",
              "!url" : "8.3.0/anychart.core.ui.Table#saveAsPng",
              "!doc" : "Saves into PNG file."
            },
            "border" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#border",
              "!doc" : "Border settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "saveAsPdf" : {
              "!type" : "fn(opt_paperSize?: string, opt_landscape?: bool, opt_x?: number, opt_y?: number)",
              "!url" : "8.3.0/anychart.core.ui.Table#saveAsPdf",
              "!doc" : "Saves into PDF file."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#letterSpacing",
              "!doc" : "Letter spacing settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "cellPadding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.ui.table.Padding|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#cellPadding",
              "!doc" : "Cell padding settings."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "saveAsSvg" : {
              "!type" : "fn(opt_value?: string|number, opt_value?: bool|number)",
              "!url" : "8.3.0/anychart.core.ui.Table#saveAsSvg",
              "!doc" : "Saves into SVG file."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontVariant",
              "!doc" : "Font variant settings."
            },
            "rowsMaxHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowsMaxHeight",
              "!doc" : "Rows maximum height."
            },
            "cellBorder" : {
              "!type" : "fn(opt_strokeOrFill?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.core.ui.table.Border|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#cellBorder",
              "!doc" : "Cell border settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "rowsMinHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowsMinHeight",
              "!doc" : "Rows minimum height."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#hAlign",
              "!doc" : "Horizontal align settings."
            },
            "contents" : {
              "!type" : "fn(opt_tableValues?: [[+anychart.core.VisualBase|string|number]], opt_demergeCells?: bool) -> [[+anychart.core.VisualBase]]|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#contents",
              "!doc" : "Table content."
            },
            "saveAsJpg" : {
              "!type" : "fn(opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
              "!url" : "8.3.0/anychart.core.ui.Table#saveAsJpg",
              "!doc" : "Saves into JPEG file."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#disablePointerEvents",
              "!doc" : "Disable pointer events settings."
            },
            "rowsHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowsHeight",
              "!doc" : "Row height."
            },
            "shareAsJpg" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
              "!url" : "8.3.0/anychart.core.ui.Table#shareAsJpg",
              "!doc" : "Shares a table as a JPG file and returns a link to the shared image."
            },
            "getRow" : {
              "!type" : "fn(row: number) -> +anychart.core.ui.table.Row",
              "!url" : "8.3.0/anychart.core.ui.Table#getRow",
              "!doc" : "Returns row instance by its number."
            },
            "getCol" : {
              "!type" : "fn(col: number) -> +anychart.core.ui.table.Column",
              "!url" : "8.3.0/anychart.core.ui.Table#getCol",
              "!doc" : "Returns column instance by its number."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "cellFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#cellFill",
              "!doc" : "Cell fill settings."
            },
            "draw" : {
              "!type" : "fn() -> +anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#draw",
              "!doc" : "Draws the table."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#wordBreak",
              "!doc" : "Word break mode."
            },
            "rowsCount" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowsCount",
              "!doc" : "Rows count."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "shareAsPdf" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
              "!url" : "8.3.0/anychart.core.ui.Table#shareAsPdf",
              "!doc" : "Shares a table as a PDF file and returns a link to the shared image."
            },
            "shareAsSvg" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string, opt_filename?: string)",
              "!url" : "8.3.0/anychart.core.ui.Table#shareAsSvg",
              "!doc" : "Shares a table as a SVG file and returns a link to the shared image."
            },
            "rowEvenFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#rowEvenFill",
              "!doc" : "Row even fill settings."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#textDirection",
              "!doc" : "Letter direction settings."
            },
            "getSvgBase64String" : {
              "!type" : "fn(onSuccess: fn(), opt_onError?: fn(), opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
              "!url" : "8.3.0/anychart.core.ui.Table#getSvgBase64String",
              "!doc" : "Returns SVG as base64 string."
            },
            "toSvg" : {
              "!type" : "fn(opt_value?: string|number, opt_value?: bool|number) -> string",
              "!url" : "8.3.0/anychart.core.ui.Table#toSvg",
              "!doc" : "Returns SVG string."
            },
            "colsMinWidth" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#colsMinWidth",
              "!doc" : "Column minimum width."
            },
            "colsWidth" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#colsWidth",
              "!doc" : "Column width."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#textIndent",
              "!doc" : "Text indent settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.ui.Table",
              "!url" : "8.3.0/anychart.core.ui.Table#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "Background" : {
          "!doc" : "Background element class.",
          "!url" : "8.3.0/anychart.core.ui.Background",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "cornerType" : {
              "!type" : "fn(opt_value?: +anychart.enums.BackgroundCornersType|string) -> +anychart.enums.BackgroundCornersType|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#cornerType",
              "!doc" : "Corner type."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "corners" : {
              "!type" : "fn(opt_value?: number|string|[number], opt_topRight?: number|string, opt_bottomRight?: number|string, opt_bottomLeft?: number|string) -> [number]|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#corners",
              "!doc" : "Corner radius."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#fill",
              "!doc" : "Fill settings."
            },
            "rightStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#rightStroke",
              "!doc" : "Right stroke settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "leftStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#leftStroke",
              "!doc" : "Left stroke settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "bottomStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#bottomStroke",
              "!doc" : "Bottom stroke settings."
            },
            "topStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.ui.Background#topStroke",
              "!doc" : "Top stroke settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.ui.Background",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          }
        }
      },
      "PiePoint" : {
        "!doc" : "Point representing pie point.",
        "!url" : "8.3.0/anychart.core.PiePoint",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.PiePoint",
            "!url" : "8.3.0/anychart.core.PiePoint#selected",
            "!doc" : "Select point state."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "getStartAngle" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.PiePoint#getStartAngle",
            "!doc" : "Gets start angle of the point."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.PiePoint",
            "!url" : "8.3.0/anychart.core.Point#hovered",
            "!doc" : "Hover point state."
          },
          "getEndAngle" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.PiePoint#getEndAngle",
            "!doc" : "Gets end angle of the point."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.PiePoint",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          },
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Point#exists",
            "!doc" : "Checks the existence of the current point (by index) in dataset."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          }
        }
      },
      "!doc" : "The anychart.core namespace contains fundamental classes and base classes.",
      "stock" : {
        "eventMarkers" : {
          "Group" : {
            "!doc" : "Event markers group class.",
            "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#maxFontSize",
                "!doc" : "Maximum font size settings."
              },
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#width",
                "!doc" : "Markers width in pixels or percentages."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontDecoration",
                "!doc" : "Font decoration setting."
              },
              "height" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#height",
                "!doc" : "Markers height in pixels or percentages."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.VAlign) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontStyle",
                "!doc" : "Font style settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.stock.eventMarkers.Group|+anychart.charts.Pie",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#tooltip",
                "!doc" : "Tooltip settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#useHtml",
                "!doc" : "Use HTML option."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#lineHeight",
                "!doc" : "Text line height setting."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "seriesId" : {
                "!type" : "fn(value: string) -> string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#seriesId",
                "!doc" : "Series id."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#hovered",
                "!doc" : "Hovered state settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "fieldName" : {
                "!type" : "fn(value: string) -> string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fieldName",
                "!doc" : "Field name."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#normal",
                "!doc" : "Normal state settings."
              },
              "position" : {
                "!type" : "fn(opt_value?: +anychart.enums.EventMarkerPosition|string) -> +anychart.enums.EventMarkerPosition|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#position",
                "!doc" : "Position settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#stroke",
                "!doc" : "Stroke settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontVariant",
                "!doc" : "Font variant settings."
              },
              "minFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#minFontSize",
                "!doc" : "Minimum font size settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "getMarker" : {
                "!type" : "fn(index: number) -> +anychart.format.Context",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#getMarker",
                "!doc" : "Gets group marker by index."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "direction" : {
                "!type" : "fn(opt_value?: +anychart.enums.EventMarkerDirection|string) -> +anychart.enums.EventMarkerDirection|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#direction",
                "!doc" : "Direction settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fill",
                "!doc" : "Fill settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontSize",
                "!doc" : "Font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#disablePointerEvents",
                "!doc" : "Pointer events settings."
              },
              "type" : {
                "!type" : "fn(value: string|+anychart.enums.EventMarkerType) -> +anychart.enums.EventMarkerType|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#type",
                "!doc" : "Marker type settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#wordBreak",
                "!doc" : "Word break mode."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "fontPadding" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontPadding",
                "!doc" : "Font padding settings."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.Direction) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#textDirection",
                "!doc" : "Text direction settings."
              },
              "connector" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Connector|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#connector",
                "!doc" : "Connector settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +Object|+anychart.core.stock.eventMarkers.Group.DataFormat) -> [Object]|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#data",
                "!doc" : "Data settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#textIndent",
                "!doc" : "Text indent settings."
              },
              "format" : {
                "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#format",
                "!doc" : "Function to format content text."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#fontColor",
                "!doc" : "Font color settings."
              },
              "adjustFontSize" : {
                "!type" : "fn(opt_adjustOrAdjustByWidth?: bool|[bool]|Object, opt_adjustByHeight?: bool) -> number|+anychart.core.stock.eventMarkers.Group",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group#adjustFontSize",
                "!doc" : "Adjusting settings."
              }
            },
            "DataFormat" : {
              "!doc" : "Type definition for the data format.",
              "!url" : "8.3.0/anychart.core.stock.eventMarkers.Group.DataFormat",
              "prototype" : {
                "baseDate" : {
                  "!type" : "number|Date",
                  "!doc" : "Base date for the key column."
                },
                "data" : {
                  "!type" : "[number|Date|{date: (number|Date)}]",
                  "!doc" : "Data for event markers."
                },
                "dateTimePattern" : {
                  "!type" : "string",
                  "!doc" : "Key column parsing pattern."
                },
                "locale" : {
                  "!type" : "string|+anychart.format.Locale",
                  "!doc" : "Locale to be used."
                },
                "timeOffset" : {
                  "!type" : "number",
                  "!doc" : "Shifts all input dates timeOffset hours forward. Defaults to zero."
                }
              }
            }
          },
          "Controller" : {
            "!doc" : "Chart event markers controller.",
            "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#maxFontSize",
                "!doc" : "Maximum font size settings."
              },
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#width",
                "!doc" : "Markers width in pixels or percentages."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontDecoration",
                "!doc" : "Font decoration setting."
              },
              "height" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#height",
                "!doc" : "Markers height in pixels or percentages."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "group" : {
                "!type" : "fn(opt_value?: number|Object|+Array|bool, opt_value?: Object|+Array|bool) -> +anychart.core.stock.eventMarkers.Group|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#group",
                "!doc" : "Group settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.VAlign) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontStyle",
                "!doc" : "Font style settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#tooltip",
                "!doc" : "Tooltip settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#useHtml",
                "!doc" : "Use HTML option."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#lineHeight",
                "!doc" : "Text line height setting."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "seriesId" : {
                "!type" : "fn(value: string) -> string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#seriesId",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#hovered",
                "!doc" : "Hovered state settings."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "fieldName" : {
                "!type" : "fn(value: string) -> string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fieldName",
                "!doc" : "Field name."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#normal",
                "!doc" : "Normal state settings."
              },
              "position" : {
                "!type" : "fn(opt_value?: +anychart.enums.EventMarkerPosition|string) -> +anychart.enums.EventMarkerPosition|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#position",
                "!doc" : "Position settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#stroke",
                "!doc" : "Stroke settings."
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontVariant",
                "!doc" : "Font variant settings."
              },
              "minFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#minFontSize",
                "!doc" : "Minimum font size settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "direction" : {
                "!type" : "fn(opt_value?: +anychart.enums.EventMarkerDirection|string) -> +anychart.enums.EventMarkerDirection|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#direction",
                "!doc" : "Direction settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fill",
                "!doc" : "Fill settings."
              },
              "fontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontSize",
                "!doc" : "Font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#disablePointerEvents",
                "!doc" : "Pointer events settings."
              },
              "type" : {
                "!type" : "fn(value: string|+anychart.enums.EventMarkerType) -> +anychart.enums.EventMarkerType|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#type",
                "!doc" : "Marker type settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#wordBreak",
                "!doc" : "Word break mode."
              },
              "fontPadding" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontPadding",
                "!doc" : "Font padding settings."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.Direction) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#textDirection",
                "!doc" : "Text direction settings."
              },
              "connector" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Connector|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#connector",
                "!doc" : "Connector settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#data",
                "!doc" : "Data settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#textIndent",
                "!doc" : "Text indent settings."
              },
              "format" : {
                "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#format",
                "!doc" : "Function to format content text."
              },
              "fontColor" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#fontColor",
                "!doc" : "Font color settings."
              },
              "adjustFontSize" : {
                "!type" : "fn(opt_adjustOrAdjustByWidth?: bool|[bool]|Object, opt_adjustByHeight?: bool) -> number|+anychart.core.stock.eventMarkers.Controller",
                "!url" : "8.3.0/anychart.core.stock.eventMarkers.Controller#adjustFontSize",
                "!doc" : "Adjusting settings."
              }
            }
          },
          "!doc" : "The anychart.core.stock.eventMarkers namespace contains eventMarkers classes.",
          "!url" : "8.3.0/anychart.core.stock.eventMarkers"
        },
        "indicators" : {
          "Aroon" : {
            "!doc" : "Aroon indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.Aroon",
            "prototype" : {
              "downSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Aroon",
                "!url" : "8.3.0/anychart.core.stock.indicators.Aroon#downSeries",
                "!doc" : "Indicator series instance."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.Aroon",
                "!url" : "8.3.0/anychart.core.stock.indicators.Aroon#period",
                "!doc" : "Indicator period setting."
              },
              "rangeSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Aroon",
                "!url" : "8.3.0/anychart.core.stock.indicators.Aroon#rangeSeries",
                "!doc" : "Indicator series instance."
              },
              "upSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Aroon",
                "!url" : "8.3.0/anychart.core.stock.indicators.Aroon#upSeries",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "KeltnerChannels" : {
            "!doc" : "Keltner Channels indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels",
            "prototype" : {
              "atrPeriod" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.KeltnerChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels#atrPeriod",
                "!doc" : "Indicator Average True Range Period settings."
              },
              "maPeriod" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.KeltnerChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels#maPeriod",
                "!doc" : "Indicator Moving Average Period settings."
              },
              "maSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.KeltnerChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels#maSeries",
                "!doc" : "Indicator Moving Average series instance."
              },
              "multiplier" : {
                "!type" : "fn(opt_multiplier?: number) -> number|+anychart.core.stock.indicators.KeltnerChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels#multiplier",
                "!doc" : "Multiplier settings."
              },
              "rangeSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.KeltnerChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.KeltnerChannels#rangeSeries",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "RoC" : {
            "!doc" : "Rate of Change (RoC) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.RoC",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.RoC",
                "!url" : "8.3.0/anychart.core.stock.indicators.RoC#period",
                "!doc" : "Indicator period setting."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.RoC",
                "!url" : "8.3.0/anychart.core.stock.indicators.RoC#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "EMA" : {
            "!doc" : "Exponential Moving Average (EMA) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.EMA",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.EMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.EMA#period",
                "!doc" : "Indicator period setting."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.EMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.EMA#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "!doc" : "",
          "Momentum" : {
            "!doc" : "Momentum indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.Momentum",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MFI",
                "!url" : "8.3.0/anychart.core.stock.indicators.Momentum#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MFI",
                "!url" : "8.3.0/anychart.core.stock.indicators.Momentum#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "MFI" : {
            "!doc" : "Money Flow Index (MFI) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.MFI",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MFI",
                "!url" : "8.3.0/anychart.core.stock.indicators.MFI#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MFI",
                "!url" : "8.3.0/anychart.core.stock.indicators.MFI#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "CMF" : {
            "!doc" : "Chaikin Money Flow (CMF) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.CMF",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.CMF",
                "!url" : "8.3.0/anychart.core.stock.indicators.CMF#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.CMF",
                "!url" : "8.3.0/anychart.core.stock.indicators.CMF#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "RSI" : {
            "!doc" : "Relative Strength Index (RSI) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.RSI",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.RSI",
                "!url" : "8.3.0/anychart.core.stock.indicators.RSI#period",
                "!doc" : "Indicator period setting."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.RSI",
                "!url" : "8.3.0/anychart.core.stock.indicators.RSI#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "CCI" : {
            "!doc" : "Creates Commodity Channel (CCI) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.CCI",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.CCI",
                "!url" : "8.3.0/anychart.core.stock.indicators.CCI#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.CCI",
                "!url" : "8.3.0/anychart.core.stock.indicators.CCI#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "CHO" : {
            "!doc" : "CHO indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.CHO",
            "prototype" : {
              "fastPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.CHO",
                "!url" : "8.3.0/anychart.core.stock.indicators.CHO#fastPeriod",
                "!doc" : "Indicator fast period settings."
              },
              "maType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.CHO",
                "!url" : "8.3.0/anychart.core.stock.indicators.CHO#maType",
                "!doc" : "Indicator smoothing type."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.CHO",
                "!url" : "8.3.0/anychart.core.stock.indicators.CHO#series",
                "!doc" : "Indicator series instance."
              },
              "slowPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.CHO",
                "!url" : "8.3.0/anychart.core.stock.indicators.CHO#slowPeriod",
                "!doc" : "Indicator slow  period settings."
              }
            }
          },
          "WilliamsR" : {
            "!doc" : "Williams %R (%R) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.WilliamsR",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MFI",
                "!url" : "8.3.0/anychart.core.stock.indicators.WilliamsR#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.WilliamsR",
                "!url" : "8.3.0/anychart.core.stock.indicators.WilliamsR#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "PSAR" : {
            "!doc" : "Parabolic SAR (PSAR) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.PSAR",
            "prototype" : {
              "accelerationFactorIncrement" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.PSAR",
                "!url" : "8.3.0/anychart.core.stock.indicators.PSAR#accelerationFactorIncrement",
                "!doc" : "Acceleration factor increment settings."
              },
              "accelerationFactorMaximum" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.PSAR",
                "!url" : "8.3.0/anychart.core.stock.indicators.PSAR#accelerationFactorMaximum",
                "!doc" : "Acceleration factor maximum settings."
              },
              "accelerationFactorStart" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.PSAR",
                "!url" : "8.3.0/anychart.core.stock.indicators.PSAR#accelerationFactorStart",
                "!doc" : "Acceleration factor start settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.PSAR",
                "!url" : "8.3.0/anychart.core.stock.indicators.PSAR#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "MACD" : {
            "!doc" : "Moving Average Convergence Divergence (MACD) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.MACD",
            "prototype" : {
              "fastPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#fastPeriod",
                "!doc" : "Fast period setting."
              },
              "histogramSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#histogramSeries",
                "!doc" : "Histogram series instance."
              },
              "macdSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#macdSeries",
                "!doc" : "Indicator MACD series instance."
              },
              "signalPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#signalPeriod",
                "!doc" : "Signal period setting."
              },
              "signalSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#signalSeries",
                "!doc" : "Signal series instance."
              },
              "slowPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MACD",
                "!url" : "8.3.0/anychart.core.stock.indicators.MACD#slowPeriod",
                "!doc" : "Slow period setting."
              }
            }
          },
          "!url" : "8.3.0/anychart.core.stock.indicators",
          "SMA" : {
            "!doc" : "Simple Moving Average (SMA) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.SMA",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.SMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.SMA#period",
                "!doc" : "Indicator period setting."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.SMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.SMA#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "KDJ" : {
            "!doc" : "KDJ indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.KDJ",
            "prototype" : {
              "kMultiplier" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#kMultiplier",
                "!doc" : "%K multiplier settings."
              },
              "dPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#dPeriod",
                "!doc" : "Indicator %D Period settings."
              },
              "kMAPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#kMAPeriod",
                "!doc" : "Indicator %K smoothing period."
              },
              "dMAType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#dMAType",
                "!doc" : "%D smoothing type."
              },
              "kMAType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#kMAType",
                "!doc" : "%K smoothing type."
              },
              "kPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#kPeriod",
                "!doc" : "Indicator %K Period settings."
              },
              "dSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#dSeries",
                "!doc" : "Indicator %D Series instance."
              },
              "jSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#jSeries",
                "!doc" : "Indicator %J Series instance."
              },
              "kSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#kSeries",
                "!doc" : "Indicator %K Series instance."
              },
              "dMultiplier" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.KDJ",
                "!url" : "8.3.0/anychart.core.stock.indicators.KDJ#dMultiplier",
                "!doc" : "%D multiplier settings."
              }
            }
          },
          "DMI" : {
            "!doc" : "DMI indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.DMI",
            "prototype" : {
              "adxPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#adxPeriod",
                "!doc" : "Indicator ADX period settings."
              },
              "adxSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#adxSeries",
                "!doc" : "Indicator ADX series instance."
              },
              "ndiSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#ndiSeries",
                "!doc" : "Indicator -DI series instance."
              },
              "pdiSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#pdiSeries",
                "!doc" : "Indicator +DI series instance."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#period",
                "!doc" : "Indicator period settings."
              },
              "useWildersSmoothing" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.indicators.DMI",
                "!url" : "8.3.0/anychart.core.stock.indicators.DMI#useWildersSmoothing",
                "!doc" : "Wilders smoothing mode."
              }
            }
          },
          "BBandsB" : {
            "!doc" : "Bollinger Bands %B (BBands %B) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.BBandsB",
            "prototype" : {
              "deviation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBandsB",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsB#deviation",
                "!doc" : "Indicator deviation settings."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBandsB",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsB#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBandsB",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsB#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "ADL" : {
            "!doc" : "Accumulation Distribution Line (ADL) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.ADL",
            "prototype" : {
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.ADL",
                "!url" : "8.3.0/anychart.core.stock.indicators.ADL#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "PriceChannels" : {
            "!doc" : "Price Channels indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.PriceChannels",
            "prototype" : {
              "middleSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.PriceChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.PriceChannels#middleSeries",
                "!doc" : "Middle series instance."
              },
              "period" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.PriceChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.PriceChannels#period",
                "!doc" : "Indicator period settings."
              },
              "rangeSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.PriceChannels",
                "!url" : "8.3.0/anychart.core.stock.indicators.PriceChannels#rangeSeries",
                "!doc" : "Range series instance."
              }
            }
          },
          "MMA" : {
            "!doc" : "Modified Moving Average (MMA) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.MMA",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.MMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.MMA#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.MMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.MMA#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "Stochastic" : {
            "!doc" : "Stochastic indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic",
            "prototype" : {
              "dMAType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#dMAType",
                "!doc" : "%D smoothing type."
              },
              "dPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#dPeriod",
                "!doc" : "Indicator %D Period settings."
              },
              "dSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#dSeries",
                "!doc" : "Indicator %D Series instance."
              },
              "kMAPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#kMAPeriod",
                "!doc" : "Indicator %K smoothing period."
              },
              "kMAType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#kMAType",
                "!doc" : "%K smoothing type."
              },
              "kPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#kPeriod",
                "!doc" : "Indicator %K Period settings."
              },
              "kSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Stochastic",
                "!url" : "8.3.0/anychart.core.stock.indicators.Stochastic#kSeries",
                "!doc" : "Indicator %K Series instance."
              }
            }
          },
          "OBV" : {
            "!doc" : "OBV indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.OBV",
            "prototype" : {
              "series" : {
                "!type" : "fn(opt_type?: string|+anychart.enums.StockSeriesType) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.OBV",
                "!url" : "8.3.0/anychart.core.stock.indicators.OBV#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "VolumeMA" : {
            "!doc" : "Volume + MA indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.VolumeMA",
            "prototype" : {
              "maPeriod" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.VolumeMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.VolumeMA#maPeriod",
                "!doc" : "Indicator Moving Average Period settings."
              },
              "maSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.Base",
                "!url" : "8.3.0/anychart.core.stock.indicators.VolumeMA#maSeries",
                "!doc" : "Indicator moving average series instance."
              },
              "maType" : {
                "!type" : "fn(opt_type?: +anychart.enums.MovingAverageType|string) -> +anychart.enums.MovingAverageType|string|+anychart.core.stock.indicators.VolumeMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.VolumeMA#maType",
                "!doc" : "Indicator smoothing type."
              },
              "volumeSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.VolumeMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.VolumeMA#volumeSeries",
                "!doc" : "Indicator volume series instance."
              }
            }
          },
          "TRIX" : {
            "!doc" : "TRIX indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.TRIX",
            "prototype" : {
              "maType" : {
                "!type" : "fn(opt_value?: +anychart.enums.MovingAverageType|string) -> string|+anychart.enums.MovingAverageType|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#maType",
                "!doc" : "Indicator smoothing type."
              },
              "period" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#period",
                "!doc" : "Indicator period settings."
              },
              "signalMaType" : {
                "!type" : "fn(opt_value?: string|+anychart.enums.MovingAverageType) -> string|+anychart.enums.MovingAverageType|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#signalMaType",
                "!doc" : "Indicator signal smoothing type."
              },
              "signalPeriod" : {
                "!type" : "fn(opt_period?: number) -> number|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#signalPeriod",
                "!doc" : "Indicator signal period settings."
              },
              "signalSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#signalSeries",
                "!doc" : "Indicator signal series instance."
              },
              "trixSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.TRIX",
                "!url" : "8.3.0/anychart.core.stock.indicators.TRIX#trixSeries",
                "!doc" : "Indicator TRIX series instance."
              }
            }
          },
          "BBands" : {
            "!doc" : "Bollinger Bands (BBands) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.BBands",
            "prototype" : {
              "deviation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#deviation",
                "!doc" : "Indicator deviation settings."
              },
              "lowerSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#lowerSeries",
                "!doc" : "Indicator Lower Series instance."
              },
              "middleSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#middleSeries",
                "!doc" : "Indicator Middle Series instance."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#period",
                "!doc" : "Indicator period settings."
              },
              "rangeSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#rangeSeries",
                "!doc" : "Indicator series instance."
              },
              "upperSeries" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBands",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBands#upperSeries",
                "!doc" : "Indicator Upper Series instance."
              }
            }
          },
          "HA" : {
            "!doc" : "Heikin-Ashi indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.HA",
            "prototype" : {
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.HA",
                "!url" : "8.3.0/anychart.core.stock.indicators.HA#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "AMA" : {
            "!doc" : "Adaptive Moving Average (AMA) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.AMA",
            "prototype" : {
              "fastPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.AMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.AMA#fastPeriod",
                "!doc" : "Fast indicator period settings."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.AMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.AMA#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.AMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.AMA#series",
                "!doc" : "Indicator series instance."
              },
              "slowPeriod" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.AMA",
                "!url" : "8.3.0/anychart.core.stock.indicators.AMA#slowPeriod",
                "!doc" : "Slow indicator period settings."
              }
            }
          },
          "ATR" : {
            "!doc" : "Average True Range (ATR) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.ATR",
            "prototype" : {
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.ATR",
                "!url" : "8.3.0/anychart.core.stock.indicators.ATR#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.ATR",
                "!url" : "8.3.0/anychart.core.stock.indicators.ATR#series",
                "!doc" : "Indicator series instance."
              }
            }
          },
          "BBandsWidth" : {
            "!doc" : "Bollinger Bands Width (BBands Width) indicator class.",
            "!url" : "8.3.0/anychart.core.stock.indicators.BBandsWidth",
            "prototype" : {
              "deviation" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBandsWidth",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsWidth#deviation",
                "!doc" : "Indicator deviation settings."
              },
              "period" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.indicators.BBandsWidth",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsWidth#period",
                "!doc" : "Indicator period settings."
              },
              "series" : {
                "!type" : "fn(opt_type?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.series.Base|+anychart.core.stock.scrollerSeries.Base|+anychart.core.stock.indicators.BBandsWidth",
                "!url" : "8.3.0/anychart.core.stock.indicators.BBandsWidth#series",
                "!doc" : "Indicator series instance."
              }
            }
          }
        },
        "scrollerSeries" : {
          "Line" : {
            "!doc" : "Line Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Line",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Line",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "StepLine" : {
            "!doc" : "StepLine Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepLine",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepLine#stepDirection",
                "!doc" : "Step direction settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.StepLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Spline" : {
            "!doc" : "Spline Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Spline",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Spline#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Spline",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "!doc" : "Namespace anychart.core.stock.scrollerSeries.",
          "SplineArea" : {
            "!doc" : "SplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.SplineArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.SplineArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.SplineArea#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.SplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "OHLC" : {
            "!doc" : "OHLC Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.OHLC",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.OHLC#risingStroke",
                "!doc" : "Stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.OHLC",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.OHLC#fallingStroke",
                "!doc" : "Stroke settings."
              }
            }
          },
          "RangeStepArea" : {
            "!doc" : "RangeStepArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea#fill",
                "!doc" : "Fill settings."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeStepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all stock scroller series.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Hilo" : {
            "!doc" : "Hilo Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Hilo",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Hilo#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Hilo",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Marker" : {
            "!doc" : "Marker Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker#hatchFill",
                "!doc" : "Marker size settings in hover mode."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Marker#size",
                "!doc" : "Marker size settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Marker",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "RangeArea" : {
            "!doc" : "RangeArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeArea#fill",
                "!doc" : "Fill settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "!url" : "8.3.0/anychart.core.stock.scrollerSeries",
          "RangeSplineArea" : {
            "!doc" : "RangeSplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeSplineArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeSplineArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeSplineArea#fill",
                "!doc" : "Fill settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeSplineArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeSplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "RangeColumn" : {
            "!doc" : "RangeColumn Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeColumn",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeColumn#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeColumn#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.RangeColumn#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "JumpLine" : {
            "!doc" : "JumpLine Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.JumpLine",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.JumpLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Stick" : {
            "!doc" : "Stick Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Stick",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Stick#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Stick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Column" : {
            "!doc" : "Column Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Column",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Column#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Column#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Column#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Column",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Candlestick" : {
            "!doc" : "Candlestick Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Candlestick",
            "prototype" : {
              "risingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Candlestick#risingHatchFill",
                "!doc" : "Rising hatch fill settings."
              },
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "fallingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Candlestick#fallingHatchFill",
                "!doc" : "Falling hatch fill settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.OHLC#risingStroke",
                "!doc" : "Stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "fallingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Candlestick#fallingFill",
                "!doc" : "Falling fill settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "risingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Candlestick#risingFill",
                "!doc" : "Rising fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.OHLC#fallingStroke",
                "!doc" : "Stroke settings."
              }
            }
          },
          "DiscreteBase" : {
            "!doc" : "DiscreteBase series class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "StepArea" : {
            "!doc" : "StepArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepArea#fill",
                "!doc" : "Fill settings."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.StepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.StepArea",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Area" : {
            "!doc" : "Area Series Class.",
            "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Area",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#selected",
                "!doc" : "Hovered state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Area#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Area#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Area#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.scrollerSeries.Area",
                "!url" : "8.3.0/anychart.core.stock.scrollerSeries.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          }
        },
        "series" : {
          "Line" : {
            "!doc" : "Line Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Line",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Line",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "StepLine" : {
            "!doc" : "StepLine Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.StepLine",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.StepLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.StepLine#stepDirection",
                "!doc" : "Step direction settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.StepLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Spline" : {
            "!doc" : "Spline Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Spline",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Spline#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Spline",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "!doc" : "Namespace anychart.core.stock.series.",
          "SplineArea" : {
            "!doc" : "SplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.SplineArea",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.SplineArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.SplineArea#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.SplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.SplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "OHLC" : {
            "!doc" : "OHLC Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.OHLC",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.OHLC#risingStroke",
                "!doc" : "Stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.OHLC",
                "!url" : "8.3.0/anychart.core.stock.series.OHLC#fallingStroke",
                "!doc" : "Stroke settings."
              }
            }
          },
          "RangeStepArea" : {
            "!doc" : "RangeStepArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string, opt_opacity?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea#fill",
                "!doc" : "Fill settings."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeStepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all stock series.",
            "!url" : "8.3.0/anychart.core.stock.series.Base",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Base",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Hilo" : {
            "!doc" : "HiLo Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Hilo",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Hilo#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Hilo",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Marker" : {
            "!doc" : "Marker Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Marker",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Marker#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Marker#hatchFill",
                "!doc" : "Marker size settings in hover mode."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Marker#size",
                "!doc" : "Marker size settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Marker",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "RangeArea" : {
            "!doc" : "RangeArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.RangeArea",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string, opt_opacity?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeArea#fill",
                "!doc" : "Fill settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "!url" : "8.3.0/anychart.core.stock.series",
          "RangeSplineArea" : {
            "!doc" : "RangeSplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.RangeSplineArea",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeSplineArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string, opt_opacity?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeSplineArea#fill",
                "!doc" : "Fill settings."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeSplineArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.RangeSplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "RangeColumn" : {
            "!doc" : "RangeColumn Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.RangeColumn",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.RangeColumn#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string, opt_opacity?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.RangeColumn#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.RangeColumn#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "JumpLine" : {
            "!doc" : "JumpLine Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.JumpLine",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.JumpLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.JumpLine",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Stick" : {
            "!doc" : "Stick Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Stick",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Stick#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Stick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Column" : {
            "!doc" : "Column Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Column",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Column#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Column#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Column#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Column",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Candlestick" : {
            "!doc" : "Candlestick Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Candlestick",
            "prototype" : {
              "risingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Candlestick#risingHatchFill",
                "!doc" : "Rising hatch fill settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "fallingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Candlestick#fallingHatchFill",
                "!doc" : "Falling hatch fill settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.OHLC#risingStroke",
                "!doc" : "Stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "fallingFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Candlestick#fallingFill",
                "!doc" : "Falling fill settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "risingFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Candlestick#risingFill",
                "!doc" : "Rising fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Candlestick",
                "!url" : "8.3.0/anychart.core.stock.series.OHLC#fallingStroke",
                "!doc" : "Stroke settings."
              }
            }
          },
          "DiscreteBase" : {
            "!doc" : "DiscreteBase series class.",
            "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "getIndex" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.stock.series.Base#getIndex",
                "!doc" : "Returns series index."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.DiscreteBase#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "StepArea" : {
            "!doc" : "StepArea Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.StepArea",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.StepArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.StepArea#fill",
                "!doc" : "Fill settings."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.StepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.StepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.StepArea",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Area" : {
            "!doc" : "Area Series Class.",
            "!url" : "8.3.0/anychart.core.stock.series.Area",
            "prototype" : {
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Area#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "allowPointSettings" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#allowPointSettings",
                "!doc" : "Allows to set point settings from data."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Area#fill",
                "!doc" : "Fill settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Area#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.SeriesBase",
                "!url" : "8.3.0/anychart.core.stock.series.Area#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.stock.series.Area",
                "!url" : "8.3.0/anychart.core.stock.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          }
        },
        "Plot" : {
          "!doc" : "Stock Plot class.",
          "!url" : "8.3.0/anychart.core.stock.Plot",
          "prototype" : {
            "yMinorGrid" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Stock|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#yMinorGrid",
              "!doc" : "Minor grid settings by Y-scale."
            },
            "xMinorGrid" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Stock|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#xMinorGrid",
              "!doc" : "Minor grid settings by X-scale."
            },
            "defaultSeriesType" : {
              "!type" : "fn(opt_value?: +anychart.enums.StockSeriesType|string) -> +anychart.enums.StockSeriesType|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#defaultSeriesType",
              "!doc" : "Default series type."
            },
            "rangeMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_settings?: Object|bool) -> +anychart.core.axisMarkers.Range|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#rangeMarker",
              "!doc" : "Get or create a new range marker instance by index."
            },
            "removeSeries" : {
              "!type" : "fn(id: number|string) -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#removeSeries",
              "!doc" : "Removes one of series from chart by its id."
            },
            "stochastic" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kSeriesType?: +anychart.enums.StockSeriesType|string, opt_dSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Stochastic",
              "!url" : "8.3.0/anychart.core.stock.Plot#stochastic",
              "!doc" : "Creates a Stochastic indicator on the plot."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "atr" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.ATR",
              "!url" : "8.3.0/anychart.core.stock.Plot#atr",
              "!doc" : "Creates an Average True Range indicator on the plot."
            },
            "removeSeriesAt" : {
              "!type" : "fn(index: number) -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#removeSeriesAt",
              "!doc" : "Removes one of series from chart by its index."
            },
            "rsi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.RSI",
              "!url" : "8.3.0/anychart.core.stock.Plot#rsi",
              "!doc" : "Creates RSI (Relative Strength Index) indicator on the plot."
            },
            "priceChannels" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_middleSeriesType?: +anychart.enums.StockSeriesType|string, opt_rangeSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.PriceChannels",
              "!url" : "8.3.0/anychart.core.stock.Plot#priceChannels",
              "!doc" : "Creates a Price Channels indicator on the plot."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "xAxis" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.StockDateTime|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#xAxis",
              "!doc" : "X-axis settings."
            },
            "splineArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.SplineArea",
              "!url" : "8.3.0/anychart.core.stock.Plot#splineArea",
              "!doc" : "Adds Spline Area series."
            },
            "area" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Area",
              "!url" : "8.3.0/anychart.core.stock.Plot#area",
              "!doc" : "Adds Area series."
            },
            "psar" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_accelerationFactorStart?: number, opt_accelerationFactorIncrement?: number, opt_accelerationFactorMaximum?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.PSAR",
              "!url" : "8.3.0/anychart.core.stock.Plot#psar",
              "!doc" : "Creates a PSAR (Parabolic SAR) indicator on the plot."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "lineMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_settings?: Object|bool) -> +anychart.core.axisMarkers.Line|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#lineMarker",
              "!doc" : "Get or create a new line marker instance by index."
            },
            "obv" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.OBV",
              "!url" : "8.3.0/anychart.core.stock.Plot#obv",
              "!doc" : "Creates an On Balance Volume indicator on the plot."
            },
            "rangeColumn" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.RangeColumn",
              "!url" : "8.3.0/anychart.core.stock.Plot#rangeColumn",
              "!doc" : "Adds Range Column series."
            },
            "cmf" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CMF",
              "!url" : "8.3.0/anychart.core.stock.Plot#cmf",
              "!doc" : "Creates a Chaikin Money Flow indicator on the chart."
            },
            "sma" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.SMA",
              "!url" : "8.3.0/anychart.core.stock.Plot#sma",
              "!doc" : "Creates SMA (Simple Moving Average) indicator on the plot."
            },
            "textMarker" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_settings?: Object|bool) -> +anychart.core.axisMarkers.Text|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#textMarker",
              "!doc" : "Get or create a new text marker instance by index."
            },
            "volumeMa" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_volumeSeriesType?: +anychart.enums.StockSeriesType|string, opt_maSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.VolumeMA",
              "!url" : "8.3.0/anychart.core.stock.Plot#volumeMa",
              "!doc" : "Creates a Volume + MA indicator on the plot."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "dataArea" : {
              "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.DataArea|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#dataArea",
              "!doc" : "Data area settings."
            },
            "bbands" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_middleSeriesType?: +anychart.enums.StockSeriesType|string, opt_upperSeriesType?: +anychart.enums.StockSeriesType|string, opt_lowerSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBands",
              "!url" : "8.3.0/anychart.core.stock.Plot#bbands",
              "!doc" : "Creates Bollinger Bands indicator on the plot."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "legend" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#legend",
              "!doc" : "Legend settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "eventMarkers" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.stock.eventMarkers.Controller|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#eventMarkers",
              "!doc" : "Event markers settings"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "williamsR" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.WilliamsR",
              "!url" : "8.3.0/anychart.core.stock.Plot#williamsR",
              "!doc" : "Creates a Williams %R indicator on the plot."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "rangeArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.RangeArea",
              "!url" : "8.3.0/anychart.core.stock.Plot#rangeArea",
              "!doc" : "Adds Range Area series."
            },
            "noData" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#noData",
              "!doc" : "NoData settings."
            },
            "maxPointWidth" : {
              "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#maxPointWidth",
              "!doc" : "Maximum point width settings."
            },
            "minPointLength" : {
              "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#minPointLength",
              "!doc" : "Minimum point length settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stepLine" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.StepLine",
              "!url" : "8.3.0/anychart.core.stock.Plot#stepLine",
              "!doc" : "Adds Step line series."
            },
            "crosshair" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Crosshair|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#crosshair",
              "!doc" : "Crosshair settings"
            },
            "spline" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Spline",
              "!url" : "8.3.0/anychart.core.stock.Plot#spline",
              "!doc" : "Adds Spline series."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "removeAllSeries" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#removeAllSeries",
              "!doc" : "Removes all series from chart."
            },
            "hatchFillPalette" : {
              "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#hatchFillPalette",
              "!doc" : "Hatch fill palette settings."
            },
            "roc" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.RoC",
              "!url" : "8.3.0/anychart.core.stock.Plot#roc",
              "!doc" : "Creates RoC (Rate of Change) indicator on the plot."
            },
            "rangeSplineArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.RangeSplineArea",
              "!url" : "8.3.0/anychart.core.stock.Plot#rangeSplineArea",
              "!doc" : "Adds Range Spline Area series."
            },
            "getStat" : {
              "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
              "!url" : "8.3.0/anychart.core.stock.Plot#getStat",
              "!doc" : "Getter for a statistical value by the key."
            },
            "macd" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_signalPeriod?: number, opt_macdSeriesType?: +anychart.enums.StockSeriesType|string, opt_signalSeriesType?: +anychart.enums.StockSeriesType|string, opt_histogramSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MACD",
              "!url" : "8.3.0/anychart.core.stock.Plot#macd",
              "!doc" : "Creates MACD (Moving Average Convergence Divergence) indicator on the plot."
            },
            "ha" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.HA",
              "!url" : "8.3.0/any#hart.core.stock.Plot#ha",
              "!doc" : "Creates a Heikin-Ashi indicator on the plot."
            },
            "jumpLine" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.JumpLine",
              "!url" : "8.3.0/anychart.core.stock.Plot#jumpLine",
              "!doc" : "Adds Jump Line series."
            },
            "xGrid" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Stock|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#xGrid",
              "!doc" : "Grid settings."
            },
            "baseline" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#baseline",
              "!doc" : "Set the baseline by the Y-Scale value."
            },
            "rangeStepArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.RangeStepArea",
              "!url" : "8.3.0/anychart.core.stock.Plot#rangeStepArea",
              "!doc" : "Adds Range Step Area series."
            },
            "keltnerChannels" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_atrPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_multiplier?: number, opt_maSeries?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.KeltnerChannels",
              "!url" : "8.3.0/anychart.core.stock.Plot#keltnerChannels",
              "!doc" : "Creates a Keltner Channels indicator on the plot."
            },
            "ema" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.EMA",
              "!url" : "8.3.0/anychart.core.stock.Plot#ema",
              "!doc" : "Creates EMA (Exponential Moving Average) indicator on the plot."
            },
            "line" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Line",
              "!url" : "8.3.0/anychart.core.stock.Plot#line",
              "!doc" : "Adds Line series."
            },
            "annotations" : {
              "!type" : "fn(opt_annotationsList?: +Array) -> +anychart.core.annotations.PlotController|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#annotations",
              "!doc" : "Creates annotations."
            },
            "mfi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MFI",
              "!url" : "8.3.0/anychart.core.stock.Plot#mfi",
              "!doc" : "Creates a MFI (Money Flow Index) indicator on the plot."
            },
            "getSeriesCount" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.stock.Plot#getSeriesCount",
              "!doc" : "Returns series count."
            },
            "column" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Column",
              "!url" : "8.3.0/anychart.core.stock.Plot#column",
              "!doc" : "Adds Column series."
            },
            "title" : {
              "!type" : "fn(opt_settings?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#title",
              "!doc" : "Title settings."
            },
            "priceIndicator" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axisMarkers.CurrentPriceIndicator|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#priceIndicator",
              "!doc" : "Price indicator settings."
            },
            "kdj" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kMultiplier?: number, opt_dMultiplier?: number, opt_kSeriesType?: +anychart.enums.StockSeriesType|string, opt_dSeriesType?: +anychart.enums.StockSeriesType|string, opt_jSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.KDJ",
              "!url" : "8.3.0/anychart.core.stock.Plot#kdj",
              "!doc" : "Creates a KDJ indicator on the plot."
            },
            "ohlc" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.OHLC",
              "!url" : "8.3.0/anychart.core.stock.Plot#ohlc",
              "!doc" : "Adds OHLC series."
            },
            "momentum" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Momentum",
              "!url" : "8.3.0/anychart.core.stock.Plot#momentum",
              "!doc" : "Creates a Momentum indicator on the plot."
            },
            "stick" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Stick",
              "!url" : "8.3.0/anychart.core.stock.Plot#stick",
              "!doc" : "Adds Stick series."
            },
            "yAxis" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.axes.Linear|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#yAxis",
              "!doc" : "Y-axis settings."
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.enums.ScatterScaleTypes|string|+anychart.scales.ScatterBase|Object) -> +anychart.scales.ScatterBase|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#yScale",
              "!doc" : "Y-scale settings."
            },
            "mma" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MMA",
              "!url" : "8.3.0/anychart.core.stock.Plot#mma",
              "!doc" : "Creates MMA (Modified Moving Average) indicator on the plot."
            },
            "getSeries" : {
              "!type" : "fn(id: number|string) -> +anychart.core.stock.series.Base",
              "!url" : "8.3.0/anychart.core.stock.Plot#getSeries",
              "!doc" : "Gets series by its id."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#palette",
              "!doc" : "Palette settings."
            },
            "ama" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.AMA",
              "!url" : "8.3.0/anychart.core.stock.Plot#ama",
              "!doc" : "Creates AMA (Adaptive Moving Average) indicator on the plot."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "pointWidth" : {
              "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#pointWidth",
              "!doc" : "Point width settings."
            },
            "cci" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CCI",
              "!url" : "8.3.0/anychart.core.stock.Plot#cci",
              "!doc" : "Creates a Commodity Channel Index indicator on the chart."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "bbandsB" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBandsB",
              "!url" : "8.3.0/anychart.core.stock.Plot#bbandsB",
              "!doc" : "Creates %B indicator on the plot."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "bbandsWidth" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBandsWidth",
              "!url" : "8.3.0/anychart.core.stock.Plot#bbandsWidth",
              "!doc" : "Creates Bollinger Bands Width indicator on the plot."
            },
            "marker" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Marker",
              "!url" : "8.3.0/anychart.core.stock.Plot#marker",
              "!doc" : "Adds Marker series."
            },
            "cho" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CHO",
              "!url" : "8.3.0/anychart.core.stock.Plot#cho",
              "!doc" : "Creates a Chaikin Oscillator indicator on the chart."
            },
            "hilo" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Hilo",
              "!url" : "8.3.0/anychart.core.stock.Plot#hilo",
              "!doc" : "Adds HiLo series."
            },
            "adl" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.ADL",
              "!url" : "8.3.0/anychart.core.stock.Plot#adl",
              "!doc" : "Creates an Accumulation Distribution Line indicator on the plot."
            },
            "addSeries" : {
              "!type" : "fn(var_args: +anychart.data.TableMapping) -> [+anychart.core.stock.series.Base]",
              "!url" : "8.3.0/anychart.core.stock.Plot#addSeries",
              "!doc" : "Add series to chart."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#background",
              "!doc" : "Background settings."
            },
            "stepArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.StepArea",
              "!url" : "8.3.0/anychart.core.stock.Plot#stepArea",
              "!doc" : "Adds Step Area series."
            },
            "candlestick" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.series.Candlestick",
              "!url" : "8.3.0/anychart.core.stock.Plot#candlestick",
              "!doc" : "Adds Candlestick series."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            },
            "aroon" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_upSeriesType?: +anychart.enums.StockSeriesType|string, opt_downSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Aroon",
              "!url" : "8.3.0/anychart.core.stock.Plot#aroon",
              "!doc" : "Creates Aroon indicator on the plot."
            },
            "getSeriesAt" : {
              "!type" : "fn(index: number) -> +anychart.core.stock.series.Base",
              "!url" : "8.3.0/anychart.core.stock.Plot#getSeriesAt",
              "!doc" : "Gets series by its index."
            },
            "yGrid" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_value?: Object|bool) -> +anychart.core.grids.Stock|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#yGrid",
              "!doc" : "Grid settings."
            },
            "dmi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_adxPeriod?: number, opt_useWildersSmoothing?: bool, opt_pdiSeriesType?: +anychart.enums.StockSeriesType|string, opt_ndiSeriesType?: +anychart.enums.StockSeriesType|string, opt_adxSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.DMI",
              "!url" : "8.3.0/anychart.core.stock.Plot#dmi",
              "!doc" : "Creates a Directional Movement Index indicator on the chart."
            },
            "markerPalette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.Markers|Object|[+anychart.enums.MarkerType|string]) -> +anychart.palettes.Markers|+anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.stock.Plot#markerPalette",
              "!doc" : "Markers palette settings."
            },
            "trix" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_signalPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType, opt_signalMaType?: +anychart.enums.MovingAverageType, opt_trixSeriesType?: +anychart.enums.StockSeriesType|string, opt_signalSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.TRIX",
              "!url" : "8.3.0/anychart.core.stock.Plot#trix",
              "!doc" : "Creates a TRIX indicator on the plot."
            }
          }
        },
        "Scroller" : {
          "!doc" : "Stock scroller class. Adds series drawing to UI Scroller.",
          "!url" : "8.3.0/anychart.core.stock.Scroller",
          "prototype" : {
            "defaultSeriesType" : {
              "!type" : "fn(opt_value?: +anychart.enums.StockSeriesType|string) -> +anychart.enums.StockSeriesType|string|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#defaultSeriesType",
              "!doc" : "Default series type."
            },
            "allowRangeChange" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#allowRangeChange",
              "!doc" : "Mode of the range changing."
            },
            "removeSeries" : {
              "!type" : "fn(id: number|string) -> +anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#removeSeries",
              "!doc" : "Removes one of series from chart by its id."
            },
            "stochastic" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kSeriesType?: +anychart.enums.StockSeriesType|string, opt_dSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Stochastic",
              "!url" : "8.3.0/anychart.core.stock.Scroller#stochastic",
              "!doc" : "Creates a Stochastic indicator on the scroller."
            },
            "atr" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.ATR",
              "!url" : "8.3.0/anychart.core.stock.Scroller#atr",
              "!doc" : "Creates an Average True Range indicator on the scroller."
            },
            "removeSeriesAt" : {
              "!type" : "fn(index: number) -> +anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#removeSeriesAt",
              "!doc" : "Removes one of series from chart by its index."
            },
            "rsi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.RSI",
              "!url" : "8.3.0/anychart.core.stock.Scroller#rsi",
              "!doc" : "Creates RSI (Relative Strength Index) indicator on the scroller."
            },
            "priceChannels" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_middleSeriesType?: +anychart.enums.StockSeriesType|string, opt_rangeSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.PriceChannels",
              "!url" : "8.3.0/anychart.core.stock.Scroller#priceChannels",
              "!doc" : "Creates a Price Channels indicator on the scroller."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#minHeight",
              "!doc" : "Scroller minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#height",
              "!doc" : "Scroller height."
            },
            "xAxis" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.StockDateTime|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#xAxis",
              "!doc" : "X-axis settings."
            },
            "splineArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.SplineArea",
              "!url" : "8.3.0/anychart.core.stock.Scroller#splineArea",
              "!doc" : "Adds Spline Area series."
            },
            "area" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Area",
              "!url" : "8.3.0/anychart.core.stock.Scroller#area",
              "!doc" : "Adds Area series."
            },
            "psar" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_accelerationFactorStart?: number, opt_accelerationFactorIncrement?: number, opt_accelerationFactorMaximum?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.PSAR",
              "!url" : "8.3.0/anychart.core.stock.Scroller#psar",
              "!doc" : "Creates a PSAR (Parabolic SAR) indicator on the scroller."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "obv" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.OBV",
              "!url" : "8.3.0/anychart.core.stock.Scroller#obv",
              "!doc" : "Creates an On Balance Volume indicator on the scroller."
            },
            "rangeColumn" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.RangeColumn",
              "!url" : "8.3.0/anychart.core.stock.Scroller#rangeColumn",
              "!doc" : "Adds Range Column series."
            },
            "cmf" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CMF",
              "!url" : "8.3.0/anychart.core.stock.Scroller#cmf",
              "!doc" : "Creates a Chaikin Money Flow indicator on the scroller."
            },
            "sma" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.SMA",
              "!url" : "8.3.0/anychart.core.stock.Scroller#sma",
              "!doc" : "Creates SMA (Simple Moving Average) indicator on the scroller."
            },
            "volumeMa" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_volumeSeriesType?: +anychart.enums.StockSeriesType|string, opt_maSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.VolumeMA",
              "!url" : "8.3.0/anychart.core.stock.Scroller#volumeMa",
              "!doc" : "Creates a Volume + MA indicator on the scroller."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "selectedFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#selectedFill",
              "!doc" : "Select fill settings."
            },
            "bbands" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_middleSeriesType?: +anychart.enums.StockSeriesType|string, opt_upperSeriesType?: +anychart.enums.StockSeriesType|string, opt_lowerSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBands",
              "!url" : "8.3.0/anychart.core.stock.Scroller#bbands",
              "!doc" : "Creates Bollinger Bands indicator on the scroller."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#maxHeight",
              "!doc" : "Scroller maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "williamsR" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.WilliamsR",
              "!url" : "8.3.0/anychart.core.stock.Scroller#williamsR",
              "!doc" : "Creates a Williams %R indicator on the scroller."
            },
            "rangeArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.RangeArea",
              "!url" : "8.3.0/anychart.core.stock.Scroller#rangeArea",
              "!doc" : "Adds Range Area series."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stepLine" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.StepLine",
              "!url" : "8.3.0/anychart.core.stock.Scroller#stepLine",
              "!doc" : "Adds Step Line series."
            },
            "spline" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Spline",
              "!url" : "8.3.0/anychart.core.stock.Scroller#spline",
              "!doc" : "Adds Range Step area series."
            },
            "outlineStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#outlineStroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "removeAllSeries" : {
              "!type" : "fn() -> +anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#removeAllSeries",
              "!doc" : "Removes all series from chart."
            },
            "hatchFillPalette" : {
              "!type" : "fn(opt_value?: [+anychart.graphics.vector.HatchFill.HatchFillType]|Object|+anychart.palettes.HatchFills) -> +anychart.palettes.HatchFills|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#hatchFillPalette",
              "!doc" : "Hatch fill palette settings."
            },
            "roc" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.RoC",
              "!url" : "8.3.0/anychart.core.stock.Scroller#roc",
              "!doc" : "Creates RoC (Rate of Change) indicator on the scroller."
            },
            "rangeSplineArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.RangeSplineArea",
              "!url" : "8.3.0/anychart.core.stock.Scroller#rangeSplineArea",
              "!doc" : "Adds Range Column series."
            },
            "macd" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_signalPeriod?: number, opt_macdSeriesType?: +anychart.enums.StockSeriesType|string, opt_signalSeriesType?: +anychart.enums.StockSeriesType|string, opt_histogramSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MACD",
              "!url" : "8.3.0/anychart.core.stock.Scroller#macd",
              "!doc" : "Creates MACD (Moving Average Convergence Divergence) indicator on the scroller."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#fill",
              "!doc" : "Fill settings."
            },
            "ha" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.HA",
              "!url" : "8.3.0/any#hart.core.stock.Scroller#ha",
              "!doc" : "Creates a Heikin-Ashi indicator on the scroller."
            },
            "jumpLine" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.JumpLine",
              "!url" : "8.3.0/anychart.core.stock.Scroller#jumpLine",
              "!doc" : "Adds Jump Line series."
            },
            "rangeStepArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.RangeStepArea",
              "!url" : "8.3.0/anychart.core.stock.Scroller#rangeStepArea",
              "!doc" : "Adds Range Step area series."
            },
            "keltnerChannels" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_maPeriod?: number, opt_atrPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_multiplier?: number, opt_maSeries?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.KeltnerChannels",
              "!url" : "8.3.0/anychart.core.stock.Scroller#keltnerChannels",
              "!doc" : "Creates a Keltner Channels indicator on the scroller."
            },
            "ema" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.EMA",
              "!url" : "8.3.0/anychart.core.stock.Scroller#ema",
              "!doc" : "Creates EMA (Exponential Moving Average) indicator on the scroller."
            },
            "line" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Line",
              "!url" : "8.3.0/anychart.core.stock.Scroller#line",
              "!doc" : "Adds Line series."
            },
            "mfi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MFI",
              "!url" : "8.3.0/anychart.core.stock.Scroller#mfi",
              "!doc" : "Creates a MFI (Money Flow Index) indicator on the scroller."
            },
            "getSeriesCount" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.stock.Scroller#getSeriesCount",
              "!doc" : "Returns series count."
            },
            "column" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Column",
              "!url" : "8.3.0/anychart.core.stock.Scroller#column",
              "!doc" : "Adds Column series."
            },
            "autoHide" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#autoHide",
              "!doc" : "Auto hide setting."
            },
            "thumbs" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.ui.Scroller.Thumbs|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#thumbs",
              "!doc" : "Thumbs settings."
            },
            "kdj" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_kPeriod?: number, opt_kMAPeriod?: number, opt_dPeriod?: number, opt_kMAType?: +anychart.enums.MovingAverageType|string, opt_dMAType?: +anychart.enums.MovingAverageType|string, opt_kMultiplier?: number, opt_dMultiplier?: number, opt_kSeriesType?: +anychart.enums.StockSeriesType|string, opt_dSeriesType?: +anychart.enums.StockSeriesType|string, opt_jSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.KDJ",
              "!url" : "8.3.0/anychart.core.stock.Scroller#kdj",
              "!doc" : "Creates a KDJ indicator on the scroller."
            },
            "ohlc" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.OHLC",
              "!url" : "8.3.0/anychart.core.stock.Scroller#ohlc",
              "!doc" : "Adds OHLC series."
            },
            "momentum" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Momentum",
              "!url" : "8.3.0/anychart.core.stock.Scroller#momentum",
              "!doc" : "Creates a Momentum indicator on the scroller."
            },
            "stick" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Stick",
              "!url" : "8.3.0/anychart.core.stock.Scroller#stick",
              "!doc" : "Adds Stick series."
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.enums.ScatterScaleTypes|string|+anychart.scales.ScatterBase|Object) -> +anychart.scales.ScatterBase|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#yScale",
              "!doc" : "Y-scale settings."
            },
            "mma" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.MMA",
              "!url" : "8.3.0/anychart.core.stock.Scroller#mma",
              "!doc" : "Creates MMA (Modified Moving Average) indicator on the scroller."
            },
            "getSeries" : {
              "!type" : "fn(id: number|string) -> +anychart.core.stock.scrollerSeries.Base",
              "!url" : "8.3.0/anychart.core.stock.Scroller#getSeries",
              "!doc" : "Gets series by its id."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.stock.Scroller#palette",
              "!doc" : "Palette settings."
            },
            "ama" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.AMA",
              "!url" : "8.3.0/anychart.core.stock.Scroller#ama",
              "!doc" : "Creates AMA (Adaptive Moving Average) indicator on the scroller."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "cci" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CCI",
              "!url" : "8.3.0/anychart.core.stock.Scroller#cci",
              "!doc" : "Creates a Commodity Channel Index indicator on the scroller."
            },
            "bbandsB" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBandsB",
              "!url" : "8.3.0/anychart.core.stock.Scroller#bbandsB",
              "!doc" : "Creates %B indicator on the scroller."
            },
            "bbandsWidth" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_deviation?: number, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.BBandsWidth",
              "!url" : "8.3.0/anychart.core.stock.Scroller#bbandsWidth",
              "!doc" : "Creates Bollinger Bands Width indicator on the scroller."
            },
            "marker" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Marker",
              "!url" : "8.3.0/anychart.core.stock.Scroller#marker",
              "!doc" : "Adds Marker series."
            },
            "cho" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_fastPeriod?: number, opt_slowPeriod?: number, opt_maType?: string, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.CHO",
              "!url" : "8.3.0/anychart.core.stock.Scroller#cho",
              "!doc" : "Creates a Chaikin Oscillator indicator on the scroller."
            },
            "hilo" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Hilo",
              "!url" : "8.3.0/anychart.core.stock.Scroller#hilo",
              "!doc" : "Adds HiLo series."
            },
            "adl" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_seriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.ADL",
              "!url" : "8.3.0/anychart.core.stock.Scroller#adl",
              "!doc" : "Creates an Accumulation Distribution Line indicator on the scroller."
            },
            "addSeries" : {
              "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> [+anychart.core.stock.scrollerSeries.Base]",
              "!url" : "8.3.0/anychart.core.stock.Scroller#addSeries",
              "!doc" : "Add series to chart."
            },
            "stepArea" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.StepArea",
              "!url" : "8.3.0/anychart.core.stock.Scroller#stepArea",
              "!doc" : "Adds Step Area series."
            },
            "candlestick" : {
              "!type" : "fn(opt_data?: +anychart.data.TableMapping|+anychart.data.Table|[[+Object]]|string, opt_mappingSettings?: +Object, opt_csvSettings?: Object) -> +anychart.core.stock.scrollerSeries.Candlestick",
              "!url" : "8.3.0/anychart.core.stock.Scroller#candlestick",
              "!doc" : "Adds Candlestick series."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.stock.Scroller",
              "!url" : "8.3.0/anychart.core.ui.Scroller#orientation",
              "!doc" : "Scroller orientation."
            },
            "aroon" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_upSeriesType?: +anychart.enums.StockSeriesType|string, opt_downSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.Aroon",
              "!url" : "8.3.0/anychart.core.stock.Scroller#aroon",
              "!doc" : "Creates Aroon indicator on the scroller."
            },
            "getSeriesAt" : {
              "!type" : "fn(index: number) -> +anychart.core.stock.scrollerSeries.Base",
              "!url" : "8.3.0/anychart.core.stock.Scroller#getSeriesAt",
              "!doc" : "Gets the series by its index."
            },
            "dmi" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_adxPeriod?: number, opt_useWildersSmoothing?: bool, opt_pdiSeriesType?: +anychart.enums.StockSeriesType|string, opt_ndiSeriesType?: +anychart.enums.StockSeriesType|string, opt_adxSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.DMI",
              "!url" : "8.3.0/anychart.core.stock.Scroller#dmi",
              "!doc" : "Creates a Directional Movement Index indicator on the scroller."
            },
            "trix" : {
              "!type" : "fn(mapping: +anychart.data.TableMapping, opt_period?: number, opt_signalPeriod?: number, opt_maType?: +anychart.enums.MovingAverageType|string, opt_signalMaType?: +anychart.enums.MovingAverageType|string, opt_trixSeriesType?: +anychart.enums.StockSeriesType|string, opt_signalSeriesType?: +anychart.enums.StockSeriesType|string) -> +anychart.core.stock.indicators.TRIX",
              "!url" : "8.3.0/anychart.core.stock.Scroller#trix",
              "!doc" : "Creates a TRIX indicator on the scroller."
            }
          }
        },
        "Grouping" : {
          "!doc" : "Grouping settings class.",
          "!url" : "8.3.0/anychart.core.stock.Grouping",
          "prototype" : {
            "getCurrentDataInterval" : {
              "!type" : "fn() -> +anychart.core.stock.Grouping.Level",
              "!url" : "8.3.0/anychart.core.stock.Grouping#getCurrentDataInterval",
              "!doc" : "Returns current grouping level."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "forced" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Grouping",
              "!url" : "8.3.0/anychart.core.stock.Grouping#forced",
              "!doc" : "Forced grouping settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "minPixPerPoint" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.Grouping",
              "!url" : "8.3.0/anychart.core.stock.Grouping#minPixPerPoint",
              "!doc" : "Minimum visible points count."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.stock.Grouping",
              "!url" : "8.3.0/anychart.core.stock.Grouping#enabled",
              "!doc" : "Grouping state."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "maxVisiblePoints" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.stock.Grouping",
              "!url" : "8.3.0/anychart.core.stock.Grouping#maxVisiblePoints",
              "!doc" : "Maximum visible points count."
            },
            "levels" : {
              "!type" : "fn(opt_value?: [+anychart.core.stock.Grouping.Level|string]) -> [+anychart.core.stock.Grouping.Level]|+anychart.core.stock.Grouping",
              "!url" : "8.3.0/anychart.core.stock.Grouping#levels",
              "!doc" : "Grouping levels."
            },
            "isGrouped" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.stock.Grouping#isGrouped",
              "!doc" : "Whether the data is grouped."
            }
          },
          "Level" : {
            "!doc" : "Type definition for grouping level.",
            "!url" : "8.3.0/anychart.core.stock.Grouping.Level",
            "prototype" : {
              "count" : {
                "!type" : "number",
                "!doc" : "Count levels."
              },
              "unit" : {
                "!type" : "+anychart.enums.Interval|string",
                "!doc" : "Interval."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.stock.",
        "!url" : "8.3.0/anychart.core.stock"
      },
      "MapPoint" : {
        "!doc" : "Series-based chart point.",
        "!url" : "8.3.0/anychart.core.MapPoint",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.MapPoint",
            "!url" : "8.3.0/anychart.core.Point#selected",
            "!doc" : "Select point state."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.MapPoint",
            "!url" : "8.3.0/anychart.core.Point#hovered",
            "!doc" : "Hover point state."
          },
          "getProperties" : {
            "!type" : "fn() -> Object",
            "!url" : "8.3.0/anychart.core.MapPoint#getProperties",
            "!doc" : "Returns point geo properties."
          },
          "getParentChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.MapPoint#getParentChart",
            "!doc" : "Returns point parent map chart."
          },
          "getId" : {
            "!type" : "fn() -> string",
            "!url" : "8.3.0/anychart.core.MapPoint#getId",
            "!doc" : "Returns point geo id."
          },
          "getCurrentChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.MapPoint#getCurrentChart",
            "!doc" : "Returns current visible map on stage."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.MapPoint",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          },
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Point#exists",
            "!doc" : "Checks the existence of the current point (by index) in dataset."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          }
        }
      },
      "StateSettings" : {
        "!doc" : "The StateSettings class contains methods for configuring the states of different charts and their parts.",
        "!url" : "8.3.0/anychart.core.StateSettings",
        "prototype" : {
          "risingHatchFill" : {
            "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.stock.scrollerSeries.Base",
            "!url" : "8.3.0/anychart.core.StateSettings#risingHatchFill",
            "!doc" : "Rising hatch fill settings."
          },
          "outlierMarkers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#outlierMarkers",
            "!doc" : "Outlier markers settings."
          },
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|Object",
            "!url" : "8.3.0/anychart.core.StateSettings#selected",
            "!doc" : "Selected state settings."
          },
          "width" : {
            "!type" : "fn(opt_width?: string|number) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#width",
            "!doc" : "Markers width in pixels or percentages."
          },
          "upperLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#upperLabels",
            "!doc" : "Labels settings."
          },
          "highStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#highStroke",
            "!doc" : "High stroke settings."
          },
          "highFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Base|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#highFill",
            "!doc" : "High fill settings."
          },
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "negativeFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#negativeFill",
            "!doc" : "Negative fill settings."
          },
          "fallingHatchFill" : {
            "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Base",
            "!url" : "8.3.0/anychart.core.StateSettings#fallingHatchFill",
            "!doc" : "Falling hatch fill settings."
          },
          "height" : {
            "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#height",
            "!doc" : "Markers height in pixels or percentages."
          },
          "grid" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#grid",
            "!doc" : "Grid settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#vAlign",
            "!doc" : "Vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontFamily",
            "!doc" : "Font family setting."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontWeight",
            "!doc" : "Text font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#lineHeight",
            "!doc" : "Line height settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|Object",
            "!url" : "8.3.0/anychart.core.StateSettings#hovered",
            "!doc" : "Hovered state settings."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#letterSpacing",
            "!doc" : "Letter spacing settings."
          },
          "outline" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Outline|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#outline",
            "!doc" : "Outline settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#minLabels",
            "!doc" : "Minimum labels settings."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|Object",
            "!url" : "8.3.0/anychart.core.StateSettings#normal",
            "!doc" : "Normal state settings."
          },
          "risingStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#risingStroke",
            "!doc" : "Rising stroke settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "highHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#highHatchFill",
            "!doc" : "High hatch fill settings."
          },
          "emptyFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|fn(), opt_opacity?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#emptyFill",
            "!doc" : "Fill settings."
          },
          "fallingFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Base|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fallingFill",
            "!doc" : "Falling fill settings."
          },
          "stroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#stroke",
            "!doc" : "Stroke settings."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontVariant",
            "!doc" : "Font variant settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.ui.CircularLabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#hAlign",
            "!doc" : "Horizontal align settings."
          },
          "negativeHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#negativeHatchFill",
            "!doc" : "Negative hatch fill settings."
          },
          "medianStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#medianStroke",
            "!doc" : "Median stroke settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "fill" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fill",
            "!doc" : "Fill settings."
          },
          "dummyFill" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#dummyFill",
            "!doc" : "Fill settings."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontSize",
            "!doc" : "Font size settings."
          },
          "lowFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Base|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#lowFill",
            "!doc" : "Low fill settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#disablePointerEvents",
            "!doc" : "Disable pointer events settings."
          },
          "stemStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#stemStroke",
            "!doc" : "Stem stroke settings."
          },
          "content" : {
            "!type" : "fn(opt_value?: string|number|function(path:+anychart.graphics.vector.Path)) -> string|number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#content",
            "!doc" : "Content settings."
          },
          "risingFill" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.stock.scrollerSeries.Base|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#risingFill",
            "!doc" : "Rising fill settings."
          },
          "explode" : {
            "!type" : "fn(value: number|string) -> number|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#explode",
            "!doc" : "Explode radius settings."
          },
          "lowStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#lowStroke",
            "!doc" : "Low stroke settings."
          },
          "maxLabels" : {
            "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#maxLabels",
            "!doc" : "Maximum labels settings."
          },
          "type" : {
            "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#type",
            "!doc" : "Marker type."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "hatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#hatchFill",
            "!doc" : "Hatch fill settings."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#wordBreak",
            "!doc" : "Word break mode."
          },
          "negativeStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#negativeStroke",
            "!doc" : "Negative stroke settings."
          },
          "whiskerWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#whiskerWidth",
            "!doc" : "Whisker width."
          },
          "fontPadding" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontPadding",
            "!doc" : "Font padding settings."
          },
          "size" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#size",
            "!doc" : "Marker size settings."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#textDirection",
            "!doc" : "Letter direction settings."
          },
          "dummyStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#dummyStroke",
            "!doc" : "Stroke settings."
          },
          "lowHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#lowHatchFill",
            "!doc" : "Low hatch fill settings."
          },
          "lowerLabels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#lowerLabels",
            "!doc" : "Labels settings."
          },
          "connector" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Connector|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#connector",
            "!doc" : "Connector settings."
          },
          "background" : {
            "!type" : "fn(opt_settings?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#background",
            "!doc" : "Background settings."
          },
          "whiskerStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#whiskerStroke",
            "!doc" : "Whisker settings."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#markers",
            "!doc" : "Markers settings."
          },
          "trend" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#trend",
            "!doc" : "Trend settings."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#textIndent",
            "!doc" : "Text indent settings."
          },
          "emptyHatchFill" : {
            "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#emptyHatchFill",
            "!doc" : "Hatch fill settings."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fontColor",
            "!doc" : "Font color settings."
          },
          "adjustFontSize" : {
            "!type" : "fn(opt_adjustOrAdjustByWidth?: bool|[bool]|Object, opt_adjustByHeight?: bool) -> number|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#adjustFontSize",
            "!doc" : "Adjusting settings."
          },
          "fallingStroke" : {
            "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#fallingStroke",
            "!doc" : "Falling stroke settings."
          },
          "headers" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.StateSettings",
            "!url" : "8.3.0/anychart.core.StateSettings#headers",
            "!doc" : "Header labels settings."
          }
        }
      },
      "axisMarkers" : {
        "GanttLine" : {
          "!doc" : "Gantt line marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.GanttDateTime) -> +anychart.scales.GanttDateTime|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine#stroke",
              "!doc" : "Stroke settings."
            },
            "value" : {
              "!type" : "fn(opt_value?: number|+anychart.enums.GanttDateTimeMarkers|string) -> number|+anychart.enums.GanttDateTimeMarkers|string|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine#value",
              "!doc" : "Value settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine#layout",
              "!doc" : "Layout settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttLine",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttLine#isHorizontal",
              "!doc" : "Whether a line marker has horizontal layout."
            }
          }
        },
        "CircularRange" : {
          "!doc" : "Circular range.",
          "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange",
          "prototype" : {
            "axisIndex" : {
              "!type" : "fn(opt_index?: number) -> number|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#axisIndex",
              "!doc" : "Axis index."
            },
            "endSize" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#endSize",
              "!doc" : "Size for end range."
            },
            "startSize" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#startSize",
              "!doc" : "Size for start range."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "radius" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#radius",
              "!doc" : "Range radius."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "cornersRounding" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#cornersRounding",
              "!doc" : "The rounding of circular ranges"
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.GaugeSidePosition|string) -> +anychart.enums.GaugeSidePosition|string|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#position",
              "!doc" : "Range position."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_settings?: +anychart.graphics.vector.Fill|[+anychart.graphics.vector.GradientKey|string]|string) -> +anychart.graphics.vector.Fill|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "from" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#from",
              "!doc" : "Starting range value."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "to" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.CircularRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.CircularRange#to",
              "!doc" : "Ending range value."
            }
          }
        },
        "Line" : {
          "!doc" : "Line marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.Line",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Line#axis",
              "!doc" : "Axis settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_stroke?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#stroke",
              "!doc" : "Stroke settings."
            },
            "value" : {
              "!type" : "fn(opt_newValue?: number) -> number|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#value",
              "!doc" : "Value settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#layout",
              "!doc" : "Line marker layout."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Line#isHorizontal",
              "!doc" : "Whether a line marker has horizontal layout."
            }
          }
        },
        "CurrentPriceIndicator" : {
          "!doc" : "Stock current price indicator class.",
          "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "label" : {
              "!type" : "fn(opt_index?: string|number, opt_value?: bool|Object) -> +anychart.core.ui.LabelsFactory|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#label",
              "!doc" : "Label settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: number|+anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core#axisMarkers.CurrentPriceIndicator#axis",
              "!doc" : "Axis settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "valueField" : {
              "!type" : "fn(value: string) -> string",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#valueField",
              "!doc" : "Price indicator value field."
            },
            "risingStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#risingStroke",
              "!doc" : "Rising stroke settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#stroke",
              "!doc" : "Stroke settings."
            },
            "value" : {
              "!type" : "fn(opt_value?: +anychart.enums.PriceIndicatorDataSource|string|number|Date) -> +anychart.enums.PriceIndicatorDataSource|string|number|Date|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#value",
              "!doc" : "Price indicator value."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fallingLabel" : {
              "!type" : "fn(opt_index?: string|number, opt_value?: bool|Object) -> +anychart.core.ui.Label|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#fallingLabel",
              "!doc" : "Falling label settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "series" : {
              "!type" : "fn(opt_value?: number|+anychart.core.stock.series.Base) -> +anychart.core.stock.series.Base|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#series",
              "!doc" : "Target series for a price indicator."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "risingLabel" : {
              "!type" : "fn(opt_index?: string|number, opt_value?: bool|Object) -> +anychart.core.ui.Label|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#risingLabel",
              "!doc" : "Rising label settings."
            },
            "fallingStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axisMarkers.CurrentPriceIndicator",
              "!url" : "8.3.0/anychart.core.axisMarkers.CurrentPriceIndicator#fallingStroke",
              "!doc" : "Falling stroke settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.axisMarkers.",
        "GanttRange" : {
          "!doc" : "Gantt range marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.GanttDateTime) -> +anychart.scales.GanttDateTime|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#layout",
              "!doc" : "Layout settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "from" : {
              "!type" : "fn(opt_value?: number|+anychart.enums.GanttDateTimeMarkers|string) -> number|+anychart.enums.GanttDateTimeMarkers|string|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#from",
              "!doc" : "Starting marker value."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "to" : {
              "!type" : "fn(opt_value?: number|+anychart.enums.GanttDateTimeMarkers|string) -> number|+anychart.enums.GanttDateTimeMarkers|string|+anychart.core.axisMarkers.GanttRange",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#to",
              "!doc" : "Ending marker value."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttRange#isHorizontal",
              "!doc" : "Whether a range marker has horizontal layout."
            }
          }
        },
        "GanttText" : {
          "!doc" : "Gantt text marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.GanttText",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#width",
              "!doc" : "Text marker width."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#align",
              "!doc" : "Align settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#height",
              "!doc" : "Text marker height."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.GanttDateTime) -> +anychart.scales.GanttDateTime|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_right?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Padding|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#padding",
              "!doc" : "Padding settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#anchor",
              "!doc" : "Anchor settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "value" : {
              "!type" : "fn(opt_value?: number|+anychart.enums.GanttDateTimeMarkers|string) -> number|+anychart.enums.GanttDateTimeMarkers|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#value",
              "!doc" : "Text marker value settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#text",
              "!doc" : "Text settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#layout",
              "!doc" : "Layout settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#rotation",
              "!doc" : "Rotation settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#offsetX",
              "!doc" : "Text marker offset by x."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_settings?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#offsetY",
              "!doc" : "Text marker offset by y."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.GanttText#isHorizontal",
              "!doc" : "Whether a text marker has horizontal layout."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.GanttText",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "Range" : {
          "!doc" : "Range marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.Range",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Range#axis",
              "!doc" : "Axis settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#fill",
              "!doc" : "Fill settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#layout",
              "!doc" : "Layout settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "from" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#from",
              "!doc" : "Starting range marker value."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "to" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Range",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#to",
              "!doc" : "Ending range marker value."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Range#isHorizontal",
              "!doc" : "Whether a range marker has horizontal layout."
            }
          }
        },
        "!url" : "8.3.0/anychart.core.axisMarkers",
        "Text" : {
          "!doc" : "Text marker.",
          "!url" : "8.3.0/anychart.core.axisMarkers.Text",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#width",
              "!doc" : "Text marker width."
            },
            "align" : {
              "!type" : "fn(opt_value?: +anychart.enums.Align|string) -> +anychart.enums.Align|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#align",
              "!doc" : "Align settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#height",
              "!doc" : "Text marker height."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_right?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Padding|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#padding",
              "!doc" : "Padding settings."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.axisMarkers.Line",
              "!url" : "8.3.0/anychart.core#axisMarkers.Text#axis",
              "!doc" : "Axis settings."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "scaleRangeMode" : {
              "!type" : "fn(opt_mode?: string|+anychart.enums.ScaleRangeMode) -> string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#scaleRangeMode",
              "!doc" : "Scale range mode."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#anchor",
              "!doc" : "Anchor settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "value" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#value",
              "!doc" : "Text marker value."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#text",
              "!doc" : "Text settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "layout" : {
              "!type" : "fn(opt_value?: +anychart.enums.Layout|string) -> +anychart.enums.Layout|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#layout",
              "!doc" : "Layout settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "rotation" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#rotation",
              "!doc" : "Rotation settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#offsetX",
              "!doc" : "Text marker offset by x."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_settings?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#offsetY",
              "!doc" : "Text marker offset by y."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axisMarkers.Text#isHorizontal",
              "!doc" : "Whether a text marker has horizontal layout."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axisMarkers.Text",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        }
      },
      "Base" : {
        "!doc" : "Class implements all the work with consistency states.",
        "!url" : "8.3.0/anychart.core.Base",
        "prototype" : {
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          }
        }
      },
      "SeriesBase" : {
        "!doc" : "Base class for all base series.",
        "!url" : "8.3.0/anychart.core.SeriesBase",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#selected",
            "!doc" : "Selected state settings."
          },
          "a11y" : {
            "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.utils.SeriesA11y|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#a11y",
            "!doc" : "Accessibility setting."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "unselect" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
            "!doc" : "Deselects all selected points."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "selectionMode" : {
            "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
            "!doc" : "Selection mode."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "tooltip" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
            "!doc" : "Tooltip settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "id" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#id",
            "!doc" : "Series id."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#hovered",
            "!doc" : "Hovered state settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "normal" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#normal",
            "!doc" : "Normal state settings."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "name" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#name",
            "!doc" : "Series name settings."
          },
          "labels" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#labels",
            "!doc" : "Labels settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "select" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#select",
            "!doc" : "Select settings."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "getPoint" : {
            "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
            "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
            "!doc" : "Gets wrapped point by index."
          },
          "colorScale" : {
            "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
            "!doc" : "Color scale settings."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "meta" : {
            "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#meta",
            "!doc" : "Series meta data settings."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "unhover" : {
            "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
            "!doc" : "Removes hover from the series."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "hover" : {
            "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#hover",
            "!doc" : "Hover settings."
          },
          "legendItem" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
            "!doc" : "Legend item settings."
          },
          "data" : {
            "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#data",
            "!doc" : "Data settings."
          },
          "color" : {
            "!type" : "fn(value: string) -> string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#color",
            "!doc" : "Color settings."
          },
          "markers" : {
            "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesBase#markers",
            "!doc" : "Markers settings."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          }
        }
      },
      "MouseEvent" : {
        "!doc" : "Type definition for mouse event.",
        "!url" : "8.3.0/anychart.core.MouseEvent",
        "prototype" : {
          "metaKey" : {
            "!type" : "bool",
            "!doc" : "Meta key"
          },
          "altKey" : {
            "!type" : "bool",
            "!doc" : "ALT key"
          },
          "charCode" : {
            "!type" : "number",
            "!doc" : "Char code"
          },
          "currentTarget" : {
            "!type" : "+anychart.core.VisualBase|+anychart.graphics.vector.Element|+anychart.graphics.vector.Stage|Node",
            "!doc" : "Current target"
          },
          "relatedTarget" : {
            "!type" : "+anychart.core.VisualBase|+anychart.graphics.vector.Element|+anychart.graphics.vector.Stage|Node",
            "!doc" : "Related target"
          },
          "screenX" : {
            "!type" : "number",
            "!doc" : "Screen X"
          },
          "clientY" : {
            "!type" : "number",
            "!doc" : "Client Y"
          },
          "clientX" : {
            "!type" : "number",
            "!doc" : "Client X"
          },
          "ctrlKey" : {
            "!type" : "bool",
            "!doc" : "CTRL key"
          },
          "shiftKey" : {
            "!type" : "bool",
            "!doc" : "Shift key"
          },
          "domTarget" : {
            "!type" : "+anychart.graphics.vector.Element|+anychart.graphics.vector.Stage|Node",
            "!doc" : "DOM target"
          },
          "platformModifierKey" : {
            "!type" : "bool",
            "!doc" : "Platform modifier key"
          },
          "relatedDomTarget" : {
            "!type" : "+anychart.graphics.vector.Element|+anychart.graphics.vector.Stage|Node",
            "!doc" : "Related dom target"
          },
          "type" : {
            "!type" : "+anychart.graphics.events.EventType",
            "!doc" : "Event type"
          },
          "target" : {
            "!type" : "+anychart.core.VisualBase|+anychart.graphics.vector.Element|+anychart.graphics.vector.Stage|Node",
            "!doc" : "Target"
          },
          "offsetX" : {
            "!type" : "number",
            "!doc" : "Offset by X"
          },
          "offsetY" : {
            "!type" : "number",
            "!doc" : "Offset by Y"
          },
          "keyCode" : {
            "!type" : "number",
            "!doc" : "Key code"
          },
          "screenY" : {
            "!type" : "number",
            "!doc" : "Screen Y"
          },
          "button" : {
            "!type" : "number",
            "!doc" : "Button"
          }
        }
      },
      "SeparateChart" : {
        "!doc" : "Base class for all charts, contains the margins, the background and the title.",
        "!url" : "8.3.0/anychart.core.SeparateChart",
        "prototype" : {
          "toHtmlTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toHtmlTable",
            "!doc" : "Creates and returns a chart as HTML table."
          },
          "getPngBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPngBase64String",
            "!doc" : "Returns PNG as base64 string."
          },
          "a11y" : {
            "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.utils.ChartA11y|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#a11y",
            "!doc" : "Accessibility setting."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "shareWithLinkedIn" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithLinkedIn",
            "!doc" : "Opens LinkedIn sharing dialog."
          },
          "interactivity" : {
            "!type" : "fn(opt_value?: Object|+anychart.enums.HoverMode|string) -> +anychart.core.utils.Interactivity|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.SeparateChart#interactivity",
            "!doc" : "Interactivity settings."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "getJpgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
            "!url" : "8.3.0/anychart.core.Chart#getJpgBase64String",
            "!doc" : "Returns JPG as base64 string."
          },
          "shareAsPng" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPng",
            "!doc" : "Shares a chart as a PNG file and returns a link to the shared image."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "getPdfBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPdfBase64String",
            "!doc" : "Returns PDF as base64 string."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "legend" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Legend|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.SeparateChart#legend",
            "!doc" : "Legend settings."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "shareAsJpg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsJpg",
            "!doc" : "Shares a chart as a JPG file and returns a link to the shared image."
          },
          "shareWithFacebook" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_link?: string, opt_name?: string, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithFacebook",
            "!doc" : "Opens Facebook sharing dialog."
          },
          "shareWithTwitter" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.core.Chart#shareWithTwitter",
            "!doc" : "Opens Twitter sharing dialog."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "shareAsPdf" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPdf",
            "!doc" : "Shares a chart as a PDF file and returns a link to the shared image."
          },
          "shareAsSvg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsSvg",
            "!doc" : "Shares a chart as a SVG file and returns a link to the shared image."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "getSvgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
            "!url" : "8.3.0/anychart.core.Chart#getSvgBase64String",
            "!doc" : "Returns SVG as base64 string."
          },
          "shareWithPinterest" : {
            "!type" : "fn(opt_linkOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithPinterest",
            "!doc" : "Opens Pinterest sharing dialog."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toA11yTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toA11yTable",
            "!doc" : "Creates and returns the chart represented as an invisible HTML table."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "mekko" : {
        "series" : {
          "Mekko" : {
            "!doc" : "Mekko Series class.",
            "!url" : "8.3.0/anychart.core.mekko.series.Mekko",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.mekko.series.Mekko#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.mekko.series.Mekko",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "!doc" : "Namespace anychart.core.mekko.series.",
          "!url" : "8.3.0/anychart.core.mekko.series"
        },
        "!doc" : "Namespace anychart.core.mekko.",
        "!url" : "8.3.0/anychart.core.mekko"
      },
      "gauge" : {
        "pointers" : {
          "Marker" : {
            "!doc" : "Marker pointer class.",
            "!url" : "8.3.0/anychart.core.gauge.pointers.Marker",
            "prototype" : {
              "axisIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#axisIndex",
                "!doc" : "Axis index."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#dataIndex",
                "!doc" : "Data index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "radius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Marker#radius",
                "!doc" : "Marker radius."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "position" : {
                "!type" : "fn(opt_value?: +anychart.enums.GaugeSidePosition|string) -> +anychart.enums.GaugeSidePosition|string|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Marker#position",
                "!doc" : "Marker position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Marker#type",
                "!doc" : "Marker type."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "size" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Marker#size",
                "!doc" : "Marker size."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.gauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              }
            }
          },
          "Knob" : {
            "!doc" : "Knob pointer class.",
            "!url" : "8.3.0/anychart.core.gauge.pointers.Knob",
            "prototype" : {
              "axisIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#axisIndex",
                "!doc" : "Axis index."
              },
              "bottomRatio" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#bottomRatio",
                "!doc" : "Bottom ratio."
              },
              "topRadius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#topRadius",
                "!doc" : "Top radius."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#dataIndex",
                "!doc" : "Data index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "verticesCount" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#verticesCount",
                "!doc" : "Vertices count."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "topRatio" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#topRatio",
                "!doc" : "Top ratio."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "bottomRadius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#bottomRadius",
                "!doc" : "Bottom radius."
              },
              "verticesCurvature" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Knob#verticesCurvature",
                "!doc" : "Vertices curvature."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.gauge.pointers.Knob",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              }
            }
          },
          "Needle" : {
            "!doc" : "Needle pointer class.",
            "!url" : "8.3.0/anychart.core.gauge.pointers.Needle",
            "prototype" : {
              "axisIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#axisIndex",
                "!doc" : "Axis index."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#dataIndex",
                "!doc" : "Data index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "endRadius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#endRadius",
                "!doc" : "End radius settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "startWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#startWidth",
                "!doc" : "Start width."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "endWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#endWidth",
                "!doc" : "End width settings."
              },
              "middleWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#middleWidth",
                "!doc" : "Middle width settings."
              },
              "middleRadius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#middleRadius",
                "!doc" : "Middle radius settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "startRadius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Needle#startRadius",
                "!doc" : "Start radius settings."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.gauge.pointers.Needle",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              }
            }
          },
          "Base" : {
            "!doc" : "Base pointer class for all pointers.",
            "!url" : "8.3.0/anychart.core.gauge.pointers.Base",
            "prototype" : {
              "axisIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#axisIndex",
                "!doc" : "Axis index."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#dataIndex",
                "!doc" : "Data index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              }
            }
          },
          "Bar" : {
            "!doc" : "Bar pointer class.",
            "!url" : "8.3.0/anychart.core.gauge.pointers.Bar",
            "prototype" : {
              "axisIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#axisIndex",
                "!doc" : "Axis index."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Bar#width",
                "!doc" : "Width settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#dataIndex",
                "!doc" : "Data index."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "radius" : {
                "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Bar#radius",
                "!doc" : "Radius settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "position" : {
                "!type" : "fn(opt_value?: +anychart.enums.GaugeSidePosition|string) -> +anychart.enums.GaugeSidePosition|string|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Bar#position",
                "!doc" : "Position settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.gauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.gauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              }
            }
          },
          "!doc" : "Namespace anychart.core.gauge.pointers.",
          "!url" : "8.3.0/anychart.core.gauge.pointers"
        },
        "Cap" : {
          "!doc" : "Cap class.",
          "!url" : "8.3.0/anychart.core.gauge.Cap",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "radius" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.gauge.Cap#radius",
              "!doc" : "Cap radius settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.gauge.Cap#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.gauge.Cap#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.gauge.Cap",
              "!url" : "8.3.0/anychart.core.gauge.Cap#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "!doc" : "Namespace anychart.core.gauge.",
        "!url" : "8.3.0/anychart.core.gauge"
      },
      "scatter" : {
        "series" : {
          "Line" : {
            "!doc" : "Define Line series type.",
            "!url" : "8.3.0/anychart.core.scatter.series.Line",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(yValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#clip",
                "!doc" : "Clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(xValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Line#connectMissingPoints",
                "!doc" : "ConnectMissingPoints mode."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.Line#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.scatter.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Marker" : {
            "!doc" : "Define Marker series type.",
            "!url" : "8.3.0/anychart.core.scatter.series.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(yValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#clip",
                "!doc" : "Clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(xValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.scatter.series.Marker#size",
                "!doc" : "Marker size settings."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Bubble" : {
            "!doc" : "Define Bubble series type.",
            "!url" : "8.3.0/anychart.core.scatter.series.Bubble",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "negativeFill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#negativeFill",
                "!doc" : "Negative fill settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "displayNegative" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#displayNegative",
                "!doc" : "Whether to display negative value."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(yValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#clip",
                "!doc" : "Clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(xValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "negativeHatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#negativeHatchFill",
                "!doc" : "Negative hatch fill settings."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "negativeStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#negativeStroke",
                "!doc" : "Negative stroke settings."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.Bubble#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.scatter.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all scatter series.",
            "!url" : "8.3.0/anychart.core.scatter.series.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(yValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#clip",
                "!doc" : "Clip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(xValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "BaseWithMarkers" : {
            "!doc" : "A base for all series except marker series.",
            "!url" : "8.3.0/anychart.core.scatter.series.BaseWithMarkers",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(yValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#clip",
                "!doc" : "Clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(xValue: +Object) -> number",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.ScatterBase|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.scatter.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.scatter.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.scatter.series.",
          "!url" : "8.3.0/anychart.core.scatter.series"
        },
        "!doc" : "Namespace anychart.core.scatter.",
        "!url" : "8.3.0/anychart.core.scatter"
      },
      "!url" : "8.3.0/anychart.core",
      "axes" : {
        "Radar" : {
          "!doc" : "Radar axis class.",
          "!url" : "8.3.0/anychart.core.axes.Radar",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.Base|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Radar#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.axes.Radar#ticks",
              "!doc" : "Ticks settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Polar" : {
          "!doc" : "Polar axis class.",
          "!url" : "8.3.0/anychart.core.axes.Polar",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.ScatterBase|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.ScatterBase|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Polar#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#fill",
              "!doc" : "Fill settings for the polar axis."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#ticks",
              "!doc" : "Ticks settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Polar",
              "!url" : "8.3.0/anychart.core.axes.Polar#minorTicks",
              "!doc" : "Minor ticks settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.axes.",
        "MapSettings" : {
          "!doc" : "Map axes settings class.",
          "!url" : "8.3.0/anychart.core.axes.MapSettings",
          "prototype" : {
            "right" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.axes.Map|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#right",
              "!doc" : "Right axis settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.axes.Map|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#top",
              "!doc" : "Top axis settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#enabled",
              "!doc" : "Disable or enable axis."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.MapTicks|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#title",
              "!doc" : "Title settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.MapTicks|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.axes.Map|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#bottom",
              "!doc" : "Bottom axis settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "left" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.axes.Map|+anychart.core.axes.MapSettings",
              "!url" : "8.3.0/anychart.core.axes.MapSettings#left",
              "!doc" : "Left axis settings."
            }
          }
        },
        "Ticks" : {
          "!doc" : "Axis ticks class.",
          "!url" : "8.3.0/anychart.core.axes.Ticks",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Ticks",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.SidePosition|string) -> +anychart.enums.SidePosition|string|+anychart.core.axes.Ticks",
              "!url" : "8.3.0/anychart.core.axes.Ticks#position",
              "!doc" : "Ticks position."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Ticks",
              "!url" : "8.3.0/anychart.core.axes.Ticks#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "length" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Ticks",
              "!url" : "8.3.0/anychart.core.axes.Ticks#length",
              "!doc" : "Ticks length."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Ticks",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "StockDateTime" : {
          "!doc" : "Stock date time axis class.",
          "!url" : "8.3.0/anychart.core.axes.StockDateTime",
          "prototype" : {
            "height" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#height",
              "!doc" : "Axis height."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.StockLabelsOverlapMode|string) -> +anychart.enums.StockLabelsOverlapMode|string|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#overlapMode",
              "!doc" : "Overlap mode."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#ticks",
              "!doc" : "Ticks settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.Background|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#background",
              "!doc" : "Background settings."
            },
            "showHelperLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.StockDateTime",
              "!url" : "8.3.0/anychart.core.axes.StockDateTime#showHelperLabel",
              "!doc" : "Drawing helper label."
            }
          }
        },
        "Map" : {
          "!doc" : "Map axis class.",
          "!url" : "8.3.0/anychart.core.axes.Map",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.MapTicks|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#title",
              "!doc" : "Title settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.MapTicks|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Map",
              "!url" : "8.3.0/anychart.core.axes.Map#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            }
          }
        },
        "MapTicks" : {
          "!doc" : "Map axis ticks class.",
          "!url" : "8.3.0/anychart.core.axes.MapTicks",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.MapTicks",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.SidePosition|string) -> +anychart.enums.SidePosition|string|+anychart.core.axes.MapTicks",
              "!url" : "8.3.0/anychart.core.axes.MapTicks#position",
              "!doc" : "Ticks position."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.MapTicks",
              "!url" : "8.3.0/anychart.core.axes.MapTicks#stroke",
              "!doc" : "Ticks stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "length" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.axes.MapTicks",
              "!url" : "8.3.0/anychart.core.axes.MapTicks#length",
              "!doc" : "Ticks length."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.MapTicks",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "!url" : "8.3.0/anychart.core.axes",
        "Linear" : {
          "!doc" : "Linear axis class.",
          "!url" : "8.3.0/anychart.core.axes.Linear",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#width",
              "!doc" : "Axis width."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "staggerMaxLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMaxLines",
              "!doc" : "Maximum stagger lines."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "staggerMode" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMode",
              "!doc" : "Stagger mode state."
            },
            "staggerLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerLines",
              "!doc" : "Stagger lines."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#title",
              "!doc" : "Title settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getPixelBounds",
              "!doc" : "Returns pixel bounds of the axis."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axes.Linear#isHorizontal",
              "!doc" : "Whether an axis is horizontal."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.axes.Linear",
              "!url" : "8.3.0/anychart.core.axes.Linear#orientation",
              "!doc" : "Axis orientation."
            }
          }
        },
        "LinearGauge" : {
          "!doc" : "Linear Gauge axis class.",
          "!url" : "8.3.0/anychart.core.axes.LinearGauge",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#width",
              "!doc" : "Axis width."
            },
            "offset" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.LinearGauge#offset",
              "!doc" : "Offset settings"
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "getRemainingBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.axes.Linear#getRemainingBounds",
              "!doc" : "Returns remaining parent bounds to use elsewhere."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "staggerMaxLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMaxLines",
              "!doc" : "Maximum stagger lines."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "staggerMode" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerMode",
              "!doc" : "Stagger mode state."
            },
            "staggerLines" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#staggerLines",
              "!doc" : "Stagger lines."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#ticks",
              "!doc" : "Ticks settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#title",
              "!doc" : "Title settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.axes.Linear#isHorizontal",
              "!doc" : "Whether an axis is horizontal."
            },
            "orientation" : {
              "!type" : "fn(opt_value?: +anychart.enums.Orientation|string) -> +anychart.enums.Orientation|string|+anychart.core.axes.LinearGauge",
              "!url" : "8.3.0/anychart.core.axes.Linear#orientation",
              "!doc" : "Axis orientation."
            }
          }
        },
        "Circular" : {
          "!doc" : "Circular axis class.",
          "!url" : "8.3.0/anychart.core.axes.Circular",
          "prototype" : {
            "sweepAngle" : {
              "!type" : "fn(opt_value?: string|number) -> number|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#sweepAngle",
              "!doc" : "Sweep angle."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#width",
              "!doc" : "Axis width."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.enums.GaugeScaleTypes|string|+anychart.scales.Linear|Object) -> +anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "startAngle" : {
              "!type" : "fn(opt_value?: string|number) -> number|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#startAngle",
              "!doc" : "Start angle settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "radius" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#radius",
              "!doc" : "Axis radius."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string|bool) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "cornersRounding" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#cornersRounding",
              "!doc" : "Rounding of corners"
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#drawLastLabel",
              "!doc" : "Drawing of the last label"
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#fill",
              "!doc" : "Fill settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.CircularTicks|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#ticks",
              "!doc" : "Ticks settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.CircularTicks|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Circular",
              "!url" : "8.3.0/anychart.core.axes.Circular#drawFirstLabel",
              "!doc" : "Drawing of the first label"
            }
          }
        },
        "CircularTicks" : {
          "!doc" : "Axis ticks class.",
          "!url" : "8.3.0/anychart.core.axes.CircularTicks",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "position" : {
              "!type" : "fn(opt_value?: +anychart.enums.SidePosition|string) -> +anychart.enums.SidePosition|string|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#position",
              "!doc" : "Ticks position."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#fill",
              "!doc" : "Fill settings."
            },
            "length" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#length",
              "!doc" : "Ticks length."
            },
            "type" : {
              "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|function(path:+anychart.graphics.vector.Path, x:number, y:number, radius:number)) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#type",
              "!doc" : "Ticks type."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.axes.CircularTicks",
              "!url" : "8.3.0/anychart.core.axes.CircularTicks#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Radial" : {
          "!doc" : "Axis Class.",
          "!url" : "8.3.0/anychart.core.axes.Radial",
          "prototype" : {
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "overlapMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.LabelsOverlapMode|string) -> +anychart.enums.LabelsOverlapMode|string|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#overlapMode",
              "!doc" : "Overlap mode for labels."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#stroke",
              "!doc" : "Stroke settings."
            },
            "drawLastLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#drawLastLabel",
              "!doc" : "Drawing of the last label."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "minorLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#minorLabels",
              "!doc" : "Minor labels settings."
            },
            "ticks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#ticks",
              "!doc" : "Ticks settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "minorTicks" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.axes.Ticks|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#minorTicks",
              "!doc" : "Minor ticks settings."
            },
            "drawFirstLabel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.axes.Radial",
              "!url" : "8.3.0/anychart.core.axes.Radial#drawFirstLabel",
              "!doc" : "Drawing of the first label."
            }
          }
        }
      },
      "Chart" : {
        "!doc" : "Base class for all charts, contains the margins, the background and the title.",
        "!url" : "8.3.0/anychart.core.Chart",
        "prototype" : {
          "toHtmlTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toHtmlTable",
            "!doc" : "Creates and returns a chart as HTML table."
          },
          "getPngBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPngBase64String",
            "!doc" : "Returns PNG as base64 string."
          },
          "a11y" : {
            "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.utils.ChartA11y|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#a11y",
            "!doc" : "Accessibility setting."
          },
          "width" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
            "!doc" : "Width settings."
          },
          "shareWithLinkedIn" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithLinkedIn",
            "!doc" : "Opens LinkedIn sharing dialog."
          },
          "right" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
            "!doc" : "Right bound settings."
          },
          "top" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
            "!doc" : "Top bound settings."
          },
          "saveAsCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsCsv",
            "!doc" : "Saves chart data as a CSV file."
          },
          "getSelectedPoints" : {
            "!type" : "fn() -> [+anychart.core.Point]",
            "!url" : "8.3.0/anychart.core.Chart#getSelectedPoints",
            "!doc" : "Getter for the selected points."
          },
          "selectMarqueeStroke" : {
            "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeStroke",
            "!doc" : "Stroke settings."
          },
          "minHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
            "!doc" : "Minimum height."
          },
          "height" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
            "!doc" : "Height settings."
          },
          "margin" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#margin",
            "!doc" : "Margin settings."
          },
          "getJpgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool)",
            "!url" : "8.3.0/anychart.core.Chart#getJpgBase64String",
            "!doc" : "Returns JPG as base64 string."
          },
          "shareAsPng" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPng",
            "!doc" : "Shares a chart as a PNG file and returns a link to the shared image."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "getPdfBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number)",
            "!url" : "8.3.0/anychart.core.Chart#getPdfBase64String",
            "!doc" : "Returns PDF as base64 string."
          },
          "tooltip" : {
            "!type" : "fn(opt_tooltipSettings?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#tooltip",
            "!doc" : "Tooltip settings."
          },
          "label" : {
            "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#label",
            "!doc" : "Label settings."
          },
          "saveAsPng" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPng",
            "!doc" : "Saves the current chart as PNG image."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "saveAsXlsx" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXlsx",
            "!doc" : "Saves chart data as an Excel document."
          },
          "padding" : {
            "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#padding",
            "!doc" : "Padding settings."
          },
          "saveAsJson" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJson",
            "!doc" : "Saves chart config as JSON document."
          },
          "exports" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Exports|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#exports",
            "!doc" : "Exports settings"
          },
          "saveAsPdf" : {
            "!type" : "fn(opt_paperSizeOrWidthOrOptions?: number|string|Object, opt_landscape?: bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsPdf",
            "!doc" : "Saves the current chart as PDF image."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "maxHeight" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
            "!doc" : "Maximum height."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "inMarquee" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Chart#inMarquee",
            "!doc" : "Gets marquee process running value."
          },
          "contextMenu" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.ui.ContextMenu|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#contextMenu",
            "!doc" : "Context menu settings."
          },
          "minWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
            "!doc" : "Minimum width."
          },
          "noData" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.NoDataSettings|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#noData",
            "!doc" : "NoData settings."
          },
          "saveAsSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsSvg",
            "!doc" : "Saves the current chart as SVG image."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "animation" : {
            "!type" : "fn(opt_value?: bool|Object, duration: number) -> +anychart.core.utils.Animation|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#animation",
            "!doc" : "Animation settings"
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "saveAsJpg" : {
            "!type" : "fn(opt_width?: number|Object, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsJpg",
            "!doc" : "Saves the current chart as JPEG image."
          },
          "selectMarqueeFill" : {
            "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#selectMarqueeFill",
            "!doc" : "Select marquee fill settings."
          },
          "getStat" : {
            "!type" : "fn(opt_key?: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#getStat",
            "!doc" : "Getter for a statistical value by the key."
          },
          "globalToLocal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#globalToLocal",
            "!doc" : "Converts the global coordinates to local coordinates."
          },
          "shareAsJpg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_width?: number, opt_height?: number, opt_quality?: number, opt_forceTransparentWhite?: bool, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsJpg",
            "!doc" : "Shares a chart as a JPG file and returns a link to the shared image."
          },
          "shareWithFacebook" : {
            "!type" : "fn(opt_captionOrOptions?: string|Object, opt_link?: string, opt_name?: string, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithFacebook",
            "!doc" : "Opens Facebook sharing dialog."
          },
          "shareWithTwitter" : {
            "!type" : "fn()",
            "!url" : "8.3.0/anychart.core.Chart#shareWithTwitter",
            "!doc" : "Opens Twitter sharing dialog."
          },
          "title" : {
            "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#title",
            "!doc" : "Title settings."
          },
          "toJson" : {
            "!type" : "fn(opt_stringify?: bool) -> Object|string",
            "!url" : "8.3.0/anychart.core.Chart#toJson",
            "!doc" : "Return chart configuration as JSON object or string."
          },
          "saveAsXml" : {
            "!type" : "fn(opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#saveAsXml",
            "!doc" : "Saves chart config as XML document."
          },
          "draw" : {
            "!type" : "fn(opt_async?: bool) -> +anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#draw",
            "!doc" : "Drawing of the chart."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "autoRedraw" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#autoRedraw",
            "!doc" : "Redraw chart after changes or not."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "bounds" : {
            "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
            "!doc" : "Bounds settings."
          },
          "bottom" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
            "!doc" : "Bottom bound settings."
          },
          "getPixelBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
            "!doc" : "Returns pixel bounds."
          },
          "shareAsPdf" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: number|string, opt_landscapeOrWidth?: number|bool, opt_x?: number, opt_y?: number, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsPdf",
            "!doc" : "Shares a chart as a PDF file and returns a link to the shared image."
          },
          "shareAsSvg" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_asBase64?: bool, opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string, opt_filename?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareAsSvg",
            "!doc" : "Shares a chart as a SVG file and returns a link to the shared image."
          },
          "maxWidth" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
            "!doc" : "Maximum width."
          },
          "getSvgBase64String" : {
            "!type" : "fn(onSuccessOrOptions: fn()|Object, opt_onError?: fn(), opt_paperSizeOrWidth?: string|number, opt_landscapeOrHeight?: bool|string)",
            "!url" : "8.3.0/anychart.core.Chart#getSvgBase64String",
            "!doc" : "Returns SVG as base64 string."
          },
          "shareWithPinterest" : {
            "!type" : "fn(opt_linkOrOptions?: string|Object, opt_description?: string)",
            "!url" : "8.3.0/anychart.core.Chart#shareWithPinterest",
            "!doc" : "Opens Pinterest sharing dialog."
          },
          "toSvg" : {
            "!type" : "fn(opt_value?: string|Object|number, opt_value?: bool|number) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toSvg",
            "!doc" : "Returns SVG string."
          },
          "startSelectMarquee" : {
            "!type" : "fn(opt_repeat?: bool) -> +anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#startSelectMarquee",
            "!doc" : "Starts select marquee drawing."
          },
          "cancelMarquee" : {
            "!type" : "fn() -> +anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#cancelMarquee",
            "!doc" : "Stops current marquee action if any."
          },
          "background" : {
            "!type" : "fn(opt_value?: Object) -> +anychart.core.ui.Background|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#background",
            "!doc" : "Background settings."
          },
          "toA11yTable" : {
            "!type" : "fn(opt_title?: string, opt_asString?: bool) -> Element|string",
            "!url" : "8.3.0/anychart.core.Chart#toA11yTable",
            "!doc" : "Creates and returns the chart represented as an invisible HTML table."
          },
          "toCsv" : {
            "!type" : "fn(opt_chartDataExportMode?: +anychart.enums.ChartDataExportMode|string, opt_csvSettings?: +Object) -> string",
            "!url" : "8.3.0/anychart.core.Chart#toCsv",
            "!doc" : "Returns CSV string with the chart data."
          },
          "left" : {
            "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
            "!doc" : "Left bound settings."
          },
          "container" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|string|Element) -> +anychart.graphics.vector.Layer|+anychart.graphics.vector.Stage|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#container",
            "!doc" : "Getter for the element's container."
          },
          "credits" : {
            "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.ChartCredits|+anychart.core.Chart",
            "!url" : "8.3.0/anychart.core.Chart#credits",
            "!doc" : "Credits settings"
          },
          "localToGlobal" : {
            "!type" : "fn(xCoord: number, yCoord: number) -> +Object",
            "!url" : "8.3.0/anychart.core.Chart#localToGlobal",
            "!doc" : "Converts the local coordinates to global coordinates."
          },
          "toXml" : {
            "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
            "!url" : "8.3.0/anychart.core.Chart#toXml",
            "!doc" : "Return chart configuration as XML string or XMLNode."
          }
        }
      },
      "BubblePoint" : {
        "!doc" : "Point representing bubble points that belongs to cartesian or scatter chart.",
        "!url" : "8.3.0/anychart.core.BubblePoint",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.BubblePoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#selected",
            "!doc" : "Select point state."
          },
          "getStackZero" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackZero",
            "!doc" : "Returns stack zero of the point."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "getStackValue" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackValue",
            "!doc" : "Returns stack value of the point."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.BubblePoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#hovered",
            "!doc" : "Hover point state."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "getSeries" : {
            "!type" : "fn() -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getSeries",
            "!doc" : "Getter for series which current point belongs to."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.BubblePoint",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          },
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.SeriesPoint#exists",
            "!doc" : "Checks if the point with the given index exists in a dataset."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          },
          "getPixelRadius" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.BubblePoint#getPixelRadius",
            "!doc" : "Getter for the bubble point radius."
          }
        }
      },
      "linearGauge" : {
        "pointers" : {
          "Marker" : {
            "!doc" : "Marker pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string) -> string|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Marker#type",
                "!doc" : "Marker type settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Marker",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "Led" : {
            "!doc" : "Led pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "gap" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led#gap",
                "!doc" : "Gap settings."
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "count" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led#count",
                "!doc" : "Interval settings."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "dimmer" : {
                "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led#dimmer",
                "!doc" : "Dimmer settings."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led#colorScale",
                "!doc" : "Color scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "size" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Led#size",
                "!doc" : "Size settings."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Led",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for pointers.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "Thermometer" : {
            "!doc" : "Thermometer pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Thermometer",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "bulbPadding" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Thermometer#bulbPadding",
                "!doc" : "Bulb padding settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "bulbRadius" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Thermometer#bulbRadius",
                "!doc" : "Bulb radius settings."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Thermometer",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "Bar" : {
            "!doc" : "Bar pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Bar",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Bar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "RangeBar" : {
            "!doc" : "Range bar pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.RangeBar",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.RangeBar",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              }
            }
          },
          "Tank" : {
            "!doc" : "Tank pointer class.",
            "!url" : "8.3.0/anychart.core.linearGauge.pointers.Tank",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#width",
                "!doc" : "Width settings"
              },
              "unselect" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unselect",
                "!doc" : "Deselects a pointer."
              },
              "offset" : {
                "!type" : "fn(opt_value?: string|number) -> string|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#offset",
                "!doc" : "Offset settings."
              },
              "scale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#scale",
                "!doc" : "Scale settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "dataIndex" : {
                "!type" : "fn(opt_index?: number) -> number|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#dataIndex",
                "!doc" : "Pointer name settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_id?: string|number) -> +anychart.core.gauge.pointers.Base",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#id",
                "!doc" : "Pointer id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#name",
                "!doc" : "Pointer name settings."
              },
              "emptyFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|string|fn(), opt_opacity?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Tank#emptyFill",
                "!doc" : "Fill settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|fn()|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: +anychart.core.ui.LabelsFactory|Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_event?: +anychart.core.MouseEvent) -> +anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#select",
                "!doc" : "Selects a pointer."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#fill",
                "!doc" : "Fill settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#unhover",
                "!doc" : "Removes hover from the pointer."
              },
              "hover" : {
                "!type" : "fn() -> +anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#hover",
                "!doc" : "Hovers a pointer."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "getGauge" : {
                "!type" : "fn() -> +anychart.charts.LinearGauge",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#getGauge",
                "!doc" : "Getter for the gauge."
              },
              "data" : {
                "!type" : "fn(opt_data?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#data",
                "!doc" : "Data for pointers."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Base#color",
                "!doc" : "Color settings."
              },
              "emptyHatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|bool|+anychart.core.linearGauge.pointers.Tank",
                "!url" : "8.3.0/anychart.core.linearGauge.pointers.Tank#emptyHatchFill",
                "!doc" : "Hatch fill settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.linearGauge.pointers.",
          "!url" : "8.3.0/anychart.core.linearGauge.pointers"
        },
        "ScaleBar" : {
          "!doc" : "Base class for scale bar.",
          "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar",
          "prototype" : {
            "colorScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#colorScale",
              "!doc" : "Color scale settings."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#fill",
              "!doc" : "Fill settings."
            },
            "from" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#from",
              "!doc" : "Starting range value."
            },
            "offset" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#offset",
              "!doc" : "Offset settings."
            },
            "points" : {
              "!type" : "fn(opt_value?: [+anychart.core.linearGauge.ScaleBar.ControlPoint]) -> [+anychart.core.linearGauge.ScaleBar.ControlPoint]|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#points",
              "!doc" : "Points settings."
            },
            "scale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base) -> +anychart.scales.Base",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#scale",
              "!doc" : "Scale settings."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#stroke",
              "!doc" : "Stroke settings."
            },
            "to" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#to",
              "!doc" : "Ending range value."
            },
            "width" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.linearGauge.ScaleBar",
              "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar#width",
              "!doc" : "Width settings."
            }
          },
          "ControlPoint" : {
            "!doc" : "Control point type definition.",
            "!url" : "8.3.0/anychart.core.linearGauge.ScaleBar.ControlPoint",
            "prototype" : {
              "height" : {
                "!type" : "number",
                "!doc" : "Scale bar height ratio (from 0 to 1)."
              },
              "left" : {
                "!type" : "number",
                "!doc" : "Scale bar left ratio (from 0 to 1)."
              },
              "right" : {
                "!type" : "number",
                "!doc" : "Scale bar right ratio (from 0 to 1)."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.linearGauge.",
        "!url" : "8.3.0/anychart.core.linearGauge"
      },
      "grids" : {
        "MapSettings" : {
          "!doc" : "Map grid settings.",
          "!url" : "8.3.0/anychart.core.grids.MapSettings",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "minorStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#minorStroke",
              "!doc" : "Stroke settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "vertical" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.grids.Map|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#vertical",
              "!doc" : "Vertical grid settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#enabled",
              "!doc" : "Disable or enable grids."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.core.grids.MapSettings|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#fill",
              "!doc" : "Odd fill settings."
            },
            "horizontal" : {
              "!type" : "fn(opt_value?: bool|Object) -> +anychart.core.grids.Map|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#horizontal",
              "!doc" : "Horizontal grid settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.enums.MapGridZIndex|string|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#zIndex",
              "!doc" : "Z-index setting."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#palette",
              "!doc" : "Palette settings."
            },
            "drawFirstLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.MapSettings",
              "!url" : "8.3.0/anychart.core.grids.MapSettings#drawFirstLine",
              "!doc" : "Drawing first line."
            }
          }
        },
        "Linear" : {
          "!doc" : "Linear grid.",
          "!url" : "8.3.0/anychart.core.grids.Linear",
          "prototype" : {
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#isMinor",
              "!doc" : "Minor grid or not."
            },
            "scale" : {
              "!type" : "fn(opt_value?: Object|+anychart.enums.ScaleTypes|string|+anychart.scales.Base) -> +anychart.scales.Base|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Linear) -> +anychart.core.axes.Linear|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: +anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#palette",
              "!doc" : "Palette settings."
            },
            "drawFirstLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Linear",
              "!url" : "8.3.0/anychart.core.grids.Linear#drawFirstLine",
              "!doc" : "Drawing first line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Linear#isHorizontal",
              "!doc" : "Whether an grid has horizontal layout."
            }
          }
        },
        "Radar" : {
          "!doc" : "Radar grid.",
          "!url" : "8.3.0/anychart.core.grids.Radar",
          "prototype" : {
            "isRadial" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Radar#isRadial",
              "!doc" : "Whether a grid has the radial layout."
            },
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#isMinor",
              "!doc" : "Minor grid or not."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Radar|+anychart.core.axes.Radial) -> +anychart.core.axes.Radar|+anychart.core.axes.Radial|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.grids.Radar#stroke",
              "!doc" : "Stroke fill settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.core.grids.Radar|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Radar#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.grids.Radar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Radar#palette",
              "!doc" : "Palette settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Polar" : {
          "!doc" : "Polar grid.",
          "!url" : "8.3.0/anychart.core.grids.Polar",
          "prototype" : {
            "isRadial" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Polar#isRadial",
              "!doc" : "Whether a grid has the radial layout."
            },
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#isMinor",
              "!doc" : "Minor grid or not."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.Polar|+anychart.core.axes.Radial) -> +anychart.core.axes.Polar|+anychart.core.axes.Radial|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.enums.ScaleTypes|string|Object) -> +anychart.scales.Linear|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#xScale",
              "!doc" : "X-scale settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.grids.Polar#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.core.grids.Polar|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Polar#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.grids.Polar",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Polar#palette",
              "!doc" : "Palette settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "Stock" : {
          "!doc" : "Stock grid.",
          "!url" : "8.3.0/anychart.core.grids.Stock",
          "prototype" : {
            "isMinor" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#isMinor",
              "!doc" : "Minor grid or not."
            },
            "scale" : {
              "!type" : "fn(opt_value?: Object|+anychart.scales.Base|+anychart.scales.StockScatterDateTime) -> +anychart.scales.Base|+anychart.scales.StockScatterDateTime|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#scale",
              "!doc" : "Scale settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "axis" : {
              "!type" : "fn(opt_value?: +anychart.core.axes.StockDateTime|+anychart.core.axes.Linear) -> +anychart.core.axes.StockDateTime|+anychart.core.axes.Linear|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#axis",
              "!doc" : "Axis settings."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#stroke",
              "!doc" : "Stroke fill settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.grids.Stock|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Stock#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Stock#palette",
              "!doc" : "Palette settings."
            },
            "drawFirstLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Stock",
              "!url" : "8.3.0/anychart.core.grids.Stock#drawFirstLine",
              "!doc" : "Drawing first line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "isHorizontal" : {
              "!type" : "fn() -> bool",
              "!url" : "8.3.0/anychart.core.grids.Stock#isHorizontal",
              "!doc" : "Whether an grid has horizontal layout."
            }
          }
        },
        "Map" : {
          "!doc" : "Map grids.",
          "!url" : "8.3.0/anychart.core.grids.Map",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "minorStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#minorStroke",
              "!doc" : "Stroke settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "drawLastLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#drawLastLine",
              "!doc" : "Drawing last line."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#enabled",
              "!doc" : "Disable or enable grid."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> string|+anychart.graphics.vector.Stroke|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#stroke",
              "!doc" : "Stroke settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> string|+anychart.graphics.vector.Fill|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#zIndex",
              "!doc" : "Z-index setting."
            },
            "palette" : {
              "!type" : "fn(opt_value?: +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|Object|[string]) -> +anychart.palettes.RangeColors|+anychart.palettes.DistinctColors|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#palette",
              "!doc" : "Palette settings."
            },
            "drawFirstLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.grids.Map",
              "!url" : "8.3.0/anychart.core.grids.Map#drawFirstLine",
              "!doc" : "Drawing first line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "!doc" : "Namespace anychart.core.grids.",
        "!url" : "8.3.0/anychart.core.grids"
      },
      "Point" : {
        "!doc" : "Class that wraps point of series/chart.",
        "!url" : "8.3.0/anychart.core.Point",
        "prototype" : {
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.Point#exists",
            "!doc" : "Checks the existence of the current point (by index) in dataset."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Point",
            "!url" : "8.3.0/anychart.core.Point#hovered",
            "!doc" : "Hover point state."
          },
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Point",
            "!url" : "8.3.0/anychart.core.Point#selected",
            "!doc" : "Select point state."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.Point",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          }
        }
      },
      "ChoroplethPoint" : {
        "!doc" : "Point representing choropleth points that belongs to map.",
        "!url" : "8.3.0/anychart.core.ChoroplethPoint",
        "prototype" : {
          "middleX" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#middleX",
            "!doc" : "X center of the point label"
          },
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#selected",
            "!doc" : "Select point state."
          },
          "crs" : {
            "!type" : "fn(opt_crs?: string) -> string|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#crs",
            "!doc" : "Feature crs"
          },
          "getStackZero" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackZero",
            "!doc" : "Returns stack zero of the point."
          },
          "translate" : {
            "!type" : "fn(dx: number, dy: number) -> +anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#translate",
            "!doc" : "Moves point."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "scaleFactor" : {
            "!type" : "fn(opt_scale?: number) -> number|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#scaleFactor",
            "!doc" : "Scaling of the point."
          },
          "getStackValue" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackValue",
            "!doc" : "Returns stack value of the point."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#hovered",
            "!doc" : "Hover point state."
          },
          "getFeatureBounds" : {
            "!type" : "fn() -> +anychart.math.Rect",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#getFeatureBounds",
            "!doc" : "Getter for the point bounds."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "middleY" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#middleY",
            "!doc" : "Y center of the point label"
          },
          "getSeries" : {
            "!type" : "fn() -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getSeries",
            "!doc" : "Getter for series which current point belongs to."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          },
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.SeriesPoint#exists",
            "!doc" : "Checks if the point with the given index exists in a dataset."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          },
          "getFeatureProp" : {
            "!type" : "fn() -> Object",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#getFeatureProp",
            "!doc" : "Getter for the point properties."
          },
          "translation" : {
            "!type" : "fn(opt_dx?: number, opt_dy?: number) -> [number]|+anychart.core.ChoroplethPoint",
            "!url" : "8.3.0/anychart.core.ChoroplethPoint#translation",
            "!doc" : "Point translation"
          }
        }
      },
      "polar" : {
        "series" : {
          "Line" : {
            "!doc" : "Define Line series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Line",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.polar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "closed" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#closed",
                "!doc" : "Close settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.polar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.polar.series.",
          "Polyline" : {
            "!doc" : "Define Line series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Polyline",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "closed" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#closed",
                "!doc" : "Close settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Polyline#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polyline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all polar series.",
            "!url" : "8.3.0/anychart.core.polar.series.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.polar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.polar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.polar.series.Base#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Marker" : {
            "!doc" : "Define Marker series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.polar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.polar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.polar.series.Marker#size",
                "!doc" : "Marker size settings."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "!url" : "8.3.0/anychart.core.polar.series",
          "ContinuousBase" : {
            "!doc" : "A base for all continuous series, like lines, splines, areas, etc.",
            "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "closed" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#closed",
                "!doc" : "Close settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "RangeColumn" : {
            "!doc" : "Define RangeColumn series type.",
            "!url" : "8.3.0/anychart.core.polar.series.RangeColumn",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.RangeColumn#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.RangeColumn#fill",
                "!doc" : "Fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.RangeColumn#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.polar.series.RangeColumn#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Column" : {
            "!doc" : "Define Column series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Column",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Column#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Column#fill",
                "!doc" : "Fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Column#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.polar.series.Column#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Polygon" : {
            "!doc" : "Define Polygon series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Polygon",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "closed" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#closed",
                "!doc" : "Close settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Polygon#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Polygon#fill",
                "!doc" : "Fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.Polygon#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Polygon",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Area" : {
            "!doc" : "Define Area series type.",
            "!url" : "8.3.0/anychart.core.polar.series.Area",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.polar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Linear|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "closed" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#closed",
                "!doc" : "Close settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Area#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.polar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Area#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.Area#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.polar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xValue: +Object, yValue: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.polar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.polar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.polar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.polar.",
        "!url" : "8.3.0/anychart.core.polar"
      },
      "annotations" : {
        "AndrewsPitchfork" : {
          "!doc" : "Andrews Pitchfork annotation.",
          "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork",
          "prototype" : {
            "thirdValueAnchor" : {
              "!type" : "fn(Third: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#thirdValueAnchor",
              "!doc" : "Third value anchor settings"
            },
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "thirdXAnchor" : {
              "!type" : "fn(Third: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#thirdXAnchor",
              "!doc" : "Third X anchor settings"
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.AndrewsPitchfork#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            }
          }
        },
        "FibonacciBase" : {
          "!doc" : "Fibonacci annotations base.",
          "!url" : "8.3.0/anychart.core.annotations.FibonacciBase",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#labels",
              "!doc" : "Labels settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "levels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#levels",
              "!doc" : "Getter for the fibonacci levels."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "trend" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#trend",
              "!doc" : "Trend settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.FibonacciBase",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "Line" : {
          "!doc" : "Line annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Line",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Line#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Line#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Line#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Line#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Line#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.annotations.",
        "Ellipse" : {
          "!doc" : "Ellipse annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Ellipse",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#fill",
              "!doc" : "Fill settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Ellipse#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "Base" : {
          "!doc" : "Base annotations class.",
          "!url" : "8.3.0/anychart.core.annotations.Base",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            }
          }
        },
        "Marker" : {
          "!doc" : "Marker annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Marker",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "markerType" : {
              "!type" : "fn(value: +anychart.enums.MarkerType|string) -> +anychart.enums.MarkerType|string|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#markerType",
              "!doc" : "Marker type."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "anchor" : {
              "!type" : "fn(value: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#anchor",
              "!doc" : "Anchor settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#fill",
              "!doc" : "Fill settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "offsetX" : {
              "!type" : "fn(value: number|string) -> number|string|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#offsetX",
              "!doc" : "Offset by X."
            },
            "size" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#size",
              "!doc" : "Marker size."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "offsetY" : {
              "!type" : "fn(value: number|string) -> number|string|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Marker#offsetY",
              "!doc" : "Offset by Y."
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "Ray" : {
          "!doc" : "Ray annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Ray",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Ray#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Ray#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Ray#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Ray#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Ray#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "Triangle" : {
          "!doc" : "Triangle annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Triangle",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#fill",
              "!doc" : "Fill settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Triangle#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "PlotController" : {
          "!doc" : "Plot controller class.",
          "!url" : "8.3.0/anychart.core.annotations.PlotController",
          "prototype" : {
            "getAnnotationsCount" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#getAnnotationsCount",
              "!doc" : "Returns annotations count."
            },
            "getAnnotationAt" : {
              "!type" : "fn(index: number) -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#getAnnotationAt",
              "!doc" : "Returns annotation by index."
            },
            "fibonacciArc" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fibonacciArc",
              "!doc" : "Creates and returns a Fibonacci Arc annotation."
            },
            "unselect" : {
              "!type" : "fn() -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#unselect",
              "!doc" : "Unselects annotations."
            },
            "removeAnnotation" : {
              "!type" : "fn(annotation: +anychart.core.annotations.Base) -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#removeAnnotation",
              "!doc" : "Removes an annotation from a plot by its instance."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "label" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#label",
              "!doc" : "Creates and returns a Label annotation."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "fibonacciTimezones" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fibonacciTimezones",
              "!doc" : "Creates and returns a Fibonacci Timezones annotation."
            },
            "fromXml" : {
              "!type" : "fn(config: string|Node) -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fromXml",
              "!doc" : "Creates annotations list by XML config."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#enabled",
              "!doc" : "Disable or enable plot controller."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "cancelDrawing" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#cancelDrawing",
              "!doc" : "Cancels current annotation drawing."
            },
            "ray" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Ray",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#ray",
              "!doc" : "Creates and returns a Ray annotation."
            },
            "removeAllAnnotations" : {
              "!type" : "fn() -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#removeAllAnnotations",
              "!doc" : "Removes all annotations from a plot."
            },
            "verticalLine" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#verticalLine",
              "!doc" : "Creates and returns a Vertical Line annotation."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "getSelectedAnnotation" : {
              "!type" : "fn() -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#getSelectedAnnotation",
              "!doc" : "Returns currently selected annotation."
            },
            "andrewsPitchfork" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.AndrewsPitchfork",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#andrewsPitchfork",
              "!doc" : "Creates and returns an Andrews Pitchfork annotation."
            },
            "ellipse" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Ellipse",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#ellipse",
              "!doc" : "Creates and returns an Ellipse annotation."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "infiniteLine" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#infiniteLine",
              "!doc" : "Creates and returns an Infinite Line annotation."
            },
            "select" : {
              "!type" : "fn(annotation: +anychart.core.annotations.Base) -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#select",
              "!doc" : "Selects annotation."
            },
            "fromJson" : {
              "!type" : "fn(config: Object|string) -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fromJson",
              "!doc" : "Creates annotations list by JSON config."
            },
            "trendChannel" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#trendChannel",
              "!doc" : "Creates and returns a Trend Channel annotation."
            },
            "triangle" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Triangle",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#triangle",
              "!doc" : "Creates and returns a Triangle annotation."
            },
            "line" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#line",
              "!doc" : "Creates and returns a Line annotation."
            },
            "removeAnnotationAt" : {
              "!type" : "fn(index: number) -> +anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#removeAnnotationAt",
              "!doc" : "Removes an annotation from a plot by its index."
            },
            "toJson" : {
              "!type" : "fn(opt_stringify?: bool) -> Object|string",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#toJson",
              "!doc" : "Return plot annotations configuration as JSON object or string."
            },
            "startDrawing" : {
              "!type" : "fn(annotationTypeOrConfig: +anychart.enums.AnnotationTypes|string|+anychart.core.annotations.AnnotationJSONFormat) -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#startDrawing",
              "!doc" : "Starts annotation drawing."
            },
            "fibonacciFan" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fibonacciFan",
              "!doc" : "Creates and returns a Fibonacci Fan annotation."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.PlotController",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "add" : {
              "!type" : "fn(annotationTypeOrConfig: +anychart.enums.AnnotationTypes|string|+anychart.core.annotations.AnnotationJSONFormat) -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#add",
              "!doc" : "Adds annotation on the plot."
            },
            "marker" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Marker",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#marker",
              "!doc" : "Creates and returns a Marker annotation."
            },
            "fibonacciRetracement" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#fibonacciRetracement",
              "!doc" : "Creates and returns a Fibonacci Retracement annotation."
            },
            "rectangle" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#rectangle",
              "!doc" : "Creates and returns a Rectangle annotation."
            },
            "horizontalLine" : {
              "!type" : "fn(opt_config?: Object) -> +anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#horizontalLine",
              "!doc" : "Creates and returns a Horizontal Line annotation."
            },
            "toXml" : {
              "!type" : "fn(opt_asXmlNode?: bool) -> string|Node",
              "!url" : "8.3.0/anychart.core.annotations.PlotController#toXml",
              "!doc" : "Return plot annotations configuration as XML string or XMLNode."
            }
          }
        },
        "AnnotationJSONFormat" : {
          "!doc" : "Type definition for annotation JSON format.",
          "!url" : "8.3.0/anychart.core.annotations.AnnotationJSONFormat",
          "prototype" : {
            "thirdValueAnchor" : {
              "!type" : "number",
              "!doc" : "Third value for anchor"
            },
            "selected" : {
              "!type" : "+anychart.core.StateSettings",
              "!doc" : "Selected state."
            },
            "markerType" : {
              "!type" : "+anychart.enums.MarkerType|string",
              "!doc" : "Marker type"
            },
            "grid" : {
              "!type" : "+anychart.graphics.vector.Stroke|fn()",
              "!doc" : "Annotation grid"
            },
            "hovered" : {
              "!type" : "+anychart.core.StateSettings",
              "!doc" : "Hovered state."
            },
            "thirdXAnchor" : {
              "!type" : "number",
              "!doc" : "Third X for anchor"
            },
            "anchor" : {
              "!type" : "+anychart.enums.Anchor|string",
              "!doc" : "Annotation anchor"
            },
            "stroke" : {
              "!type" : "+anychart.graphics.vector.Stroke|fn()",
              "!doc" : "Annotation stroke"
            },
            "hoverGap" : {
              "!type" : "number",
              "!doc" : "Gap in hover mode"
            },
            "fill" : {
              "!type" : "+anychart.graphics.vector.Fill|fn()",
              "!doc" : "Annotation fill"
            },
            "xAnchor" : {
              "!type" : "number",
              "!doc" : "X for anchor"
            },
            "hatchFill" : {
              "!type" : "+anychart.graphics.vector.PatternFill|fn()",
              "!doc" : "Annotation hatchfill"
            },
            "offsetX" : {
              "!type" : "number",
              "!doc" : "Offset by X"
            },
            "size" : {
              "!type" : "number",
              "!doc" : "Annotation size"
            },
            "secondValueAnchor" : {
              "!type" : "number",
              "!doc" : "Second value for anchor"
            },
            "secondXAnchor" : {
              "!type" : "number",
              "!doc" : "Second X for anchor"
            },
            "valueAnchor" : {
              "!type" : "number",
              "!doc" : "Value for anchor"
            },
            "offsetY" : {
              "!type" : "number",
              "!doc" : "Offset by Y"
            },
            "color" : {
              "!type" : "+anychart.graphics.vector.AnyColor",
              "!doc" : "Annotation color"
            },
            "trend" : {
              "!type" : "+anychart.graphics.vector.Stroke|fn()",
              "!doc" : "Annotation trend"
            },
            "allowEdit" : {
              "!type" : "bool",
              "!doc" : "Whether allow to edit"
            }
          }
        },
        "FibonacciTimezones" : {
          "!doc" : "Fibonacci Timezones annotation.",
          "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#labels",
              "!doc" : "Labels settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "levels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#levels",
              "!doc" : "Getter for the fibonacci levels."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "trend" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciTimezones#trend",
              "!doc" : "Trend settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.FibonacciTimezones",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "!url" : "8.3.0/anychart.core.annotations",
        "VerticalLine" : {
          "!doc" : "Vertical Line annotation.",
          "!url" : "8.3.0/anychart.core.annotations.VerticalLine",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.VerticalLine#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.VerticalLine#xAnchor",
              "!doc" : "X anchor settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.VerticalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "FibonacciRetracement" : {
          "!doc" : "Fibonacci Retracement annotation.",
          "!url" : "8.3.0/anychart.core.annotations.FibonacciRetracement",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#labels",
              "!doc" : "Labels settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "levels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#levels",
              "!doc" : "Getter for the fibonacci levels."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "trend" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#trend",
              "!doc" : "Trend settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.FibonacciRetracement",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "InfiniteLine" : {
          "!doc" : "Infinite Line annotation.",
          "!url" : "8.3.0/anychart.core.annotations.InfiniteLine",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.InfiniteLine#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.InfiniteLine#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.InfiniteLine#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.InfiniteLine#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.InfiniteLine#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.InfiniteLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "FibonacciArc" : {
          "!doc" : "Fibonacci Arc annotation.",
          "!url" : "8.3.0/anychart.core.annotations.FibonacciArc",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#labels",
              "!doc" : "Labels settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "levels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#levels",
              "!doc" : "Getter for the fibonacci levels."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "trend" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciArc",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciArc#trend",
              "!doc" : "Trend settings."
            }
          }
        },
        "ChartController" : {
          "!doc" : "Chart controller class.",
          "!url" : "8.3.0/anychart.core.annotations.ChartController",
          "prototype" : {
            "unselect" : {
              "!type" : "fn() -> +anychart.core.annotations.ChartController",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#unselect",
              "!doc" : "Unselects annotations."
            },
            "removeAnnotation" : {
              "!type" : "fn(annotation: +anychart.core.annotations.Base) -> +anychart.core.annotations.ChartController",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#removeAnnotation",
              "!doc" : "Removes one of annotations from plot by its instance."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "cancelDrawing" : {
              "!type" : "fn()",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#cancelDrawing",
              "!doc" : "Cancels current annotation drawing."
            },
            "removeAllAnnotations" : {
              "!type" : "fn() -> +anychart.core.annotations.ChartController",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#removeAllAnnotations",
              "!doc" : "Removes all annotations from the chart."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "getSelectedAnnotation" : {
              "!type" : "fn() -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#getSelectedAnnotation",
              "!doc" : "Returns currently selected annotation."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "select" : {
              "!type" : "fn(annotation: +anychart.core.annotations.Base) -> +anychart.core.annotations.ChartController",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#select",
              "!doc" : "Selects annotation."
            },
            "startDrawing" : {
              "!type" : "fn(annotationTypeOrConfig: +anychart.enums.AnnotationTypes|string|+anychart.core.annotations.AnnotationJSONFormat) -> +anychart.core.annotations.Base",
              "!url" : "8.3.0/anychart.core.annotations.ChartController#startDrawing",
              "!doc" : "Starts annotation drawing."
            }
          }
        },
        "Label" : {
          "!doc" : "Label annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Label",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#maxFontSize",
              "!doc" : "Maximum font size setting."
            },
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#lineHeight",
              "!doc" : "Line height settings."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#padding",
              "!doc" : "Padding settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "anchor" : {
              "!type" : "fn(opt_value?: +anychart.enums.Anchor|string) -> +anychart.enums.Anchor|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#anchor",
              "!doc" : "Anchor settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontVariant",
              "!doc" : "Font variant settings."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#minFontSize",
              "!doc" : "Minimum font size settings."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#text",
              "!doc" : "Label text."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Line",
              "!url" : "8.3.0/anychart.core.annotations.Label#xAnchor",
              "!doc" : "X anchor settings"
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "offsetX" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#offsetX",
              "!doc" : "Offset by X."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#wordBreak",
              "!doc" : "Word break mode."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#selectable",
              "!doc" : "Text selectable option."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#textDirection",
              "!doc" : "Text direction settings."
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#background",
              "!doc" : "Background settings."
            },
            "offsetY" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#offsetY",
              "!doc" : "Offset by Y."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#textIndent",
              "!doc" : "Text indent settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_bothOrByWidth?: Object|[bool]|bool, opt_byHeight?: bool) -> Object|+anychart.core.annotations.Label",
              "!url" : "8.3.0/anychart.core.annotations.Label#adjustFontSize",
              "!doc" : "Adjusting settings."
            }
          }
        },
        "FibonacciFan" : {
          "!doc" : "Fibonacci Fan annotation.",
          "!url" : "8.3.0/anychart.core.annotations.FibonacciFan",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "grid" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#grid",
              "!doc" : "Grid settings."
            },
            "timeLevels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#timeLevels",
              "!doc" : "Getter for the time levels."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#labels",
              "!doc" : "Labels settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "levels" : {
              "!type" : "fn(opt_values?: [+Object]) -> [number]|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciBase#levels",
              "!doc" : "Getter for the fibonacci levels."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "trend" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.FibonacciFan#trend",
              "!doc" : "Trend settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.FibonacciFan",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "TrendChannel" : {
          "!doc" : "Trend Channel annotation.",
          "!url" : "8.3.0/anychart.core.annotations.TrendChannel",
          "prototype" : {
            "thirdValueAnchor" : {
              "!type" : "fn(Third: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#thirdValueAnchor",
              "!doc" : "Third value anchor settings"
            },
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "thirdXAnchor" : {
              "!type" : "fn(Third: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#thirdXAnchor",
              "!doc" : "Third X anchor settings"
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#fill",
              "!doc" : "Fill settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(Second: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.TrendChannel#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.TrendChannel",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "HorizontalLine" : {
          "!doc" : "Horizontal Line annotation.",
          "!url" : "8.3.0/anychart.core.annotations.HorizontalLine",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.HorizontalLine#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.HorizontalLine#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.HorizontalLine",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        },
        "Rectangle" : {
          "!doc" : "Rectangle annotation.",
          "!url" : "8.3.0/anychart.core.annotations.Rectangle",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#selected",
              "!doc" : "Selected state settings."
            },
            "getType" : {
              "!type" : "fn() -> +anychart.enums.AnnotationTypes|string",
              "!url" : "8.3.0/anychart.core.annotations.Base#getType",
              "!doc" : "Returns annotation type."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#normal",
              "!doc" : "Normal state settings."
            },
            "xScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|+anychart.scales.StockScatterDateTime|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.scales.Linear|+anychart.scales.Logarithmic|+anychart.scales.StockScatterDateTime|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#xScale",
              "!doc" : "X-scale settings"
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#stroke",
              "!doc" : "Stroke settings."
            },
            "hoverGap" : {
              "!type" : "fn(value: +Object) -> number|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#hoverGap",
              "!doc" : "Hover gap settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#fill",
              "!doc" : "Fill settings."
            },
            "xAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#xAnchor",
              "!doc" : "X anchor settings"
            },
            "yScale" : {
              "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#yScale",
              "!doc" : "Y-scale settings"
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "getPlot" : {
              "!type" : "fn() -> +anychart.core.stock.Plot",
              "!url" : "8.3.0/anychart.core.annotations.Base#getPlot",
              "!doc" : "Returns the plot on which the annotation is drawn."
            },
            "getChart" : {
              "!type" : "fn() -> +anychart.core.SeparateChart",
              "!url" : "8.3.0/anychart.core.annotations.Base#getChart",
              "!doc" : "Returns the chart on which the annotation is drawn."
            },
            "secondValueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#secondValueAnchor",
              "!doc" : "Second value anchor settings"
            },
            "secondXAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#secondXAnchor",
              "!doc" : "Second X anchor settings"
            },
            "valueAnchor" : {
              "!type" : "fn(value: +Object) -> +Object|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Rectangle#valueAnchor",
              "!doc" : "Value anchor settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#color",
              "!doc" : "Color settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#markers",
              "!doc" : "Markers settings."
            },
            "allowEdit" : {
              "!type" : "fn(value: +Object) -> bool|+anychart.core.annotations.Rectangle",
              "!url" : "8.3.0/anychart.core.annotations.Base#allowEdit",
              "!doc" : "Interactivity settings."
            }
          }
        }
      },
      "venn" : {
        "Intersections" : {
          "!doc" : "Venn intersections settings collector.",
          "!url" : "8.3.0/anychart.core.venn.Intersections",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#selected",
              "!doc" : "Selected state settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#tooltip",
              "!doc" : "Tooltip settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#hovered",
              "!doc" : "Hovered state settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#normal",
              "!doc" : "Normal state settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#labels",
              "!doc" : "Labels settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#fill",
              "!doc" : "Fill settings."
            },
            "hatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#hatchFill",
              "!doc" : "Hatch fill settings."
            },
            "markers" : {
              "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.venn.Intersections",
              "!url" : "8.3.0/anychart.core.venn.Intersections#markers",
              "!doc" : "Markers settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.venn.",
        "!url" : "8.3.0/anychart.core.venn"
      },
      "waterfall" : {
        "series" : {
          "Waterfall" : {
            "!doc" : "Waterfall Series Class.",
            "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "fallingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#fallingFill",
                "!doc" : "Falling fill settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "risingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#risingFill",
                "!doc" : "Rising fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.waterfall.series.Waterfall#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.waterfall.series.Waterfall",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "!doc" : "Namespace anychart.core.waterfall.series",
          "!url" : "8.3.0/anychart.core.waterfall.series"
        },
        "!doc" : "Namespace anychart.core.waterfall",
        "!url" : "8.3.0/anychart.core.waterfall"
      },
      "series" : {
        "RenderingSettings" : {
          "!doc" : "Custom drawing series settings.",
          "!url" : "8.3.0/anychart.core.series.RenderingSettings",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "needsWidth" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#needsWidth",
              "!doc" : "Points width settings"
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "updatePoint" : {
              "!type" : "fn(opt_pointFunction?: fn()) -> fn()|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#updatePoint",
              "!doc" : "Point update settings"
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "needsZero" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#needsZero",
              "!doc" : "Zero settings"
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "yValues" : {
              "!type" : "fn(opt_value?: [string]) -> [string]|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#yValues",
              "!doc" : "YScale values settings."
            },
            "finish" : {
              "!type" : "fn(opt_finishFunction?: fn()) -> fn()|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#finish",
              "!doc" : "Finish settings."
            },
            "start" : {
              "!type" : "fn(opt_startFunction?: fn()) -> fn()|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#start",
              "!doc" : "Start settings."
            },
            "shapes" : {
              "!type" : "fn(opt_config?: [+anychart.core.series.RenderingSettings.ShapeConfig]) -> [+anychart.core.series.RenderingSettings.ShapeConfig]|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#shapes",
              "!doc" : "Shapes settings."
            },
            "point" : {
              "!type" : "fn(opt_pointFunction?: fn()) -> fn()|+anychart.core.series.RenderingSettings",
              "!url" : "8.3.0/anychart.core.series.RenderingSettings#point",
              "!doc" : "Point settings."
            }
          },
          "ShapeConfig" : {
            "!doc" : "Shape config.",
            "!url" : "8.3.0/anychart.core.series.RenderingSettings.ShapeConfig",
            "prototype" : {
              "canBeHoveredSelected" : {
                "!type" : "bool",
                "!doc" : "Can be shape is hovered or selected."
              },
              "fillName" : {
                "!type" : "string",
                "!doc" : "Fill name."
              },
              "isHatchFill" : {
                "!type" : "bool",
                "!doc" : "Whether this shape is shape for the hatchFill."
              },
              "name" : {
                "!type" : "string",
                "!doc" : "Shape name."
              },
              "scrollerSelected" : {
                "!type" : "bool",
                "!doc" : "Should select a scroller or not."
              },
              "shapeType" : {
                "!type" : "+anychart.enums.ShapeType|string",
                "!doc" : "Shape type (\"path\", \"circle\", \"ellipse\" or \"rect\")."
              },
              "strokeName" : {
                "!type" : "string",
                "!doc" : "Stroke name."
              },
              "zIndex" : {
                "!type" : "number",
                "!doc" : "ZIndex for the balance of shapes relative to each other."
              }
            }
          },
          "Context" : {
            "!doc" : "Rendering functions context.",
            "!url" : "8.3.0/anychart.core.series.RenderingSettings.Context",
            "prototype" : {
              "getShapesGroup" : {
                "!type" : "fn(opt_state?: +anychart.enums.PointState|string, opt_baseZIndex?: number, opt_restrictShapes?: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.Context#getShapesGroup",
                "!doc" : "Generates a shapes group."
              },
              "getStat" : {
                "!type" : "fn(opt_key?: string) -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.Context#getStat",
                "!doc" : "Fetch statistics value by its key or a whole object if no key provided."
              }
            }
          },
          "PointContext" : {
            "!doc" : "Rendering functions context.",
            "!url" : "8.3.0/anychart.core.series.RenderingSettings.PointContext",
            "prototype" : {
              "getDataValue" : {
                "!type" : "fn(name: string) -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.PointContext#getDataValue",
                "!doc" : "Returns data value by name."
              },
              "getShapesGroup" : {
                "!type" : "fn(opt_state?: +anychart.enums.PointState|string, opt_baseZIndex?: number, opt_restrictShapes?: +Object) -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.Context#getShapesGroup",
                "!doc" : "Generates a shapes group."
              },
              "getStackedValue" : {
                "!type" : "fn() -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.PointContext#getStackedValue",
                "!doc" : "Returns stacked value if the series is stacked."
              },
              "getStackedZero" : {
                "!type" : "fn() -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.PointContext#getStackedZero",
                "!doc" : "Returns stacked zero value if the series is stacked."
              },
              "getStat" : {
                "!type" : "fn(opt_key?: string) -> +Object",
                "!url" : "8.3.0/anychart.core.series.RenderingSettings.Context#getStat",
                "!doc" : "Fetch statistics value by its key or a whole object if no key provided."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.series.",
        "!url" : "8.3.0/anychart.core.series"
      },
      "cartesian" : {
        "series" : {
          "Column3d" : {
            "!doc" : "3D Column Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Column3d",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Column3d#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Column3d#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Column3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Line" : {
            "!doc" : "Line Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Line",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|Object|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Line",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "StepLine" : {
            "!doc" : "StepLine Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.StepLine",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepLine#stepDirection",
                "!doc" : "Step direction settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.StepLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Spline" : {
            "!doc" : "Spline Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Spline",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Spline#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Spline",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "!doc" : "",
          "SplineArea" : {
            "!doc" : "SplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.SplineArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.SplineArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.SplineArea#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.SplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.SplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "WidthBased" : {
            "!doc" : "A base for all width-based series like bars, columns, OHLC and candlesticks.",
            "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.WidthBased",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "OHLC" : {
            "!doc" : "OHLC Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.OHLC",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.OHLC#risingStroke",
                "!doc" : "Rising stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.OHLC",
                "!url" : "8.3.0/anychart.core.cartesian.series.OHLC#fallingStroke",
                "!doc" : "Falling stroke settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "RangeStepArea" : {
            "!doc" : "RangeStepArea Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeStepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeStepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all cartesian series.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Base",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Bar3d" : {
            "!doc" : "3D Bar Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Bar3d",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bar3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Hilo" : {
            "!doc" : "HiLo Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Hilo",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Hilo#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Hilo",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              }
            }
          },
          "Marker" : {
            "!doc" : "Marker Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Marker#size",
                "!doc" : "Marker size settings."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Marker",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Bubble" : {
            "!doc" : "Bubble Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Bubble",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "negativeFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#negativeFill",
                "!doc" : "Negative fill settings."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "displayNegative" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#displayNegative",
                "!doc" : "Whether to display negative value."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "negativeHatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#negativeHatchFill",
                "!doc" : "Negative hatch fill settings."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "negativeStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bubble#negativeStroke",
                "!doc" : "Negative stroke settings."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bubble",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "BaseWithMarkers" : {
            "!doc" : "A base for all series except marker series.",
            "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.BaseWithMarkers",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Box" : {
            "!doc" : "Box Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Box",
            "prototype" : {
              "outlierMarkers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#outlierMarkers",
                "!doc" : "Outlier markers settings."
              },
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "medianStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#medianStroke",
                "!doc" : "Median stroke settings."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "stemStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#stemStroke",
                "!doc" : "Stem stroke settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "whiskerWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#whiskerWidth",
                "!doc" : "Whisker width settings."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "whiskerStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Box#whiskerStroke",
                "!doc" : "Whisker settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Box",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "RangeArea" : {
            "!doc" : "RangeArea Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.RangeArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeArea#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "!url" : "8.3.0/anychart.core.cartesian.series",
          "ContinuousBase" : {
            "!doc" : "A base for all continuous series, like lines, splines, areas, etc.",
            "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "RangeSplineArea" : {
            "!doc" : "RangeSplineArea Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.RangeSplineArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeSplineArea#highStroke",
                "!doc" : "High stroke settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeSplineArea#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeSplineArea#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeSplineArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeSplineArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "ContinuousRangeBase" : {
            "!doc" : "A base for all continuous series, like lines, splines, areas, etc.",
            "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousRangeBase",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "highStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousRangeBase#highStroke",
                "!doc" : "High stroke settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousRangeBase#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "lowStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousRangeBase#lowStroke",
                "!doc" : "Low stroke settings."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousRangeBase#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.ContinuousRangeBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "RangeColumn" : {
            "!doc" : "RangeColumn Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.RangeColumn",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeColumn#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeColumn#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeColumn#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeColumn",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "JumpLine" : {
            "!doc" : "JumpLine Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.JumpLine",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.JumpLine#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.JumpLine",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Area3d" : {
            "!doc" : "3D Area Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Area3d",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Area3d#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Area3d#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Area3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Stick" : {
            "!doc" : "Stick Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Stick",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Stick#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Stick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Column" : {
            "!doc" : "Column Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Column",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Column#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Column#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Column#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Column",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Candlestick" : {
            "!doc" : "Candlestick Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Candlestick",
            "prototype" : {
              "risingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Candlestick#risingHatchFill",
                "!doc" : "Rising hatch fill settings."
              },
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "fallingHatchFill" : {
                "!type" : "fn(opt_patternFillOrTypeOrState?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string|bool, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Candlestick#fallingHatchFill",
                "!doc" : "Falling hatch fill settings."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "risingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.OHLC#risingStroke",
                "!doc" : "Rising stroke settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "fallingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Candlestick#fallingFill",
                "!doc" : "Falling fill settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "risingFill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Candlestick#risingFill",
                "!doc" : "Rising fill settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "fallingStroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|fn()|+anychart.core.cartesian.series.Candlestick",
                "!url" : "8.3.0/anychart.core.cartesian.series.OHLC#fallingStroke",
                "!doc" : "Falling stroke settings."
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "DiscreteBase" : {
            "!doc" : "A base for all series with discrete points, like bars, sticks, columns, OHLC, etc.",
            "!url" : "8.3.0/anychart.core.cartesian.series.DiscreteBase",
            "prototype" : {
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "unhover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.cartesian.series.DiscreteBase#unhover",
                "!doc" : "Unhover settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.DiscreteBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              }
            }
          },
          "Bar" : {
            "!doc" : "Bar Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Bar",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bar#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bar#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Bar#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Bar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "StepArea" : {
            "!doc" : "StepArea Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.StepArea",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepArea#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepArea#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "stepDirection" : {
                "!type" : "fn(opt_value?: +anychart.enums.StepDirection|string) -> +anychart.enums.StepDirection|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepArea#stepDirection",
                "!doc" : "Step direction settings."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.StepArea#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.StepArea",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Area" : {
            "!doc" : "Area Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Area",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "error" : {
                "!type" : "fn(opt_value?: Object|bool|string|number) -> +anychart.core.utils.Error|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#error",
                "!doc" : "Error settings."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Area#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Area#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Area#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Area",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "Line3d" : {
            "!doc" : "3D Line Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.Line3d",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(value: string, opt_opacity?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Line3d#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Missing points settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.Line3d",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          },
          "RangeBar" : {
            "!doc" : "RangeBar Series Class.",
            "!url" : "8.3.0/anychart.core.cartesian.series.RangeBar",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "transformY" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformY",
                "!doc" : "Transforms Y value to pixel coordinates."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "clip" : {
                "!type" : "fn(opt_value?: bool|+anychart.math.Rect) -> bool|+anychart.math.Rect|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#clip",
                "!doc" : "Series clip settings."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "transformX" : {
                "!type" : "fn(value: +Object, opt_subRangeRatio?: number) -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#transformX",
                "!doc" : "Transforms X value to pixel coordinates."
              },
              "maxPointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#maxPointWidth",
                "!doc" : "Maximum point width settings."
              },
              "minPointLength" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#minPointLength",
                "!doc" : "Minimum point length settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "xPointPosition" : {
                "!type" : "fn(opt_position?: number) -> number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#xPointPosition",
                "!doc" : "Position of the point."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeBar#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeBar#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.RangeBar#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object, opt_value?: +Object) -> +Object|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#meta",
                "!doc" : "Series meta data settings."
              },
              "isVertical" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#isVertical",
                "!doc" : "Getter for the series layout direction."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_indexOrIndexes?: number|[number]) -> +anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#unhover",
                "!doc" : "Removes hover from the series."
              },
              "pointWidth" : {
                "!type" : "fn(opt_value?: number|string) -> string|number|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.WidthBased#pointWidth",
                "!doc" : "Point width settings."
              },
              "rendering" : {
                "!type" : "fn(opt_value?: Object|fn()) -> +anychart.core.series.RenderingSettings|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#rendering",
                "!doc" : "Rendering settings"
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#hover",
                "!doc" : "Hover settings."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.SeriesBase#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.BaseWithMarkers#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              },
              "seriesType" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.cartesian.series.RangeBar",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#seriesType",
                "!doc" : "Switch the series type"
              },
              "getPixelPointWidth" : {
                "!type" : "fn() -> number",
                "!url" : "8.3.0/anychart.core.cartesian.series.Base#getPixelPointWidth",
                "!doc" : "Gets point width in case of width-based series."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.cartesian.",
        "!url" : "8.3.0/anychart.core.cartesian"
      },
      "Text" : {
        "!doc" : "This class is responsible of the text formatting, it processes the plain text and the text in HTML format.",
        "!url" : "8.3.0/anychart.core.Text",
        "prototype" : {
          "fontDecoration" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontDecoration",
            "!doc" : "Font decoration settings."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "vAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#vAlign",
            "!doc" : "Text vertical align settings."
          },
          "fontFamily" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontFamily",
            "!doc" : "Font family settings."
          },
          "fontStyle" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontStyle",
            "!doc" : "Font style settings."
          },
          "fontWeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontWeight",
            "!doc" : "Font weight settings."
          },
          "useHtml" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#useHtml",
            "!doc" : "Text useHtml settings."
          },
          "lineHeight" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#lineHeight",
            "!doc" : "Text line height settings."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "textSettings" : {
            "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#textSettings",
            "!doc" : "Text settings."
          },
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "letterSpacing" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#letterSpacing",
            "!doc" : "Text letter spacing settings."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "fontVariant" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontVariant",
            "!doc" : "Font variant settings."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "hAlign" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#hAlign",
            "!doc" : "Text horizontal align settings."
          },
          "fontOpacity" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontOpacity",
            "!doc" : "Font opacity settings."
          },
          "fontSize" : {
            "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontSize",
            "!doc" : "Font size settings."
          },
          "disablePointerEvents" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
            "!doc" : "Pointer events settings."
          },
          "textOverflow" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#textOverflow",
            "!doc" : "Text overflow settings."
          },
          "wordWrap" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#wordWrap",
            "!doc" : "Word-wrap mode."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          },
          "wordBreak" : {
            "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#wordBreak",
            "!doc" : "Word break mode."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "selectable" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#selectable",
            "!doc" : "Text selectable option."
          },
          "textDirection" : {
            "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#textDirection",
            "!doc" : "Text direction settings."
          },
          "textIndent" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#textIndent",
            "!doc" : "Text indent settings."
          },
          "fontColor" : {
            "!type" : "fn(opt_value?: string) -> string|+anychart.core.Text",
            "!url" : "8.3.0/anychart.core.Text#fontColor",
            "!doc" : "Font color settings."
          }
        }
      },
      "TreeChartPoint" : {
        "!doc" : "Class that wraps point of series or chart.",
        "!url" : "8.3.0/anychart.core.TreeChartPoint",
        "prototype" : {
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#exists",
            "!doc" : "Checks if the point exists."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#get",
            "!doc" : "Getter for the current value from data by path specified."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#getChart",
            "!doc" : "Getter for the chart point belongs to."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#getIndex",
            "!doc" : "Getter for the point linear index."
          },
          "getNode" : {
            "!type" : "fn() -> +anychart.data.Tree.DataItem|+anychart.data.TreeView.DataItem",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#getNode",
            "!doc" : "Returns a node."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.TreeChartPoint",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#hovered",
            "!doc" : "Hover point state."
          },
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.TreeChartPoint",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#selected",
            "!doc" : "Select point state."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.TreeChartPoint",
            "!url" : "8.3.0/anychart.core.TreeChartPoint#set",
            "!doc" : "Setter for the value to the data by path."
          }
        }
      },
      "gantt" : {
        "edit" : {
          "Thumb" : {
            "!doc" : "Thumb class for the interval thumbs and connector thumbs settings.",
            "!url" : "8.3.0/anychart.core.gantt.edit.Thumb",
            "prototype" : {
              "enabled" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#enabled",
                "!doc" : "Disable or enable enabled state."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#fill",
                "!doc" : "Thumb fill settings."
              },
              "horizontalOffset" : {
                "!type" : "fn(opt_offset?: number) -> number|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#horizontalOffset",
                "!doc" : "Horizontal offset of the connector thumb."
              },
              "size" : {
                "!type" : "fn(opt_size?: number) -> number|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#size",
                "!doc" : "Thumb size."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#stroke",
                "!doc" : "Thumb stroke settings."
              },
              "type" : {
                "!type" : "fn(opt_type?: +anychart.enums.MarkerType|string) -> +anychart.enums.MarkerType|string|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#type",
                "!doc" : "Connector thumb type."
              },
              "verticalOffset" : {
                "!type" : "fn(opt_offset?: number) -> number|+anychart.core.gantt.edit.Thumb",
                "!url" : "8.3.0/anychart.core.gantt.edit.Thumb#verticalOffset",
                "!doc" : "Vertical offset of the connector thumb."
              }
            }
          },
          "StructureEdit" : {
            "!doc" : "Structure edit class.",
            "!url" : "8.3.0/anychart.core.gantt.edit.StructureEdit",
            "prototype" : {
              "enabled" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.gantt.edit.StructureEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.StructureEdit#enabled",
                "!doc" : "Disable or enable enabled state."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gantt.edit.StructureEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.StructureEdit#fill",
                "!doc" : "Row fill settings."
              },
              "placementStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.gantt.edit.StructureEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.StructureEdit#placementStroke",
                "!doc" : "Placement line stroke settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.gantt.edit.StructureEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.StructureEdit#stroke",
                "!doc" : "Row stroke settings."
              }
            }
          },
          "ElementEdit" : {
            "!doc" : "Settings for editing of the timeline elements.",
            "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit",
            "prototype" : {
              "connectorThumbs" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.Thumb|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#connectorThumbs",
                "!doc" : "Connector thumbs settings."
              },
              "enabled" : {
                "!type" : "fn(opt_enabled?: bool) -> bool|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#enabled",
                "!doc" : "Disable or enable enabled state."
              },
              "end" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.SideControl|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#end",
                "!doc" : "Start edit control settings."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#fill",
                "!doc" : "Fill settings of all timeline elements preview while editing."
              },
              "start" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.SideControl|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#start",
                "!doc" : "Start edit control settings."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#stroke",
                "!doc" : "Settings for editing control stroke."
              },
              "thumbs" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.Thumb|+anychart.core.gantt.edit.ElementEdit",
                "!url" : "8.3.0/anychart.core.gantt.edit.ElementEdit#thumbs",
                "!doc" : "Thumbs settings."
              }
            }
          },
          "SideControl" : {
            "!doc" : "Edit thumb class.",
            "!url" : "8.3.0/anychart.core.gantt.edit.SideControl",
            "prototype" : {
              "connectorThumb" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.Thumb|+anychart.core.gantt.edit.SideControl",
                "!url" : "8.3.0/anychart.core.gantt.edit.SideControl#connectorThumb",
                "!doc" : "Connector thumb settings."
              },
              "thumb" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.edit.Thumb|+anychart.core.gantt.edit.SideControl",
                "!url" : "8.3.0/anychart.core.gantt.edit.SideControl#thumb",
                "!doc" : "Thumb settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.gantt.edit.",
          "!url" : "8.3.0/anychart.core.gantt.edit"
        },
        "elements" : {
          "!doc" : "Namespace anychart.core.gantt.elements.",
          "ProgressElement" : {
            "!doc" : "Progress element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.ProgressElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.ProgressElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "ConnectorElement" : {
            "!doc" : "Connector element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.ConnectorElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement#selected",
                "!doc" : "Selected state settings."
              },
              "previewStroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.ConnectorElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement#previewStroke",
                "!doc" : "Connector preview stroke settings."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.ConnectorElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn()|Object, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.ConnectorElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement#stroke",
                "!doc" : "Connector stroke settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "fill" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|[+anychart.graphics.vector.GradientKey|string], opt_cx?: number, opt_cy?: number, opt_opacityOrMode?: +anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.ui.Timeline|+anychart.core.gantt.elements.ConnectorElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.ConnectorElement#fill",
                "!doc" : "Connector fill settings."
              }
            }
          },
          "TasksElement" : {
            "!doc" : "Tasks element settings. This class provides settings for tasks and grouping tasks.",
            "!url" : "8.3.0/anychart.core.gantt.elements.TasksElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "progress" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.elements.ProgressElement|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TasksElement#progress",
                "!doc" : "Task progress settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.TasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "GroupingTasksElement" : {
            "!doc" : "Grouping tasks element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.GroupingTasksElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "progress" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.elements.ProgressElement|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.GroupingTasksElement#progress",
                "!doc" : "Task progress settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.GroupingTasksElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "MilestonesElement" : {
            "!doc" : "Milestones element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.MilestonesElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.MilestonesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "!url" : "8.3.0/anychart.core.gantt.elements",
          "BaselinesElement" : {
            "!doc" : "Baselines element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.BaselinesElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.BaselinesElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "above" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.BaselinesElement#above",
                "!doc" : "Displaying of the baseline bar above an time bar."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.BaselinesElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "TimelineElement" : {
            "!doc" : "Settings class for all timeline elements (baselines, connectors, tasks, grouping tasks, periods, progress bars).",
            "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.TimelineElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          },
          "PeriodsElement" : {
            "!doc" : "Periods element settings.",
            "!url" : "8.3.0/anychart.core.gantt.elements.PeriodsElement",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#selected",
                "!doc" : "Selected state settings."
              },
              "offset" : {
                "!type" : "fn(opt_offset?: string|number) -> string|number|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#offset",
                "!doc" : "Element vertical offset."
              },
              "height" : {
                "!type" : "fn(opt_height?: string|number) -> string|number|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#height",
                "!doc" : "Element height."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "normal" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#normal",
                "!doc" : "Normal state settings."
              },
              "anchor" : {
                "!type" : "fn(opt_anchor?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#anchor",
                "!doc" : "Element anchor."
              },
              "position" : {
                "!type" : "fn(opt_position?: string|+anychart.enums.Anchor) -> string|+anychart.enums.Anchor|+anychart.core.ui.Timeline",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#position",
                "!doc" : "Element position."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#stroke",
                "!doc" : "Element stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#labels",
                "!doc" : "Element labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "edit" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.gantt.edit.ElementEdit|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#edit",
                "!doc" : "Live edit mode."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#fill",
                "!doc" : "Fill elements settings."
              },
              "rendering" : {
                "!type" : "fn(opt_settings?: Object) -> +anychart.core.gantt.rendering.Settings|+anychart.core.gantt.elements.PeriodsElement",
                "!url" : "8.3.0/anychart.core.gantt.elements.TimelineElement#rendering",
                "!doc" : "Rendering settings."
              }
            }
          }
        },
        "rendering" : {
          "Settings" : {
            "!doc" : "Custom drawing settings.",
            "!url" : "8.3.0/anychart.core.gantt.rendering.Settings",
            "prototype" : {
              "drawer" : {
                "!type" : "fn(drawerFunction: fn()) -> fn()|+anychart.core.gantt.rendering.Settings",
                "!url" : "8.3.0/anychart.core.gantt.rendering.Settings#drawer",
                "!doc" : "Custom drawing settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "shapes" : {
                "!type" : "fn(opt_config?: [+anychart.core.gantt.rendering.Settings.ShapeConfig]) -> [+anychart.core.gantt.rendering.Settings.ShapeConfig]|+anychart.core.gantt.rendering.Settings",
                "!url" : "8.3.0/anychart.core.gantt.rendering.Settings#shapes",
                "!doc" : "Shapes settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              }
            },
            "ShapeConfig" : {
              "!doc" : "Shape config.",
              "!url" : "8.3.0/anychart.core.gantt.rendering.Settings.ShapeConfig",
              "prototype" : {
                "disablePointerEvents" : {
                  "!type" : "bool",
                  "!doc" : "Whether to disable mouse events on shape."
                },
                "name" : {
                  "!type" : "string",
                  "!doc" : "Shape name for context of the drawer-function."
                },
                "shapeType" : {
                  "!type" : "+anychart.enums.ShapeType",
                  "!doc" : "Shape type."
                },
                "zIndex" : {
                  "!type" : "number",
                  "!doc" : "ZIndex for the balance of shapes relative to each other."
                }
              }
            }
          },
          "!doc" : "Namespace anychart.core.gantt.rendering",
          "!url" : "8.3.0/anychart.core.gantt.rendering"
        },
        "Overlay" : {
          "!doc" : "Overlay element class.",
          "!url" : "8.3.0/anychart.core.gantt.Overlay",
          "prototype" : {
            "className" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.Overlay",
              "!url" : "8.3.0/anychart.core.gantt.Overlay#className",
              "!doc" : "Name of DIV class."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.Overlay",
              "!url" : "8.3.0/anychart.core.gantt.Overlay#enabled",
              "!doc" : "Enabled state."
            },
            "getElement" : {
              "!type" : "fn() -> Element",
              "!url" : "8.3.0/anychart.core.gantt.Overlay#getElement",
              "!doc" : "Gets the overlay DOM element."
            },
            "id" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.Overlay",
              "!url" : "8.3.0/anychart.core.gantt.Overlay#id",
              "!doc" : "DIV identifier."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            }
          }
        },
        "DataGridButton" : {
          "!doc" : "Collapse-expand button.",
          "!url" : "8.3.0/anychart.core.gantt.DataGridButton",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#selected",
              "!doc" : "Selected state settings."
            },
            "width" : {
              "!type" : "fn(opt_width?: number|string) -> number|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#width",
              "!doc" : "Buttons width."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontDecoration",
              "!doc" : "Button font decoration."
            },
            "height" : {
              "!type" : "fn(opt_height?: number|string) -> number|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#height",
              "!doc" : "Buttons height."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#vAlign",
              "!doc" : "Button text vertical align."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontFamily",
              "!doc" : "Button font family."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontStyle",
              "!doc" : "Button font style."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontWeight",
              "!doc" : "Button text font weight."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#useHtml",
              "!doc" : "Disable/Enable text useHtml."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#lineHeight",
              "!doc" : "Button text line height."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_right?: string|number, opt_bottom?: string|number, opt_left?: string|number) -> +anychart.core.utils.Padding|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#padding",
              "!doc" : "Padding settings."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#hovered",
              "!doc" : "Hovered state settings."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#letterSpacing",
              "!doc" : "Button text letter spacing."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#normal",
              "!doc" : "Normal state settings."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontVariant",
              "!doc" : "Button font variant."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#hAlign",
              "!doc" : "Button text horizontal align."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontOpacity",
              "!doc" : "Button font opacity."
            },
            "cursor" : {
              "!type" : "fn(opt_cursorType?: string|+anychart.enums.Cursor) -> +anychart.enums.Cursor|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#cursor",
              "!doc" : "Cursor type"
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontSize",
              "!doc" : "Button font size."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#disablePointerEvents",
              "!doc" : "Disable/Enable pointer events."
            },
            "content" : {
              "!type" : "fn(opt_value?: string|number|function(path:+anychart.graphics.vector.Path)) -> string|number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#content",
              "!doc" : "Buttons content."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#textOverflow",
              "!doc" : "Button text overflow."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#wordBreak",
              "!doc" : "Word break mode."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#textDirection",
              "!doc" : "Button text direction."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#textIndent",
              "!doc" : "Button text indent."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.DataGridButton",
              "!url" : "8.3.0/anychart.core.gantt.DataGridButton#fontColor",
              "!doc" : "Button font color."
            }
          }
        },
        "TimeLineHeaderLevelHolidaysSettings" : {
          "!doc" : "Timeline element.",
          "!url" : "8.3.0/anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings",
          "prototype" : {
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings#padding",
              "!doc" : "Padding settings"
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings#fill",
              "!doc" : "Fill settings."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            }
          }
        },
        "TimeLineHeader" : {
          "!doc" : "Resource Chart Timeline element.",
          "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader",
          "prototype" : {
            "maxFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#maxFontSize",
              "!doc" : "Maximum font size settings."
            },
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
              "!doc" : "Right bound settings."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
              "!doc" : "Top bound settings."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontDecoration",
              "!doc" : "Font decoration setting."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
              "!doc" : "Height settings."
            },
            "levelHeight" : {
              "!type" : "fn(value: number) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#levelHeight",
              "!doc" : "Getter for the level height."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.VAlign) -> +anychart.graphics.vector.Text.VAlign|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#useHtml",
              "!doc" : "Use HTML option."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#lineHeight",
              "!doc" : "Text line height setting."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#padding",
              "!doc" : "Padding settings"
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
              "!doc" : "Minimum width."
            },
            "drawLeftLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#drawLeftLine",
              "!doc" : "Drawing of the left line."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "level" : {
              "!type" : "fn(opt_value?: number|Object|bool, opt_settings?: Object|bool) -> +anychart.core.gantt.TimeLineHeader.LevelWrapper|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#level",
              "!doc" : "Level option."
            },
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#stroke",
              "!doc" : "Stroke settings."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontVariant",
              "!doc" : "Font variant settings."
            },
            "drawRightLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#drawRightLine",
              "!doc" : "Drawing of the right line."
            },
            "minFontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#minFontSize",
              "!doc" : "Minimum font size settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fill",
              "!doc" : "Fill settings."
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontSize",
              "!doc" : "Font size settings."
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "holidays" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.gantt.TimeLineHeaderLevelHolidaysSettings|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#holidays",
              "!doc" : "Padding settings"
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#wordBreak",
              "!doc" : "Word break mode."
            },
            "drawTopLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#drawTopLine",
              "!doc" : "Drawing of the top line."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "bounds" : {
              "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
              "!doc" : "Bounds settings."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
              "!doc" : "Bottom bound settings."
            },
            "getPixelBounds" : {
              "!type" : "fn() -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
              "!doc" : "Returns pixel bounds."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
              "!doc" : "Maximum width."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#selectable",
              "!doc" : "Text selectable option."
            },
            "drawBottomLine" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.resource.Grid",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#drawBottomLine",
              "!doc" : "Drawing of the bottom line."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.Direction) -> +anychart.graphics.vector.Text.Direction|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#textDirection",
              "!doc" : "Text direction settings."
            },
            "background" : {
              "!type" : "fn(opt_value?: string|Object|bool) -> +anychart.core.ui.Background|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#background",
              "!doc" : "Background settings."
            },
            "overlay" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.gantt.Overlay|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#overlay",
              "!doc" : "Overlay element."
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#textIndent",
              "!doc" : "Text indent settings."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
              "!doc" : "Left bound settings."
            },
            "format" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#format",
              "!doc" : "Function to format content text."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#fontColor",
              "!doc" : "Font color settings."
            },
            "adjustFontSize" : {
              "!type" : "fn(opt_adjustOrAdjustByWidth?: bool|[bool]|Object, opt_adjustByHeight?: bool) -> number|+anychart.core.gantt.TimeLineHeader",
              "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader#adjustFontSize",
              "!doc" : "Adjusting settings."
            }
          },
          "Level" : {
            "!doc" : "Time line level definition.",
            "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.Level",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "number",
                "!doc" : "Maximum font size"
              },
              "fontDecoration" : {
                "!type" : "string",
                "!doc" : "Level font decoration"
              },
              "height" : {
                "!type" : "number|string",
                "!doc" : "Level height"
              },
              "vAlign" : {
                "!type" : "+anychart.enums.VAlign|string",
                "!doc" : "Vertical align"
              },
              "fontFamily" : {
                "!type" : "string",
                "!doc" : "Level font family"
              },
              "fontStyle" : {
                "!type" : "+anychart.enums.FontStyle|string",
                "!doc" : "Level font style"
              },
              "fontWeight" : {
                "!type" : "string|number",
                "!doc" : "Level font weight"
              },
              "useHtml" : {
                "!type" : "bool",
                "!doc" : "UseHtml flag"
              },
              "lineHeight" : {
                "!type" : "number|string",
                "!doc" : "Level line height"
              },
              "padding" : {
                "!type" : "Object|+Array|number|string",
                "!doc" : "Level padding"
              },
              "letterSpacing" : {
                "!type" : "number|string",
                "!doc" : "Level letter spacing"
              },
              "count" : {
                "!type" : "number",
                "!doc" : "Interval count"
              },
              "fontVariant" : {
                "!type" : "+anychart.enums.FontVariant|string",
                "!doc" : "Level font variant"
              },
              "minFontSize" : {
                "!type" : "number",
                "!doc" : "Minimum font size"
              },
              "hAlign" : {
                "!type" : "+anychart.enums.HAlign|string",
                "!doc" : "Horizontal align"
              },
              "fontOpacity" : {
                "!type" : "number",
                "!doc" : "Level font opacity"
              },
              "fill" : {
                "!type" : "+anychart.graphics.vector.Fill",
                "!doc" : "Level fill"
              },
              "fontSize" : {
                "!type" : "number",
                "!doc" : "Level font size"
              },
              "disablePointerEvents" : {
                "!type" : "bool",
                "!doc" : "DisablePointerEvents option"
              },
              "holiday" : {
                "!type" : "+Object",
                "!doc" : "Holiday settings,"
              },
              "textOverflow" : {
                "!type" : "+anychart.graphics.vector.Text.TextOverflow|string",
                "!doc" : "Text overflow"
              },
              "wordWrap" : {
                "!type" : "string",
                "!doc" : "Word wrap mode"
              },
              "formats" : {
                "!type" : "string|[string]",
                "!doc" : "Date formats"
              },
              "wordBreak" : {
                "!type" : "string",
                "!doc" : "Word break mode"
              },
              "unit" : {
                "!type" : "+anychart.enums.Interval|string",
                "!doc" : "Interval unit"
              },
              "selectable" : {
                "!type" : "bool",
                "!doc" : "Whether text can be selected."
              },
              "textDirection" : {
                "!type" : "string",
                "!doc" : "Level text direction"
              },
              "textIndent" : {
                "!type" : "number",
                "!doc" : "Level text indent"
              },
              "format" : {
                "!type" : "fn()",
                "!doc" : "Text formatter"
              },
              "fontColor" : {
                "!type" : "string",
                "!doc" : "Level font color"
              },
              "adjustFontSize" : {
                "!type" : "bool|[bool]|Object",
                "!doc" : "Adjust font size"
              }
            }
          },
          "LevelWrapper" : {
            "!doc" : "Single timeline header level.",
            "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper",
            "prototype" : {
              "maxFontSize" : {
                "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#maxFontSize",
                "!doc" : "Maximum font size setting."
              },
              "fontDecoration" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontDecoration",
                "!doc" : "Font decoration settings."
              },
              "vAlign" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#vAlign",
                "!doc" : "Text vertical align settings."
              },
              "fontFamily" : {
                "!type" : "fn(opt_family?: string) -> string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontFamily",
                "!doc" : "Font family settings."
              },
              "fontStyle" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontStyle) -> +anychart.graphics.vector.Text.FontStyle|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontStyle",
                "!doc" : "Font style settings."
              },
              "fontWeight" : {
                "!type" : "fn(opt_weight?: string|number) -> string|number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontWeight",
                "!doc" : "Font weight settings."
              },
              "useHtml" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#useHtml",
                "!doc" : "Text useHtml settings."
              },
              "lineHeight" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#lineHeight",
                "!doc" : "Line height settings."
              },
              "enabled" : {
                "!type" : "fn(opt_state?: bool) -> bool|+anychart.core.ui.LabelsFactory",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#enabled",
                "!doc" : "Level state (enabled or disabled)."
              },
              "letterSpacing" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#letterSpacing",
                "!doc" : "Text letter spacing settings."
              },
              "stroke" : {
                "!type" : "fn(opt_settings?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|Object, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#stroke",
                "!doc" : "Stroke settings"
              },
              "fontVariant" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.FontVariant) -> +anychart.graphics.vector.Text.FontVariant|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontVariant",
                "!doc" : "Font variant settings."
              },
              "minFontSize" : {
                "!type" : "fn(opt_minFontSize?: number|string) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#minFontSize",
                "!doc" : "Minimum font size settings."
              },
              "hAlign" : {
                "!type" : "fn(opt_value?: string|+anychart.graphics.vector.Text.HAlign) -> +anychart.graphics.vector.Text.HAlign|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#hAlign",
                "!doc" : "Text horizontal align settings."
              },
              "fontOpacity" : {
                "!type" : "fn(opt_opacity?: number) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontOpacity",
                "!doc" : "Font opacity settings."
              },
              "fill" : {
                "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fill",
                "!doc" : "Fill settings"
              },
              "fontSize" : {
                "!type" : "fn(opt_size?: number|string) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontSize",
                "!doc" : "Font size settings."
              },
              "disablePointerEvents" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#disablePointerEvents",
                "!doc" : "Pointer events settings."
              },
              "textOverflow" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#textOverflow",
                "!doc" : "Text overflow settings."
              },
              "wordWrap" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#wordWrap",
                "!doc" : "Word-wrap mode."
              },
              "wordBreak" : {
                "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#wordBreak",
                "!doc" : "Word break mode."
              },
              "selectable" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#selectable",
                "!doc" : "Text selectable option."
              },
              "textDirection" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#textDirection",
                "!doc" : "Text direction settings."
              },
              "textIndent" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#textIndent",
                "!doc" : "Text indent settings."
              },
              "format" : {
                "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#format",
                "!doc" : "Function to format content text."
              },
              "fontColor" : {
                "!type" : "fn(opt_color?: string) -> string|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#fontColor",
                "!doc" : "Font color settings."
              },
              "adjustFontSize" : {
                "!type" : "fn(opt_bothOrByWidth?: Object|[bool]|bool, opt_byHeight?: bool) -> Object|+anychart.core.gantt.TimeLineHeader.LevelWrapper",
                "!url" : "8.3.0/anychart.core.gantt.TimeLineHeader.LevelWrapper#adjustFontSize",
                "!doc" : "Adjusting settings."
              }
            }
          }
        },
        "!doc" : "Namespace anychart.core.gantt.",
        "!url" : "8.3.0/anychart.core.gantt"
      },
      "utils" : {
        "!doc" : "Namespace anychart.core.utils.",
        "UnboundRegionsSettings" : {
          "!doc" : "Class for using in maps. Class is settings for regions that isn't linked to any series.",
          "!url" : "8.3.0/anychart.core.utils.UnboundRegionsSettings",
          "prototype" : {
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.UnboundRegionsSettings",
              "!url" : "8.3.0/anychart.core.utils.UnboundRegionsSettings#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.utils.UnboundRegionsSettings",
              "!url" : "8.3.0/anychart.core.utils.UnboundRegionsSettings#fill",
              "!doc" : "Fill settings."
            },
            "stroke" : {
              "!type" : "fn(opt_stroke?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.UnboundRegionsSettings",
              "!url" : "8.3.0/anychart.core.utils.UnboundRegionsSettings#stroke",
              "!doc" : "Stroke settings."
            }
          }
        },
        "Connector" : {
          "!doc" : "Connector settings class.",
          "!url" : "8.3.0/anychart.core.utils.Connector",
          "prototype" : {
            "length" : {
              "!type" : "fn(opt_value?: number|string) -> string|+anychart.core.utils.Connector",
              "!url" : "8.3.0/anychart.core.utils.Connector#length",
              "!doc" : "Connector length."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.map.series.Base|+anychart.core.utils.Connector",
              "!url" : "8.3.0/anychart.core.utils.Connector#stroke",
              "!doc" : "Stroke settings."
            }
          }
        },
        "QuarterSettings" : {
          "!doc" : "Quarter settings class.",
          "!url" : "8.3.0/anychart.core.utils.QuarterSettings",
          "prototype" : {
            "leftBottom" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Quarter|+anychart.core.utils.QuarterSettings",
              "!url" : "8.3.0/anychart.core.utils.QuarterSettings#leftBottom",
              "!doc" : "Left-bottom quarter settings."
            },
            "leftTop" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Quarter|+anychart.core.utils.QuarterSettings",
              "!url" : "8.3.0/anychart.core.utils.QuarterSettings#leftTop",
              "!doc" : "Left-top quarter settings."
            },
            "rightBottom" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Quarter|+anychart.core.utils.QuarterSettings",
              "!url" : "8.3.0/anychart.core.utils.QuarterSettings#rightBottom",
              "!doc" : "Right-bottom quarter settings."
            },
            "rightTop" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.Quarter|+anychart.core.utils.QuarterSettings",
              "!url" : "8.3.0/anychart.core.utils.QuarterSettings#rightTop",
              "!doc" : "Right-top quarter settings."
            }
          }
        },
        "StockInteractivity" : {
          "!doc" : "Interactivity class for stocks.",
          "!url" : "8.3.0/anychart.core.utils.StockInteractivity",
          "prototype" : {
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "multiSelectOnClick" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.StockInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#multiSelectOnClick",
              "!doc" : "Multi-select on click settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "scrollOnMouseWheel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.StockInteractivity",
              "!url" : "8.3.0/anychart.core.utils.StockInteractivity#scrollOnMouseWheel",
              "!doc" : "Interactivity scrolling settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "unselectOnClickOutOfPoint" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.StockInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#unselectOnClickOutOfPoint",
              "!doc" : "Unselect on click settings."
            },
            "zoomOnMouseWheel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.StockInteractivity",
              "!url" : "8.3.0/anychart.core.utils.StockInteractivity#zoomOnMouseWheel",
              "!doc" : "Interactivity zoom settings."
            }
          }
        },
        "LegendItemSettings" : {
          "!doc" : "Legend items are child elements of a legend.",
          "!url" : "8.3.0/anychart.core.utils.LegendItemSettings",
          "prototype" : {
            "iconSize" : {
              "!type" : "fn(opt_value?: number|string) -> number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconSize",
              "!doc" : "Icon size."
            },
            "iconMarkerType" : {
              "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconMarkerType",
              "!doc" : "Marker type."
            },
            "fontDecoration" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Decoration|string) -> +anychart.graphics.vector.Text.Decoration|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontDecoration",
              "!doc" : "Font decoration settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "vAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.VAlign|string) -> +anychart.graphics.vector.Text.VAlign|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#vAlign",
              "!doc" : "Text vertical align settings."
            },
            "iconStroke" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string|fn(), opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> fn()|+anychart.graphics.vector.Stroke|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconStroke",
              "!doc" : "Icon stroke settings"
            },
            "fontFamily" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontFamily",
              "!doc" : "Font family settings."
            },
            "fontStyle" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontStyle|string) -> +anychart.graphics.vector.Text.FontStyle|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontStyle",
              "!doc" : "Font style settings."
            },
            "fontWeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontWeight",
              "!doc" : "Font weight settings."
            },
            "useHtml" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#useHtml",
              "!doc" : "Text useHtml settings."
            },
            "lineHeight" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#lineHeight",
              "!doc" : "Text line height settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "textSettings" : {
              "!type" : "fn(opt_value?: string|Object, opt_value?: string|number|bool|fn()) -> Object|string|number|bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#textSettings",
              "!doc" : "Text settings."
            },
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.VisualBase#enabled",
              "!doc" : "Element state (enabled or disabled)."
            },
            "letterSpacing" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#letterSpacing",
              "!doc" : "Text letter spacing settings."
            },
            "iconMarkerStroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconMarkerStroke",
              "!doc" : "Icon marker stroke settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "fontVariant" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.FontVariant|string) -> +anychart.graphics.vector.Text.FontVariant|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontVariant",
              "!doc" : "Font variant settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "hAlign" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.HAlign|string) -> +anychart.graphics.vector.Text.HAlign|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#hAlign",
              "!doc" : "Text horizontal align settings."
            },
            "fontOpacity" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontOpacity",
              "!doc" : "Font opacity settings."
            },
            "text" : {
              "!type" : "fn(opt_value?: string|fn()) -> string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#text",
              "!doc" : "Item text."
            },
            "iconEnabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconEnabled",
              "!doc" : "Settings showing icons."
            },
            "iconTextSpacing" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconTextSpacing",
              "!doc" : "Spacing between icon and text"
            },
            "fontSize" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontSize",
              "!doc" : "Font size settings."
            },
            "iconHatchFill" : {
              "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconHatchFill",
              "!doc" : "Icon hatch fill settings"
            },
            "disablePointerEvents" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#disablePointerEvents",
              "!doc" : "Pointer events settings."
            },
            "textOverflow" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.TextOverflow|string) -> +anychart.graphics.vector.Text.TextOverflow|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#textOverflow",
              "!doc" : "Text overflow settings."
            },
            "wordWrap" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordWrap|string) -> +anychart.enums.WordWrap|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#wordWrap",
              "!doc" : "Word-wrap mode."
            },
            "zIndex" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
              "!doc" : "Z-index of the element."
            },
            "wordBreak" : {
              "!type" : "fn(opt_value?: +anychart.enums.WordBreak|string) -> +anychart.enums.WordBreak|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#wordBreak",
              "!doc" : "Word break mode."
            },
            "iconMarkerFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconMarkerFill",
              "!doc" : "Icon marker fill settings."
            },
            "print" : {
              "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
              "!url" : "8.3.0/anychart.core.VisualBase#print",
              "!doc" : "Prints all elements."
            },
            "selectable" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#selectable",
              "!doc" : "Text selectable option."
            },
            "textDirection" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Text.Direction|string) -> +anychart.graphics.vector.Text.Direction|string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#textDirection",
              "!doc" : "Text direction settings."
            },
            "disabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#disabled",
              "!doc" : "State settings."
            },
            "iconType" : {
              "!type" : "fn(opt_value?: +anychart.enums.LegendItemIconType|string|fn()) -> +anychart.enums.LegendItemIconType|string|fn()|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconType",
              "!doc" : "Icon type settings."
            },
            "iconFill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#iconFill",
              "!doc" : "Icon fill settings"
            },
            "textIndent" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#textIndent",
              "!doc" : "Text indent settings."
            },
            "format" : {
              "!type" : "fn(value: string|fn()) -> string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.utils.LegendItemSettings#format",
              "!doc" : "Item text."
            },
            "fontColor" : {
              "!type" : "fn(opt_value?: string) -> string|+anychart.core.utils.LegendItemSettings",
              "!url" : "8.3.0/anychart.core.Text#fontColor",
              "!doc" : "Font color settings."
            }
          }
        },
        "Padding" : {
          "!doc" : "Stores padding values. Can accept numbers and strings.",
          "!url" : "8.3.0/anychart.core.utils.Padding",
          "prototype" : {
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Padding",
              "!url" : "8.3.0/anychart.core.utils.Padding#right",
              "!doc" : "Getter for the right space."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Padding",
              "!url" : "8.3.0/anychart.core.utils.Padding#top",
              "!doc" : "Getter for the top space."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Padding",
              "!url" : "8.3.0/anychart.core.utils.Padding#bottom",
              "!doc" : "Getter for the bottom space."
            },
            "set" : {
              "!type" : "fn(opt_value1?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding",
              "!url" : "8.3.0/anychart.core.utils.Padding#set",
              "!doc" : "Sets all offsets."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Padding",
              "!url" : "8.3.0/anychart.core.utils.Padding#left",
              "!doc" : "Getter for the left space."
            }
          }
        },
        "Interactivity" : {
          "!doc" : "Interactivity class for charts.",
          "!url" : "8.3.0/anychart.core.utils.Interactivity",
          "prototype" : {
            "spotRadius" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.Interactivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#spotRadius",
              "!doc" : "Spot radius."
            },
            "selectionMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.utils.Interactivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#selectionMode",
              "!doc" : "Selection mode."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "hoverMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.HoverMode|string) -> +anychart.enums.HoverMode|string|+anychart.core.utils.Interactivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#hoverMode",
              "!doc" : "Hover mode."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "multiSelectOnClick" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.Interactivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#multiSelectOnClick",
              "!doc" : "Multi-select on click settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "unselectOnClickOutOfPoint" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.Interactivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#unselectOnClickOutOfPoint",
              "!doc" : "Unselect on click settings."
            }
          }
        },
        "MapInteractivity" : {
          "!doc" : "Interactivity class for maps.",
          "!url" : "8.3.0/anychart.core.utils.MapInteractivity",
          "prototype" : {
            "zoomOnDoubleClick" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.MapInteractivity#zoomOnDoubleClick",
              "!doc" : "Double click settings."
            },
            "spotRadius" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#spotRadius",
              "!doc" : "Spot radius."
            },
            "selectionMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#selectionMode",
              "!doc" : "Selection mode."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "hoverMode" : {
              "!type" : "fn(opt_value?: +anychart.enums.HoverMode|string) -> +anychart.enums.HoverMode|string|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#hoverMode",
              "!doc" : "Hover mode."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "drag" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.MapInteractivity#drag",
              "!doc" : "Enable/disable drag for map."
            },
            "multiSelectOnClick" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#multiSelectOnClick",
              "!doc" : "Multi-select on click settings."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "unselectOnClickOutOfPoint" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.Interactivity#unselectOnClickOutOfPoint",
              "!doc" : "Unselect on click settings."
            },
            "zoomOnMouseWheel" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.MapInteractivity#zoomOnMouseWheel",
              "!doc" : "Mouse wheel settings."
            },
            "keyboardZoomAndMove" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.MapInteractivity#keyboardZoomAndMove",
              "!doc" : "Keyboard settings."
            },
            "copyFormat" : {
              "!type" : "fn(opt_value?: fn()) -> fn()|+anychart.core.utils.MapInteractivity",
              "!url" : "8.3.0/anychart.core.utils.MapInteractivity#copyFormat",
              "!doc" : "Copy formatter function."
            }
          }
        },
        "ChartA11y" : {
          "!doc" : "Anychart chart accessibility class.",
          "!url" : "8.3.0/anychart.core.utils.ChartA11y",
          "prototype" : {
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.ChartA11y",
              "!url" : "8.3.0/anychart.core.utils.ChartA11y#enabled",
              "!doc" : "Accessibility state."
            },
            "mode" : {
              "!type" : "fn(opt_value?: +anychart.enums.A11yMode|string) -> +anychart.enums.A11yMode|string|+anychart.core.utils.ChartA11y",
              "!url" : "8.3.0/anychart.core.utils.ChartA11y#mode",
              "!doc" : "Accessibility mode."
            },
            "titleFormat" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.utils.ChartA11y",
              "!url" : "8.3.0/anychart.core.utils.ChartA11y#titleFormat",
              "!doc" : "Function to format title text."
            }
          }
        },
        "!url" : "8.3.0/anychart.core.utils",
        "OrdinalZoom" : {
          "!doc" : "Zoom settings aggregate.",
          "!url" : "8.3.0/anychart.core.utils.OrdinalZoom",
          "prototype" : {
            "continuous" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.OrdinalZoom",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#continuous",
              "!doc" : "Zoom mode."
            },
            "getEndRatio" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#getEndRatio",
              "!doc" : "Returns zoom end ratio."
            },
            "getStartRatio" : {
              "!type" : "fn() -> number",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#getStartRatio",
              "!doc" : "Returns zoom start ratio."
            },
            "setTo" : {
              "!type" : "fn(startRatio: number, endRatio: number) -> +anychart.core.utils.OrdinalZoom",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#setTo",
              "!doc" : "Sets zoom to passed start and end ratios."
            },
            "setToPointsCount" : {
              "!type" : "fn(pointsCount: number, opt_fromEnd?: bool, opt_scale?: +anychart.scales.Base) -> +anychart.core.utils.OrdinalZoom",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#setToPointsCount",
              "!doc" : "Setups zoom by passed values."
            },
            "setToValues" : {
              "!type" : "fn(startValue: +Object, endValue: +Object, opt_scale?: +anychart.scales.Base) -> +anychart.core.utils.OrdinalZoom",
              "!url" : "8.3.0/anychart.core.utils.OrdinalZoom#setToValues",
              "!doc" : "Setups zoom by passed values."
            }
          }
        },
        "Exports" : {
          "!doc" : "Composition view, that concatenates two different views.",
          "!url" : "8.3.0/anychart.core.utils.Exports",
          "prototype" : {
            "facebook" : {
              "!type" : "fn(opt_captionOrOptions?: string|Object, opt_link?: string, opt_name?: string, opt_description?: string, opt_width?: string, opt_height?: string, opt_appId?: string) -> Object",
              "!url" : "8.3.0/anychart.core.utils.Exports#facebook",
              "!doc" : "Facebook sharing settings"
            },
            "filename" : {
              "!type" : "fn(opt_value?: string) -> string",
              "!url" : "8.3.0/anychart.core.utils.Exports#filename",
              "!doc" : "Filename settings"
            },
            "image" : {
              "!type" : "fn(opt_widthOrOptions?: string|Object, opt_height?: string) -> Object",
              "!url" : "8.3.0/anychart.core.utils.Exports#image",
              "!doc" : "Image dimensions"
            },
            "linkedin" : {
              "!type" : "fn(opt_captionOrOptions?: string|Object, opt_description?: string, opt_width?: string, opt_height?: string) -> Object",
              "!url" : "8.3.0/anychart.core.utils.Exports#linkedin",
              "!doc" : "LinkedIn sharing settings"
            },
            "pinterest" : {
              "!type" : "fn(opt_linkOrOptions?: string|Object, opt_description?: string, opt_width?: string, opt_height?: string) -> Object",
              "!url" : "8.3.0/anychart.core.utils.Exports#pinterest",
              "!doc" : "Pinterest sharing settings"
            },
            "twitter" : {
              "!type" : "fn(opt_urlOrOptions?: string|Object, opt_width?: string, opt_height?: string) -> Object",
              "!url" : "8.3.0/anychart.core.utils.Exports#twitter",
              "!doc" : "Twitter sharing settings"
            }
          }
        },
        "Crossing" : {
          "!doc" : "Crossing class. The crossing class is used in quadrant chart.",
          "!url" : "8.3.0/anychart.core.utils.Crossing",
          "prototype" : {
            "stroke" : {
              "!type" : "fn(opt_color?: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: +anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: +anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Crossing",
              "!url" : "8.3.0/anychart.core.utils.Crossing#stroke",
              "!doc" : "Stroke settings."
            }
          }
        },
        "Bounds" : {
          "!doc" : "Stores information about visual location of an object.",
          "!url" : "8.3.0/anychart.core.utils.Bounds",
          "prototype" : {
            "width" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#width",
              "!doc" : "Width settings."
            },
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#right",
              "!doc" : "Right position."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#top",
              "!doc" : "Top position."
            },
            "minHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#minHeight",
              "!doc" : "Minimum height."
            },
            "height" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#height",
              "!doc" : "Height settings."
            },
            "maxHeight" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#maxHeight",
              "!doc" : "Maximum height."
            },
            "minWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#minWidth",
              "!doc" : "Minimum width."
            },
            "toRect" : {
              "!type" : "fn(opt_parentLeftOrRect?: number|+anychart.math.Rect|Object, opt_parentTop?: number, opt_parentWidth?: number, opt_parentHeight?: number) -> +anychart.math.Rect",
              "!url" : "8.3.0/anychart.core.utils.Bounds#toRect",
              "!doc" : "Normalizes all info stored in this object."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#bottom",
              "!doc" : "Bottom position."
            },
            "set" : {
              "!type" : "fn(opt_xOrRect?: number|string|[number]|+anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#set",
              "!doc" : "Resets all values of the object by passed values."
            },
            "maxWidth" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#maxWidth",
              "!doc" : "Maximum width"
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Bounds",
              "!url" : "8.3.0/anychart.core.utils.Bounds#left",
              "!doc" : "Left position."
            }
          }
        },
        "A11y" : {
          "!doc" : "Anychart accessibility class.",
          "!url" : "8.3.0/anychart.core.utils.A11y",
          "prototype" : { }
        },
        "Margin" : {
          "!doc" : "Stores margins values. Can accept numbers and strings.",
          "!url" : "8.3.0/anychart.core.utils.Margin",
          "prototype" : {
            "right" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Margin",
              "!url" : "8.3.0/anychart.core.utils.Margin#right",
              "!doc" : "Getter for the right space."
            },
            "top" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Margin",
              "!url" : "8.3.0/anychart.core.utils.Margin#top",
              "!doc" : "Getter for the top space."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "bottom" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Margin",
              "!url" : "8.3.0/anychart.core.utils.Margin#bottom",
              "!doc" : "Getter for the bottom space."
            },
            "set" : {
              "!type" : "fn(opt_value1?: string|number|[number|string]|Object, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin",
              "!url" : "8.3.0/anychart.core.utils.Margin#set",
              "!doc" : "Sets all offsets."
            },
            "left" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.utils.Margin",
              "!url" : "8.3.0/anychart.core.utils.Margin#left",
              "!doc" : "Getter for the left space."
            }
          }
        },
        "SeriesA11y" : {
          "!doc" : "Anychart series accessibility class.",
          "!url" : "8.3.0/anychart.core.utils.SeriesA11y",
          "prototype" : {
            "enabled" : {
              "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.utils.SeriesA11y",
              "!url" : "8.3.0/anychart.core.utils.SeriesA11y#enabled",
              "!doc" : "Accessibility state."
            },
            "titleFormat" : {
              "!type" : "fn(opt_value?: fn()|string) -> fn()|string|+anychart.core.utils.SeriesA11y",
              "!url" : "8.3.0/anychart.core.utils.SeriesA11y#titleFormat",
              "!doc" : "Function to format title text."
            }
          }
        },
        "Quarter" : {
          "!doc" : "Quarter settings representation class.",
          "!url" : "8.3.0/anychart.core.utils.Quarter",
          "prototype" : {
            "cornerType" : {
              "!type" : "fn(opt_value?: +anychart.enums.BackgroundCornersType|string) -> +anychart.enums.BackgroundCornersType|string|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#cornerType",
              "!doc" : "Corner type."
            },
            "margin" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Margin|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.utils.Quarter#margin",
              "!doc" : "Margin settings."
            },
            "label" : {
              "!type" : "fn(opt_value?: string|number|bool|Object, opt_value?: bool|Object|string) -> +anychart.core.ui.Label|+anychart.core.Chart",
              "!url" : "8.3.0/anychart.core.utils.Quarter#label",
              "!doc" : "Label settings."
            },
            "padding" : {
              "!type" : "fn(opt_value?: [number|string]|Object|string|number, opt_value2?: string|number, opt_value3?: string|number, opt_value4?: string|number) -> +anychart.core.utils.Padding|+anychart.core.Chart",
              "!url" : "8.3.0/anychart.core.utils.Quarter#padding",
              "!doc" : "Padding settings."
            },
            "stroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#stroke",
              "!doc" : "Stroke settings."
            },
            "corners" : {
              "!type" : "fn(opt_value?: number|string|[number], opt_topRight?: number|string, opt_bottomRight?: number|string, opt_bottomLeft?: number|string) -> [number]|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#corners",
              "!doc" : "Corner radius."
            },
            "fill" : {
              "!type" : "fn(value: +anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#fill",
              "!doc" : "Fill settings."
            },
            "rightStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#rightStroke",
              "!doc" : "Right stroke settings."
            },
            "title" : {
              "!type" : "fn(opt_value?: bool|Object|string) -> +anychart.core.ui.Title|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.utils.Quarter#title",
              "!doc" : "Title settings."
            },
            "leftStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#leftStroke",
              "!doc" : "Left stroke settings."
            },
            "bottomStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#bottomStroke",
              "!doc" : "Bottom stroke settings."
            },
            "topStroke" : {
              "!type" : "fn(value: +anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Quarter",
              "!url" : "8.3.0/anychart.core.ui.Background#topStroke",
              "!doc" : "Top stroke settings."
            }
          }
        },
        "Error" : {
          "!doc" : "Class representing series error.",
          "!url" : "8.3.0/anychart.core.utils.Error",
          "prototype" : {
            "xLowerError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#xLowerError",
              "!doc" : "X lower error settings."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "valueLowerError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#valueLowerError",
              "!doc" : "Value lower error settings."
            },
            "valueErrorStroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#valueErrorStroke",
              "!doc" : "Value error stroke settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "xErrorStroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#xErrorStroke",
              "!doc" : "X-error stroke settings."
            },
            "mode" : {
              "!type" : "fn(opt_value?: +anychart.enums.ErrorMode|string) -> +anychart.enums.ErrorMode|string|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#mode",
              "!doc" : "Error mode settings."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "valueUpperError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#valueUpperError",
              "!doc" : "Value upper error settings."
            },
            "valueError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#valueError",
              "!doc" : "Value error settings."
            },
            "xError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#xError",
              "!doc" : "X-error settings."
            },
            "valueErrorWidth" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#valueErrorWidth",
              "!doc" : "Value width settings."
            },
            "xUpperError" : {
              "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#xUpperError",
              "!doc" : "X upper error settings."
            },
            "xErrorWidth" : {
              "!type" : "fn(opt_value?: number) -> number|+anychart.core.utils.Error",
              "!url" : "8.3.0/anychart.core.utils.Error#xErrorWidth",
              "!doc" : "X-error width settings."
            }
          }
        },
        "Animation" : {
          "!doc" : "Animation class. The animation class is used in maps.",
          "!url" : "8.3.0/anychart.core.utils.Animation",
          "prototype" : {
            "duration" : {
              "!type" : "fn(value: number) -> number|+anychart.core.utils.Animation",
              "!url" : "8.3.0/anychart.core.utils.Animation#duration",
              "!doc" : "Animation duration."
            },
            "enabled" : {
              "!type" : "fn(value: bool) -> bool|+anychart.core.utils.Animation",
              "!url" : "8.3.0/anychart.core.utils.Animation#enabled",
              "!doc" : "Animation state (enabled or disabled)."
            },
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            }
          }
        }
      },
      "radar" : {
        "series" : {
          "Line" : {
            "!doc" : "Define Line series type.",
            "!url" : "8.3.0/anychart.core.radar.series.Line",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.radar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Line#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.radar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Connect missing points setting."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object|string, opt_value?: +Object) -> +Object|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#meta",
                "!doc" : "Meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xVal: +Object, yVal: +Object, opt_xSubRangeRatio?: number) -> +Object",
                "!url" : "8.3.0/anychart.core.radar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hover",
                "!doc" : "Hovers points or series."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Line",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Area" : {
            "!doc" : "Define Area series type.",
            "!url" : "8.3.0/anychart.core.radar.series.Area",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.radar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Area#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.radar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Area#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Connect missing points setting."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Area#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object|string, opt_value?: +Object) -> +Object|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#meta",
                "!doc" : "Meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xVal: +Object, yVal: +Object, opt_xSubRangeRatio?: number) -> +Object",
                "!url" : "8.3.0/anychart.core.radar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hover",
                "!doc" : "Hovers points or series."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Area",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "ContinuousBase" : {
            "!doc" : "A base for all continuous series, like lines, splines, areas, etc.",
            "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#name",
                "!doc" : "Series name settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "connectMissingPoints" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#connectMissingPoints",
                "!doc" : "Connect missing points setting."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object|string, opt_value?: +Object) -> +Object|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#meta",
                "!doc" : "Meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "transformXY" : {
                "!type" : "fn(xVal: +Object, yVal: +Object, opt_xSubRangeRatio?: number) -> +Object",
                "!url" : "8.3.0/anychart.core.radar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hover",
                "!doc" : "Hovers points or series."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.Base#color",
                "!doc" : "Color settings."
              },
              "markers" : {
                "!type" : "fn(opt_value?: Object|bool|string) -> +anychart.core.ui.MarkersFactory|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.radar.series.ContinuousBase#markers",
                "!doc" : "Markers settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.ContinuousBase",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Marker" : {
            "!doc" : "Define Marker series type.",
            "!url" : "8.3.0/anychart.core.radar.series.Marker",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.radar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "stroke" : {
                "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#stroke",
                "!doc" : "Stroke settings."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.radar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "fill" : {
                "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#fill",
                "!doc" : "Fill settings."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "type" : {
                "!type" : "fn(opt_value?: +anychart.enums.MarkerType|string|fn()) -> +anychart.enums.MarkerType|string|fn()|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#type",
                "!doc" : "Marker type settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "hatchFill" : {
                "!type" : "fn(opt_patternFillOrType?: +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.graphics.vector.HatchFill.HatchFillType|string, opt_color?: string, opt_thickness?: number, opt_size?: number) -> +anychart.graphics.vector.PatternFill|+anychart.graphics.vector.HatchFill|fn()|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#hatchFill",
                "!doc" : "Hatch fill settings."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object|string, opt_value?: +Object) -> +Object|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#meta",
                "!doc" : "Meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn() -> +anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#unhover",
                "!doc" : "Removes hover from the series point or series."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "size" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Marker#size",
                "!doc" : "Marker size."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xVal: +Object, yVal: +Object, opt_xSubRangeRatio?: number) -> +Object",
                "!url" : "8.3.0/anychart.core.radar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hover",
                "!doc" : "Hovers points or series."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.radar.series.Base#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Marker",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "Base" : {
            "!doc" : "Base class for all radar series.",
            "!url" : "8.3.0/anychart.core.radar.series.Base",
            "prototype" : {
              "selected" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#selected",
                "!doc" : "Selected state settings."
              },
              "width" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#width",
                "!doc" : "Width settings."
              },
              "right" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#right",
                "!doc" : "Right bound settings."
              },
              "top" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#top",
                "!doc" : "Top bound settings."
              },
              "unselect" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#unselect",
                "!doc" : "Deselects all selected points."
              },
              "minHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minHeight",
                "!doc" : "Minimum height."
              },
              "getExcludedPoints" : {
                "!type" : "fn() -> [+anychart.core.Point]",
                "!url" : "8.3.0/anychart.core.radar.series.Base#getExcludedPoints",
                "!doc" : "Returns an array of excluded points."
              },
              "height" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#height",
                "!doc" : "Height settings."
              },
              "selectionMode" : {
                "!type" : "fn(opt_value?: +anychart.enums.SelectionMode|string) -> +anychart.enums.SelectionMode|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#selectionMode",
                "!doc" : "Selection mode."
              },
              "listenOnce" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listenOnce",
                "!doc" : "Adds a single time event listener."
              },
              "tooltip" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#tooltip",
                "!doc" : "Tooltip settings."
              },
              "unlisten" : {
                "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlisten",
                "!doc" : "Removes the listener."
              },
              "enabled" : {
                "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#enabled",
                "!doc" : "Element state (enabled or disabled)."
              },
              "id" : {
                "!type" : "fn(opt_value?: string|number) -> string|number|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#id",
                "!doc" : "Series id."
              },
              "hovered" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hovered",
                "!doc" : "Hovered state settings."
              },
              "maxHeight" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxHeight",
                "!doc" : "Maximum height."
              },
              "removeAllListeners" : {
                "!type" : "fn(opt_type?: string) -> number",
                "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
                "!doc" : "Removes all listeners."
              },
              "minLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#minLabels",
                "!doc" : "Minimum labels settings."
              },
              "minWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#minWidth",
                "!doc" : "Minimum width."
              },
              "normal" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#normal",
                "!doc" : "Normal state settings."
              },
              "unlistenByKey" : {
                "!type" : "fn(key: Object) -> bool",
                "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
                "!doc" : "Removes the listener by the key."
              },
              "xScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Ordinal|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#xScale",
                "!doc" : "X-scale settings."
              },
              "name" : {
                "!type" : "fn(opt_value?: string) -> string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#name",
                "!doc" : "Series name settings."
              },
              "includeAllPoints" : {
                "!type" : "fn() -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includeAllPoints",
                "!doc" : "Includes all excluded points."
              },
              "labels" : {
                "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#labels",
                "!doc" : "Labels settings."
              },
              "listen" : {
                "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
                "!url" : "8.3.0/anychart.core.Base#listen",
                "!doc" : "Adds an event listener."
              },
              "select" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#select",
                "!doc" : "Select settings."
              },
              "getStat" : {
                "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
                "!url" : "8.3.0/anychart.core.SeriesBase#getStat",
                "!doc" : "Getter for the statistics value by key."
              },
              "keepOnlyPoints" : {
                "!type" : "fn(indexes: number|[number])",
                "!url" : "8.3.0/anychart.core.radar.series.Base#keepOnlyPoints",
                "!doc" : "Keep only the specified points."
              },
              "includePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#includePoint",
                "!doc" : "Includes excluded points with the specified indexes."
              },
              "getPoint" : {
                "!type" : "fn(index: number) -> +anychart.core.SeriesPoint",
                "!url" : "8.3.0/anychart.core.SeriesBase#getPoint",
                "!doc" : "Gets wrapped point by index."
              },
              "maxLabels" : {
                "!type" : "fn(opt_settings?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#maxLabels",
                "!doc" : "Maximum labels settings."
              },
              "colorScale" : {
                "!type" : "fn(opt_settings?: +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.LinearColor|+anychart.scales.OrdinalColor|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.SeriesBase#colorScale",
                "!doc" : "Color scale settings."
              },
              "yScale" : {
                "!type" : "fn(opt_value?: +anychart.scales.Base|Object|+anychart.enums.ScaleTypes|string) -> +anychart.scales.Base|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#yScale",
                "!doc" : "Y-scale settings."
              },
              "zIndex" : {
                "!type" : "fn(opt_value?: number) -> number|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
                "!doc" : "Z-index of the element."
              },
              "meta" : {
                "!type" : "fn(opt_value?: +Object|string, opt_value?: +Object) -> +Object|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#meta",
                "!doc" : "Meta data settings."
              },
              "print" : {
                "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
                "!url" : "8.3.0/anychart.core.VisualBase#print",
                "!doc" : "Prints all elements."
              },
              "unhover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#unhover",
                "!doc" : "Unhover settings."
              },
              "bounds" : {
                "!type" : "fn(opt_value?: +anychart.utils.RectObj|+anychart.math.Rect|+anychart.core.utils.Bounds|number|string, opt_y?: number|string, opt_width?: number|string, opt_height?: number|string) -> +anychart.core.utils.Bounds|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bounds",
                "!doc" : "Bounds settings."
              },
              "bottom" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#bottom",
                "!doc" : "Bottom bound settings."
              },
              "getPixelBounds" : {
                "!type" : "fn() -> +anychart.math.Rect",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#getPixelBounds",
                "!doc" : "Returns pixel bounds."
              },
              "maxWidth" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#maxWidth",
                "!doc" : "Maximum width."
              },
              "excludePoint" : {
                "!type" : "fn(indexes: number|[number]) -> bool",
                "!url" : "8.3.0/anychart.core.radar.series.Base#excludePoint",
                "!doc" : "Excludes points at the specified index."
              },
              "transformXY" : {
                "!type" : "fn(xVal: +Object, yVal: +Object, opt_xSubRangeRatio?: number) -> +Object",
                "!url" : "8.3.0/anychart.core.radar.series.Base#transformXY",
                "!doc" : "Transforms values to pixel coordinates."
              },
              "hover" : {
                "!type" : "fn(opt_value?: number|[number]) -> +anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#hover",
                "!doc" : "Hovers points or series."
              },
              "legendItem" : {
                "!type" : "fn(opt_value?: Object) -> +anychart.core.utils.LegendItemSettings|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#legendItem",
                "!doc" : "Legend item settings."
              },
              "data" : {
                "!type" : "fn(opt_value?: +anychart.data.View|+anychart.data.Set|+Array|string, opt_csvSettings?: +anychart.enums.TextParsingMode|string|+anychart.data.TextParsingSettings) -> +anychart.data.View|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#data",
                "!doc" : "Data settings."
              },
              "color" : {
                "!type" : "fn(value: string) -> string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.radar.series.Base#color",
                "!doc" : "Color settings."
              },
              "left" : {
                "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.radar.series.Base",
                "!url" : "8.3.0/anychart.core.VisualBaseWithBounds#left",
                "!doc" : "Left bound settings."
              }
            }
          },
          "!doc" : "Namespace anychart.core.radar.series.",
          "!url" : "8.3.0/anychart.core.radar.series"
        },
        "!doc" : "Namespace anychart.core.radar.",
        "!url" : "8.3.0/anychart.core.radar"
      },
      "pert" : {
        "Tasks" : {
          "!doc" : "Pert tasks settings collector.",
          "!url" : "8.3.0/anychart.core.pert.Tasks",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#selected",
              "!doc" : "Selected state settings."
            },
            "upperLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#upperLabels",
              "!doc" : "Upper labels settings."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#tooltip",
              "!doc" : "Tooltip settings."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#normal",
              "!doc" : "Normal state settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#stroke",
              "!doc" : "Stroke settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.pert.Tasks|+anychart.core.StateSettings",
              "!url" : "8.3.0/anychart.core.pert.Tasks#fill",
              "!doc" : "Fill settings."
            },
            "dummyFill" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Fill|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|+anychart.core.pert.Tasks|+anychart.core.StateSettings",
              "!url" : "8.3.0/anychart.core.pert.Tasks#dummyFill",
              "!doc" : "Fill settings."
            },
            "dummyStroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#dummyStroke",
              "!doc" : "Stroke settings."
            },
            "lowerLabels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#lowerLabels",
              "!doc" : "Lower labels settings."
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.pert.Tasks",
              "!url" : "8.3.0/anychart.core.pert.Tasks#color",
              "!doc" : "Color settings."
            }
          }
        },
        "CriticalPath" : {
          "!doc" : "Pert critical path settings collector.",
          "!url" : "8.3.0/anychart.core.pert.CriticalPath",
          "prototype" : {
            "listen" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listen",
              "!doc" : "Adds an event listener."
            },
            "listenOnce" : {
              "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
              "!url" : "8.3.0/anychart.core.Base#listenOnce",
              "!doc" : "Adds a single time event listener."
            },
            "milestones" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.pert.Milestones|+anychart.core.pert.CriticalPath",
              "!url" : "8.3.0/anychart.core.pert.CriticalPath#milestones",
              "!doc" : "Milestones settings."
            },
            "removeAllListeners" : {
              "!type" : "fn(opt_type?: string) -> number",
              "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
              "!doc" : "Removes all listeners."
            },
            "tasks" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.pert.Tasks|+anychart.core.pert.CriticalPath",
              "!url" : "8.3.0/anychart.core.pert.CriticalPath#tasks",
              "!doc" : "Tasks settings."
            },
            "unlisten" : {
              "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlisten",
              "!doc" : "Removes the listener."
            },
            "unlistenByKey" : {
              "!type" : "fn(key: Object) -> bool",
              "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
              "!doc" : "Removes the listener by the key."
            }
          }
        },
        "Milestones" : {
          "!doc" : "Pert milestones settings collector.",
          "!url" : "8.3.0/anychart.core.pert.Milestones",
          "prototype" : {
            "selected" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#selected",
              "!doc" : "Selected state settings."
            },
            "shape" : {
              "!type" : "fn(opt_value?: +anychart.enums.MilestoneShape|string) -> +anychart.enums.MilestoneShape|string|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#shape",
              "!doc" : "Milestones shape."
            },
            "tooltip" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.Tooltip|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#tooltip",
              "!doc" : "Tooltip settings."
            },
            "hovered" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#hovered",
              "!doc" : "Hovered state settings."
            },
            "normal" : {
              "!type" : "fn(opt_value?: Object) -> +anychart.core.StateSettings|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#normal",
              "!doc" : "Normal state settings."
            },
            "stroke" : {
              "!type" : "fn(opt_value?: fn()|+anychart.graphics.vector.Stroke|+anychart.graphics.vector.ColoredFill|string, opt_thickness?: number, opt_dashpattern?: string, opt_lineJoin?: string|+anychart.graphics.vector.StrokeLineJoin, opt_lineCap?: string|+anychart.graphics.vector.StrokeLineCap) -> +anychart.graphics.vector.Stroke|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#stroke",
              "!doc" : "Stroke settings."
            },
            "labels" : {
              "!type" : "fn(opt_value?: Object|bool) -> +anychart.core.ui.LabelsFactory|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#labels",
              "!doc" : "Labels settings."
            },
            "fill" : {
              "!type" : "fn(opt_value?: +anychart.graphics.vector.Fill|fn()|string|[+anychart.graphics.vector.GradientKey|string], opt_value?: number, opt_value?: bool|+anychart.graphics.vector.Rect|Object|number, opt_value?: number|+anychart.graphics.math.Rect, opt_opacity?: number, opt_fx?: number, opt_fy?: number) -> +anychart.graphics.vector.Fill|fn()|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#fill",
              "!doc" : "Fill settings."
            },
            "size" : {
              "!type" : "fn(opt_value?: number|string) -> number|string|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#size",
              "!doc" : "Milestones size settings"
            },
            "color" : {
              "!type" : "fn(value: string) -> string|+anychart.core.pert.Milestones",
              "!url" : "8.3.0/anychart.core.pert.Milestones#color",
              "!doc" : "Color settings."
            }
          }
        },
        "!doc" : "Namespace anychart.core.pert.",
        "!url" : "8.3.0/anychart.core.pert"
      },
      "VisualBase" : {
        "!doc" : "Base class for all elements.",
        "!url" : "8.3.0/anychart.core.VisualBase",
        "prototype" : {
          "enabled" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.VisualBase",
            "!url" : "8.3.0/anychart.core.VisualBase#enabled",
            "!doc" : "Element state (enabled or disabled)."
          },
          "listen" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listen",
            "!doc" : "Adds an event listener."
          },
          "listenOnce" : {
            "!type" : "fn(type: string, listener: function(e:Object), opt_useCapture?: bool, opt_listenerScope?: Object) -> Object",
            "!url" : "8.3.0/anychart.core.Base#listenOnce",
            "!doc" : "Adds a single time event listener."
          },
          "print" : {
            "!type" : "fn(opt_paperSizeOrOptions?: +anychart.graphics.vector.PaperSize|Object, opt_landscape?: bool)",
            "!url" : "8.3.0/anychart.core.VisualBase#print",
            "!doc" : "Prints all elements."
          },
          "removeAllListeners" : {
            "!type" : "fn(opt_type?: string) -> number",
            "!url" : "8.3.0/anychart.core.Base#removeAllListeners",
            "!doc" : "Removes all listeners."
          },
          "unlisten" : {
            "!type" : "fn(type: string, listener: fn(), opt_useCapture?: bool, opt_listenerScope?: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlisten",
            "!doc" : "Removes the listener."
          },
          "unlistenByKey" : {
            "!type" : "fn(key: Object) -> bool",
            "!url" : "8.3.0/anychart.core.Base#unlistenByKey",
            "!doc" : "Removes the listener by the key."
          },
          "zIndex" : {
            "!type" : "fn(opt_value?: number) -> number|+anychart.core.VisualBase",
            "!url" : "8.3.0/anychart.core.VisualBase#zIndex",
            "!doc" : "Z-index of the element."
          }
        }
      },
      "SeriesPoint" : {
        "!doc" : "Point representing all points that belongs to series-based chart.",
        "!url" : "8.3.0/anychart.core.SeriesPoint",
        "prototype" : {
          "selected" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.SeriesPoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#selected",
            "!doc" : "Select point state."
          },
          "getStackZero" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackZero",
            "!doc" : "Returns stack zero of the point."
          },
          "getIndex" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.Point#getIndex",
            "!doc" : "Getter for the point index in chart or series."
          },
          "getStackValue" : {
            "!type" : "fn() -> number",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getStackValue",
            "!doc" : "Returns stack value of the point."
          },
          "hovered" : {
            "!type" : "fn(opt_value?: bool) -> bool|+anychart.core.SeriesPoint",
            "!url" : "8.3.0/anychart.core.SeriesPoint#hovered",
            "!doc" : "Hover point state."
          },
          "getStat" : {
            "!type" : "fn(key: +anychart.enums.Statistics|string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#getStat",
            "!doc" : "Getter for the statistics value by key."
          },
          "getSeries" : {
            "!type" : "fn() -> +anychart.core.SeriesBase",
            "!url" : "8.3.0/anychart.core.SeriesPoint#getSeries",
            "!doc" : "Getter for series which current point belongs to."
          },
          "set" : {
            "!type" : "fn(field: string, value: +Object) -> +anychart.core.SeriesPoint",
            "!url" : "8.3.0/anychart.core.Point#set",
            "!doc" : "Sets the field of the point data row to the specified value."
          },
          "exists" : {
            "!type" : "fn() -> bool",
            "!url" : "8.3.0/anychart.core.SeriesPoint#exists",
            "!doc" : "Checks if the point with the given index exists in a dataset."
          },
          "getChart" : {
            "!type" : "fn() -> +anychart.core.SeparateChart",
            "!url" : "8.3.0/anychart.core.Point#getChart",
            "!doc" : "Getter for the chart which current point belongs to."
          },
          "get" : {
            "!type" : "fn(field: string) -> +Object",
            "!url" : "8.3.0/anychart.core.Point#get",
            "!doc" : "Fetches a field value from point data row by its name."
          }
        }
      }
    },
    "utils" : {
      "hideTooltips" : {
        "!type" : "fn(opt_force?: bool)",
        "!url" : "8.3.0/anychart.utils#hideTooltips",
        "!doc" : "Hide all tooltips."
      },
      "htmlTableFromCsv" : {
        "!type" : "fn(csv: string, opt_title?: string, opt_asString?: bool, opt_csvSettings?: Object) -> Element",
        "!url" : "8.3.0/anychart.utils#htmlTableFromCsv",
        "!doc" : "Creates HTML Table from CSV string."
      },
      "json2xml" : {
        "!type" : "fn(json: Object|string, opt_rootNodeName?: string, opt_returnAsXmlNode?: bool) -> string|Node",
        "!url" : "8.3.0/anychart.utils#json2xml",
        "!doc" : "Converts JSON object to an XML Node tree or String (string by default)."
      },
      "xml2json" : {
        "!type" : "fn(xml: string|Node) -> Object|string",
        "!url" : "8.3.0/anychart.utils#xml2json",
        "!doc" : "Public function that parses XML and returns JSON. It hides all errors in"
      },
      "RectObj" : {
        "!doc" : "Type definition for the rectangle.",
        "!url" : "8.3.0/anychart.utils.RectObj",
        "prototype" : {
          "bottom" : {
            "!type" : "number|string",
            "!doc" : "Bottom position"
          },
          "height" : {
            "!type" : "number|string",
            "!doc" : "Rectangle height"
          },
          "left" : {
            "!type" : "number|string",
            "!doc" : "Left position"
          },
          "right" : {
            "!type" : "number|string",
            "!doc" : "Right position"
          },
          "top" : {
            "!type" : "number|string",
            "!doc" : "Top position"
          },
          "width" : {
            "!type" : "number|string",
            "!doc" : "Rectangle width"
          }
        }
      },
      "!doc" : "The anychart.utils namespace contains static utility methods.",
      "!url" : "8.3.0/anychart.utils"
    },
    "radar" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Radar",
      "!url" : "8.3.0/anychart#radar",
      "!doc" : "Creates and returns a Radar chart."
    },
    "format" : {
      "parseDateTime" : {
        "!type" : "fn(value: +Object, opt_format?: string, opt_baseDate?: Date, opt_locale?: string|+anychart.format.Locale) -> Date",
        "!url" : "8.3.0/anychart.format#parseDateTime",
        "!doc" : "Parses input value to date."
      },
      "subs" : {
        "!type" : "fn(string: string, var_args: +Object) -> string",
        "!url" : "8.3.0/anychart.format#subs",
        "!doc" : "Formats for string substitution."
      },
      "!doc" : "The anychart.format namespace contains different static functions for format of texts, dates, numbers, etc.",
      "Locale" : {
        "!doc" : "Type definition for localization.",
        "!url" : "8.3.0/anychart.format.Locale",
        "prototype" : {
          "dateTimeLocale" : {
            "!type" : "+anychart.format.DateTimeLocale",
            "!doc" : "Date time locale."
          },
          "messages" : {
            "!type" : "+Object",
            "!doc" : "Messages locale."
          },
          "numberLocale" : {
            "!type" : "+anychart.format.NumberLocale",
            "!doc" : "Number locale."
          }
        }
      },
      "getDateTimeFormats" : {
        "!type" : "fn(identifier: string, opt_locale?: +anychart.format.Locale) -> string",
        "!url" : "8.3.0/anychart.format#getDateTimeFormats",
        "!doc" : "Gets all date time formats from locale by identifier."
      },
      "Context" : {
        "!doc" : "The Context class contains methods to show some information from extra fields in the format function context.",
        "!url" : "8.3.0/anychart.format.Context",
        "prototype" : {
          "getData" : {
            "!type" : "fn(value: +Object) -> +Object",
            "!url" : "8.3.0/anychart.format.Context#getData",
            "!doc" : "Get data value."
          },
          "getMeta" : {
            "!type" : "fn(name: string) -> +Object",
            "!url" : "8.3.0/anychart.format.Context#getMeta",
            "!doc" : "Gets meta value."
          },
          "getStat" : {
            "!type" : "fn(key: string) -> +Object",
            "!url" : "8.3.0/anychart.format.Context#getStat",
            "!doc" : "Gets statistics value by key."
          }
        }
      },
      "dateTime" : {
        "!type" : "fn(date: number|Date, opt_format?: string, opt_timeZone?: number, opt_locale?: string|+anychart.format.Locale) -> string",
        "!url" : "8.3.0/anychart.format#dateTime",
        "!doc" : "Formats date time by the pattern."
      },
      "outputDateFormat" : {
        "!type" : "fn(opt_value?: string) -> string",
        "!url" : "8.3.0/anychart.format#outputDateFormat",
        "!doc" : "Output date format settings to be used."
      },
      "inputDateTimeFormat" : {
        "!type" : "fn(opt_value?: string) -> string",
        "!url" : "8.3.0/anychart.format#inputDateTimeFormat",
        "!doc" : "Input date time format"
      },
      "locales" : {
        "!doc" : "Contains a list of the used localizations. <br/>",
        "!url" : "8.3.0/anychart.format#locales",
        "!type" : "Object.<string, anychart.format.Locale>"
      },
      "outputLocale" : {
        "!type" : "fn(opt_value?: string|+anychart.format.Locale) -> string|+anychart.format.Locale",
        "!url" : "8.3.0/anychart.format#outputLocale",
        "!doc" : "Output format settings to be used."
      },
      "!url" : "8.3.0/anychart.format",
      "NumberLocale" : {
        "!doc" : "Type definition for number locale.",
        "!url" : "8.3.0/anychart.format.NumberLocale",
        "prototype" : {
          "decimalPoint" : {
            "!type" : "string",
            "!doc" : "String to modify the decimal separator"
          },
          "decimalsCount" : {
            "!type" : "number",
            "!doc" : "Desired number of decimals"
          },
          "groupsSeparator" : {
            "!type" : "string",
            "!doc" : "String to separate every three digits."
          },
          "scale" : {
            "!type" : "Object|bool",
            "!doc" : "Automatic scaling."
          },
          "scaleSuffixSeparator" : {
            "!type" : "string",
            "!doc" : "Additive between the suffix of scale and the number."
          },
          "useBracketsForNegative" : {
            "!type" : "bool",
            "!doc" : "To Use brackets for negative numbers or no."
          },
          "zeroFillDecimals" : {
            "!type" : "bool",
            "!doc" : "Whether to fill in the remaining decimal places zeros."
          }
        }
      },
      "DateTimeLocale" : {
        "!doc" : "Type definition for date time localization.",
        "!url" : "8.3.0/anychart.format.DateTimeLocale",
        "prototype" : {
          "standaloneNarrowWeekdays" : {
            "!type" : "[string]",
            "!doc" : "Standalone narrow weekdays"
          },
          "standaloneShortMonths" : {
            "!type" : "[string]",
            "!doc" : "Standalone short months"
          },
          "shortMonths" : {
            "!type" : "[string]",
            "!doc" : "Short months"
          },
          "weekdays" : {
            "!type" : "[string]",
            "!doc" : "Weekdays"
          },
          "ampms" : {
            "!type" : "[string]",
            "!doc" : "AM/PM time"
          },
          "months" : {
            "!type" : "[string]",
            "!doc" : "Months"
          },
          "firstDayOfWeek" : {
            "!type" : "number",
            "!doc" : "First day of week"
          },
          "shortQuarters" : {
            "!type" : "[string]",
            "!doc" : "Short quarters"
          },
          "timeFormats" : {
            "!type" : "string",
            "!doc" : "Time formats"
          },
          "standaloneMonths" : {
            "!type" : "[string]",
            "!doc" : "Standalone months"
          },
          "weekendRange" : {
            "!type" : "[number]",
            "!doc" : "Weekend range"
          },
          "quarters" : {
            "!type" : "[string]",
            "!doc" : "Quarters"
          },
          "dateFormats" : {
            "!type" : "string",
            "!doc" : "Date formats"
          },
          "erasNames" : {
            "!type" : "[string]",
            "!doc" : "Eras names"
          },
          "eras" : {
            "!type" : "[string]",
            "!doc" : "Eras value."
          },
          "standaloneNarrowMonths" : {
            "!type" : "[string]",
            "!doc" : "Standalone narrow months"
          },
          "dateTimeFormats" : {
            "!type" : "string",
            "!doc" : "Date time formats"
          },
          "shortWeekdays" : {
            "!type" : "[string]",
            "!doc" : "Short weekdays"
          },
          "narrowWeekdays" : {
            "!type" : "[string]",
            "!doc" : "Narrow weekdays"
          },
          "formats" : {
            "!type" : "+Object",
            "!doc" : "All available formats"
          },
          "standaloneShortWeekdays" : {
            "!type" : "[string]",
            "!doc" : "Standalone short weekdays"
          },
          "firstWeekCutOfDay" : {
            "!type" : "number",
            "!doc" : "First week cut of day"
          },
          "narrowMonths" : {
            "!type" : "[string]",
            "!doc" : "Narrow months"
          },
          "standaloneWeekdays" : {
            "!type" : "[string]",
            "!doc" : "Standalone weekdays"
          }
        }
      },
      "inputLocale" : {
        "!type" : "fn(opt_value?: string|+anychart.format.Locale) -> string|+anychart.format.Locale",
        "!url" : "8.3.0/anychart.format#inputLocale",
        "!doc" : "Input format settings to be used."
      },
      "number" : {
        "!type" : "fn(number: number, opt_value?: number|+anychart.format.NumberLocale|string, opt_decimalPoint?: string, opt_groupsSeparator?: string, opt_scale?: Object|bool, opt_zeroFillDecimals?: bool, opt_scaleSuffixSeparator?: string, opt_useBracketsForNegative?: bool) -> string",
        "!url" : "8.3.0/anychart.format#number",
        "!doc" : "Formats number."
      },
      "getIntervalIdentifier" : {
        "!type" : "fn(intervalUnit: +anychart.enums.Interval|string, opt_parentIntervalUnit?: +anychart.enums.Interval|string) -> string",
        "!url" : "8.3.0/anychart.format#getIntervalIdentifier",
        "!doc" : "Gets interval identifier by unit name."
      },
      "outputTimezone" : {
        "!type" : "fn(opt_value?: number) -> number",
        "!url" : "8.3.0/anychart.format#outputTimezone",
        "!doc" : "Output timezone settings."
      },
      "time" : {
        "!type" : "fn(date: number|Date, opt_timeZone?: number, opt_locale?: string|+anychart.format.Locale) -> string",
        "!url" : "8.3.0/anychart.format#time",
        "!doc" : "Formats time by pattern."
      },
      "outputDateTimeFormat" : {
        "!type" : "fn(opt_value?: string) -> string",
        "!url" : "8.3.0/anychart.format#outputDateTimeFormat",
        "!doc" : "Output date time format settings to be used."
      },
      "inputBaseDate" : {
        "!type" : "fn(value: Date|number) -> Date",
        "!url" : "8.3.0/anychart.format#inputBaseDate",
        "!doc" : "Input base date settings."
      },
      "outputTimeFormat" : {
        "!type" : "fn(opt_value?: string) -> string",
        "!url" : "8.3.0/anychart.format#outputTimeFormat",
        "!doc" : "Output time format settings to be used."
      },
      "date" : {
        "!type" : "fn(date: number|Date, opt_timeZone?: number, opt_locale?: string|+anychart.format.Locale) -> string",
        "!url" : "8.3.0/anychart.format#date",
        "!doc" : "Formats date by pattern."
      },
      "parseNumber" : {
        "!type" : "fn(value: +Object, opt_locale?: +anychart.format.NumberLocale|string) -> number",
        "!url" : "8.3.0/anychart.format#parseNumber",
        "!doc" : "Parses a value to number according to locale set."
      },
      "getMessage" : {
        "!type" : "fn(keyword: string) -> string",
        "!url" : "8.3.0/anychart.format#getMessage",
        "!doc" : "Returns localized message if the translation is provided in messages section of output locale."
      },
      "getDateTimeFormat" : {
        "!type" : "fn(identifier: string, opt_index?: number, opt_locale?: +anychart.format.Locale) -> string",
        "!url" : "8.3.0/anychart.format#getDateTimeFormat",
        "!doc" : "Gets date time format from locale by identifier and index."
      }
    },
    "choropleth" : {
      "!type" : "fn(var_args: +anychart.data.View|+anychart.data.Set|+Array) -> +anychart.charts.Map",
      "!url" : "8.3.0/anychart#choropleth",
      "!doc" : "Creates and returns a Choropleth Map."
    },
    "pert" : {
      "!type" : "fn() -> +anychart.charts.Pert",
      "!url" : "8.3.0/anychart#pert",
      "!doc" : "Creates and returns a Pert Chart."
    },
    "editor" : {
      "!type" : "fn() -> +anychart.editor.Editor",
      "!url" : "8.3.0/anychart#editor",
      "!doc" : "Creates Chart Editor."
    }
  }
}